
RTOS_Sensor_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000806c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  08008200  08008200  00018200  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008604  08008604  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  08008604  08008604  00018604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800860c  0800860c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800860c  0800860c  0001860c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008610  08008610  00018610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08008614  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d8  2**0
                  CONTENTS
 10 .bss          000042fc  200001d8  200001d8  000201d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200044d4  200044d4  000201d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 14 .debug_info   000150f1  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000317a  00000000  00000000  0003533c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012b8  00000000  00000000  000384b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e81  00000000  00000000  00039770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024ff2  00000000  00000000  0003a5f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000148c5  00000000  00000000  0005f5e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e239e  00000000  00000000  00073ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005d98  00000000  00000000  00156248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  0015bfe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080081e4 	.word	0x080081e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	080081e4 	.word	0x080081e4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;



uint32_t DWT_Delay_Init(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000ea8:	4b14      	ldr	r3, [pc, #80]	; (8000efc <DWT_Delay_Init+0x58>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	4a13      	ldr	r2, [pc, #76]	; (8000efc <DWT_Delay_Init+0x58>)
 8000eae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000eb2:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000eb4:	4b11      	ldr	r3, [pc, #68]	; (8000efc <DWT_Delay_Init+0x58>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	4a10      	ldr	r2, [pc, #64]	; (8000efc <DWT_Delay_Init+0x58>)
 8000eba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ebe:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <DWT_Delay_Init+0x5c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a0e      	ldr	r2, [pc, #56]	; (8000f00 <DWT_Delay_Init+0x5c>)
 8000ec6:	f023 0301 	bic.w	r3, r3, #1
 8000eca:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <DWT_Delay_Init+0x5c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <DWT_Delay_Init+0x5c>)
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000ed8:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <DWT_Delay_Init+0x5c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000ede:	bf00      	nop
     __ASM volatile ("NOP");
 8000ee0:	bf00      	nop
  __ASM volatile ("NOP");
 8000ee2:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <DWT_Delay_Init+0x5c>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000eec:	2300      	movs	r3, #0
 8000eee:	e000      	b.n	8000ef2 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000ef0:	2301      	movs	r3, #1
  }
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000edf0 	.word	0xe000edf0
 8000f00:	e0001000 	.word	0xe0001000

08000f04 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000f0c:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <delay+0x40>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000f12:	f002 fac5 	bl	80034a0 <HAL_RCC_GetHCLKFreq>
 8000f16:	4603      	mov	r3, r0
 8000f18:	4a0b      	ldr	r2, [pc, #44]	; (8000f48 <delay+0x44>)
 8000f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f1e:	0c9b      	lsrs	r3, r3, #18
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	fb02 f303 	mul.w	r3, r2, r3
 8000f26:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000f28:	bf00      	nop
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <delay+0x40>)
 8000f2c:	685a      	ldr	r2, [r3, #4]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	1ad2      	subs	r2, r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d3f8      	bcc.n	8000f2a <delay+0x26>
}
 8000f38:	bf00      	nop
 8000f3a:	bf00      	nop
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	e0001000 	.word	0xe0001000
 8000f48:	431bde83 	.word	0x431bde83

08000f4c <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	460b      	mov	r3, r1
 8000f56:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 030c 	add.w	r3, r7, #12
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000f68:	887b      	ldrh	r3, [r7, #2]
 8000f6a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000f74:	f107 030c 	add.w	r3, r7, #12
 8000f78:	4619      	mov	r1, r3
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f001 fc5e 	bl	800283c <HAL_GPIO_Init>
}
 8000f80:	bf00      	nop
 8000f82:	3720      	adds	r7, #32
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 030c 	add.w	r3, r7, #12
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000fa4:	887b      	ldrh	r3, [r7, #2]
 8000fa6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f001 fc40 	bl	800283c <HAL_GPIO_Init>
}
 8000fbc:	bf00      	nop
 8000fbe:	3720      	adds	r7, #32
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <DHT_Start>:


void DHT_Start (void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8000fc8:	f7ff ff6c 	bl	8000ea4 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8000fcc:	2120      	movs	r1, #32
 8000fce:	480d      	ldr	r0, [pc, #52]	; (8001004 <DHT_Start+0x40>)
 8000fd0:	f7ff ffbc 	bl	8000f4c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2120      	movs	r1, #32
 8000fd8:	480a      	ldr	r0, [pc, #40]	; (8001004 <DHT_Start+0x40>)
 8000fda:	f001 fde3 	bl	8002ba4 <HAL_GPIO_WritePin>


	delay (1200);  // >1ms delay
 8000fde:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000fe2:	f7ff ff8f 	bl	8000f04 <delay>


    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	2120      	movs	r1, #32
 8000fea:	4806      	ldr	r0, [pc, #24]	; (8001004 <DHT_Start+0x40>)
 8000fec:	f001 fdda 	bl	8002ba4 <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 8000ff0:	2014      	movs	r0, #20
 8000ff2:	f7ff ff87 	bl	8000f04 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8000ff6:	2120      	movs	r1, #32
 8000ff8:	4802      	ldr	r0, [pc, #8]	; (8001004 <DHT_Start+0x40>)
 8000ffa:	f7ff ffc5 	bl	8000f88 <Set_Pin_Input>
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40020000 	.word	0x40020000

08001008 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8001012:	2028      	movs	r0, #40	; 0x28
 8001014:	f7ff ff76 	bl	8000f04 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8001018:	2120      	movs	r1, #32
 800101a:	4811      	ldr	r0, [pc, #68]	; (8001060 <DHT_Check_Response+0x58>)
 800101c:	f001 fdaa 	bl	8002b74 <HAL_GPIO_ReadPin>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d10e      	bne.n	8001044 <DHT_Check_Response+0x3c>
	{
		delay (80);
 8001026:	2050      	movs	r0, #80	; 0x50
 8001028:	f7ff ff6c 	bl	8000f04 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 800102c:	2120      	movs	r1, #32
 800102e:	480c      	ldr	r0, [pc, #48]	; (8001060 <DHT_Check_Response+0x58>)
 8001030:	f001 fda0 	bl	8002b74 <HAL_GPIO_ReadPin>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d002      	beq.n	8001040 <DHT_Check_Response+0x38>
 800103a:	2301      	movs	r3, #1
 800103c:	71fb      	strb	r3, [r7, #7]
 800103e:	e001      	b.n	8001044 <DHT_Check_Response+0x3c>
		else Response = -1;
 8001040:	23ff      	movs	r3, #255	; 0xff
 8001042:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8001044:	bf00      	nop
 8001046:	2120      	movs	r1, #32
 8001048:	4805      	ldr	r0, [pc, #20]	; (8001060 <DHT_Check_Response+0x58>)
 800104a:	f001 fd93 	bl	8002b74 <HAL_GPIO_ReadPin>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d1f8      	bne.n	8001046 <DHT_Check_Response+0x3e>

	return Response;
 8001054:	79fb      	ldrb	r3, [r7, #7]
}
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40020000 	.word	0x40020000

08001064 <DHT_Read>:

uint8_t DHT_Read (void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 800106a:	2300      	movs	r3, #0
 800106c:	71bb      	strb	r3, [r7, #6]
 800106e:	e037      	b.n	80010e0 <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8001070:	bf00      	nop
 8001072:	2120      	movs	r1, #32
 8001074:	481e      	ldr	r0, [pc, #120]	; (80010f0 <DHT_Read+0x8c>)
 8001076:	f001 fd7d 	bl	8002b74 <HAL_GPIO_ReadPin>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d0f8      	beq.n	8001072 <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 8001080:	2028      	movs	r0, #40	; 0x28
 8001082:	f7ff ff3f 	bl	8000f04 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8001086:	2120      	movs	r1, #32
 8001088:	4819      	ldr	r0, [pc, #100]	; (80010f0 <DHT_Read+0x8c>)
 800108a:	f001 fd73 	bl	8002b74 <HAL_GPIO_ReadPin>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d10e      	bne.n	80010b2 <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8001094:	79bb      	ldrb	r3, [r7, #6]
 8001096:	f1c3 0307 	rsb	r3, r3, #7
 800109a:	2201      	movs	r2, #1
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	b25b      	sxtb	r3, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	b25a      	sxtb	r2, r3
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	4013      	ands	r3, r2
 80010ac:	b25b      	sxtb	r3, r3
 80010ae:	71fb      	strb	r3, [r7, #7]
 80010b0:	e00b      	b.n	80010ca <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80010b2:	79bb      	ldrb	r3, [r7, #6]
 80010b4:	f1c3 0307 	rsb	r3, r3, #7
 80010b8:	2201      	movs	r2, #1
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	b25a      	sxtb	r2, r3
 80010c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b25b      	sxtb	r3, r3
 80010c8:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 80010ca:	bf00      	nop
 80010cc:	2120      	movs	r1, #32
 80010ce:	4808      	ldr	r0, [pc, #32]	; (80010f0 <DHT_Read+0x8c>)
 80010d0:	f001 fd50 	bl	8002b74 <HAL_GPIO_ReadPin>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1f8      	bne.n	80010cc <DHT_Read+0x68>
	for (j=0;j<8;j++)
 80010da:	79bb      	ldrb	r3, [r7, #6]
 80010dc:	3301      	adds	r3, #1
 80010de:	71bb      	strb	r3, [r7, #6]
 80010e0:	79bb      	ldrb	r3, [r7, #6]
 80010e2:	2b07      	cmp	r3, #7
 80010e4:	d9c4      	bls.n	8001070 <DHT_Read+0xc>
	}
	return i;
 80010e6:	79fb      	ldrb	r3, [r7, #7]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40020000 	.word	0x40020000

080010f4 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 80010fc:	f7ff ff62 	bl	8000fc4 <DHT_Start>
	Presence = DHT_Check_Response ();
 8001100:	f7ff ff82 	bl	8001008 <DHT_Check_Response>
 8001104:	4603      	mov	r3, r0
 8001106:	461a      	mov	r2, r3
 8001108:	4b27      	ldr	r3, [pc, #156]	; (80011a8 <DHT_GetData+0xb4>)
 800110a:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 800110c:	f7ff ffaa 	bl	8001064 <DHT_Read>
 8001110:	4603      	mov	r3, r0
 8001112:	461a      	mov	r2, r3
 8001114:	4b25      	ldr	r3, [pc, #148]	; (80011ac <DHT_GetData+0xb8>)
 8001116:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 8001118:	f7ff ffa4 	bl	8001064 <DHT_Read>
 800111c:	4603      	mov	r3, r0
 800111e:	461a      	mov	r2, r3
 8001120:	4b23      	ldr	r3, [pc, #140]	; (80011b0 <DHT_GetData+0xbc>)
 8001122:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8001124:	f7ff ff9e 	bl	8001064 <DHT_Read>
 8001128:	4603      	mov	r3, r0
 800112a:	461a      	mov	r2, r3
 800112c:	4b21      	ldr	r3, [pc, #132]	; (80011b4 <DHT_GetData+0xc0>)
 800112e:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8001130:	f7ff ff98 	bl	8001064 <DHT_Read>
 8001134:	4603      	mov	r3, r0
 8001136:	461a      	mov	r2, r3
 8001138:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <DHT_GetData+0xc4>)
 800113a:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 800113c:	f7ff ff92 	bl	8001064 <DHT_Read>
 8001140:	4603      	mov	r3, r0
 8001142:	b29a      	uxth	r2, r3
 8001144:	4b1d      	ldr	r3, [pc, #116]	; (80011bc <DHT_GetData+0xc8>)
 8001146:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8001148:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <DHT_GetData+0xc8>)
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	4619      	mov	r1, r3
 800114e:	4b17      	ldr	r3, [pc, #92]	; (80011ac <DHT_GetData+0xb8>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	461a      	mov	r2, r3
 8001154:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <DHT_GetData+0xbc>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	4413      	add	r3, r2
 800115a:	4a16      	ldr	r2, [pc, #88]	; (80011b4 <DHT_GetData+0xc0>)
 800115c:	7812      	ldrb	r2, [r2, #0]
 800115e:	4413      	add	r3, r2
 8001160:	4a15      	ldr	r2, [pc, #84]	; (80011b8 <DHT_GetData+0xc4>)
 8001162:	7812      	ldrb	r2, [r2, #0]
 8001164:	4413      	add	r3, r2
 8001166:	4299      	cmp	r1, r3
 8001168:	d119      	bne.n	800119e <DHT_GetData+0xaa>
	{
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
 800116a:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <DHT_GetData+0xc0>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	021b      	lsls	r3, r3, #8
 8001170:	4a11      	ldr	r2, [pc, #68]	; (80011b8 <DHT_GetData+0xc4>)
 8001172:	7812      	ldrb	r2, [r2, #0]
 8001174:	4313      	orrs	r3, r2
 8001176:	ee07 3a90 	vmov	s15, r3
 800117a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
 8001184:	4b09      	ldr	r3, [pc, #36]	; (80011ac <DHT_GetData+0xb8>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	021b      	lsls	r3, r3, #8
 800118a:	4a09      	ldr	r2, [pc, #36]	; (80011b0 <DHT_GetData+0xbc>)
 800118c:	7812      	ldrb	r2, [r2, #0]
 800118e:	4313      	orrs	r3, r2
 8001190:	ee07 3a90 	vmov	s15, r3
 8001194:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	edc3 7a01 	vstr	s15, [r3, #4]

	}
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200001fa 	.word	0x200001fa
 80011ac:	200001f4 	.word	0x200001f4
 80011b0:	200001f5 	.word	0x200001f5
 80011b4:	200001f6 	.word	0x200001f6
 80011b8:	200001f7 	.word	0x200001f7
 80011bc:	200001f8 	.word	0x200001f8

080011c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4a07      	ldr	r2, [pc, #28]	; (80011ec <vApplicationGetIdleTaskMemory+0x2c>)
 80011d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	4a06      	ldr	r2, [pc, #24]	; (80011f0 <vApplicationGetIdleTaskMemory+0x30>)
 80011d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2280      	movs	r2, #128	; 0x80
 80011dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80011de:	bf00      	nop
 80011e0:	3714      	adds	r7, #20
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	200001fc 	.word	0x200001fc
 80011f0:	2000029c 	.word	0x2000029c

080011f4 <vMQ_5_Task>:
{
  return ((fahrenheit - 32.0) * 5.0 / 9.0);
}

void vMQ_5_Task(void *pvParam)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
	while(1)
	{
		 HAL_ADC_Start(&hadc1);
 80011fc:	4810      	ldr	r0, [pc, #64]	; (8001240 <vMQ_5_Task+0x4c>)
 80011fe:	f000 fe7f 	bl	8001f00 <HAL_ADC_Start>
		 HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001202:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001206:	480e      	ldr	r0, [pc, #56]	; (8001240 <vMQ_5_Task+0x4c>)
 8001208:	f000 ff7f 	bl	800210a <HAL_ADC_PollForConversion>
		 sensor_data1.mq_data = HAL_ADC_GetValue(&hadc1);
 800120c:	480c      	ldr	r0, [pc, #48]	; (8001240 <vMQ_5_Task+0x4c>)
 800120e:	f001 f807 	bl	8002220 <HAL_ADC_GetValue>
 8001212:	4603      	mov	r3, r0
 8001214:	461a      	mov	r2, r3
 8001216:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <vMQ_5_Task+0x50>)
 8001218:	609a      	str	r2, [r3, #8]
		 portENTER_CRITICAL();
 800121a:	f004 f803 	bl	8005224 <vPortEnterCritical>
		 HAL_UART_Transmit(&huart2,(uint8_t*)&sensor_data1, sizeof(sensor_data1), HAL_MAX_DELAY );
 800121e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001222:	2214      	movs	r2, #20
 8001224:	4907      	ldr	r1, [pc, #28]	; (8001244 <vMQ_5_Task+0x50>)
 8001226:	4808      	ldr	r0, [pc, #32]	; (8001248 <vMQ_5_Task+0x54>)
 8001228:	f002 fc92 	bl	8003b50 <HAL_UART_Transmit>
		 portEXIT_CRITICAL();
 800122c:	f004 f82a 	bl	8005284 <vPortExitCritical>
		 HAL_ADC_Stop(&hadc1);
 8001230:	4803      	ldr	r0, [pc, #12]	; (8001240 <vMQ_5_Task+0x4c>)
 8001232:	f000 ff37 	bl	80020a4 <HAL_ADC_Stop>
		 HAL_Delay(1000);
 8001236:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800123a:	f000 fdf9 	bl	8001e30 <HAL_Delay>
		 HAL_ADC_Start(&hadc1);
 800123e:	e7dd      	b.n	80011fc <vMQ_5_Task+0x8>
 8001240:	2000049c 	.word	0x2000049c
 8001244:	200005c4 	.word	0x200005c4
 8001248:	20000574 	.word	0x20000574

0800124c <vDHT_22_Task>:
	}
	vTaskDelete(NULL);
}

void vDHT_22_Task(void *pvParam)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	 while (1)
	  {
	    /* USER CODE END WHILE */
		  portENTER_CRITICAL();
 8001254:	f003 ffe6 	bl	8005224 <vPortEnterCritical>
	  	  DHT_GetData(&DHT22_Data);
 8001258:	4813      	ldr	r0, [pc, #76]	; (80012a8 <vDHT_22_Task+0x5c>)
 800125a:	f7ff ff4b 	bl	80010f4 <DHT_GetData>
 		  sensor_data1.temp_data = DHT22_Data.Temperature/10;
 800125e:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <vDHT_22_Task+0x5c>)
 8001260:	ed93 7a00 	vldr	s14, [r3]
 8001264:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001268:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <vDHT_22_Task+0x60>)
 800126e:	edc3 7a00 	vstr	s15, [r3]
		  sensor_data1.humid_data = DHT22_Data.Humidity/10;
 8001272:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <vDHT_22_Task+0x5c>)
 8001274:	ed93 7a01 	vldr	s14, [r3, #4]
 8001278:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800127c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001280:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <vDHT_22_Task+0x60>)
 8001282:	edc3 7a01 	vstr	s15, [r3, #4]
	      HAL_UART_Transmit(&huart2, (uint8_t*)&sensor_data1, count, HAL_MAX_DELAY);
 8001286:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <vDHT_22_Task+0x64>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	b29a      	uxth	r2, r3
 800128c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001290:	4906      	ldr	r1, [pc, #24]	; (80012ac <vDHT_22_Task+0x60>)
 8001292:	4808      	ldr	r0, [pc, #32]	; (80012b4 <vDHT_22_Task+0x68>)
 8001294:	f002 fc5c 	bl	8003b50 <HAL_UART_Transmit>
 		  portEXIT_CRITICAL();
 8001298:	f003 fff4 	bl	8005284 <vPortExitCritical>
 		  HAL_Delay(2000);
 800129c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80012a0:	f000 fdc6 	bl	8001e30 <HAL_Delay>
		  portENTER_CRITICAL();
 80012a4:	e7d6      	b.n	8001254 <vDHT_22_Task+0x8>
 80012a6:	bf00      	nop
 80012a8:	200005d8 	.word	0x200005d8
 80012ac:	200005c4 	.word	0x200005c4
 80012b0:	200005e0 	.word	0x200005e0
 80012b4:	20000574 	.word	0x20000574

080012b8 <vIR_Task>:
	  }
	vTaskDelete(NULL);
}

void vIR_Task(void *pvParam)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	while(1)
	{
		 HAL_ADC_Start(&hadc3);
 80012c0:	4811      	ldr	r0, [pc, #68]	; (8001308 <vIR_Task+0x50>)
 80012c2:	f000 fe1d 	bl	8001f00 <HAL_ADC_Start>
		 HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 80012c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012ca:	480f      	ldr	r0, [pc, #60]	; (8001308 <vIR_Task+0x50>)
 80012cc:	f000 ff1d 	bl	800210a <HAL_ADC_PollForConversion>
		 sensor_data1.ir_data = HAL_ADC_GetValue(&hadc3);
 80012d0:	480d      	ldr	r0, [pc, #52]	; (8001308 <vIR_Task+0x50>)
 80012d2:	f000 ffa5 	bl	8002220 <HAL_ADC_GetValue>
 80012d6:	4603      	mov	r3, r0
 80012d8:	461a      	mov	r2, r3
 80012da:	4b0c      	ldr	r3, [pc, #48]	; (800130c <vIR_Task+0x54>)
 80012dc:	60da      	str	r2, [r3, #12]
		 portENTER_CRITICAL();
 80012de:	f003 ffa1 	bl	8005224 <vPortEnterCritical>
		 HAL_UART_Transmit(&huart2,(uint8_t*)&sensor_data1, count, HAL_MAX_DELAY );
 80012e2:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <vIR_Task+0x58>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012ec:	4907      	ldr	r1, [pc, #28]	; (800130c <vIR_Task+0x54>)
 80012ee:	4809      	ldr	r0, [pc, #36]	; (8001314 <vIR_Task+0x5c>)
 80012f0:	f002 fc2e 	bl	8003b50 <HAL_UART_Transmit>
		 portEXIT_CRITICAL();
 80012f4:	f003 ffc6 	bl	8005284 <vPortExitCritical>
		 HAL_ADC_Stop(&hadc3);
 80012f8:	4803      	ldr	r0, [pc, #12]	; (8001308 <vIR_Task+0x50>)
 80012fa:	f000 fed3 	bl	80020a4 <HAL_ADC_Stop>
		 HAL_Delay(2000);
 80012fe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001302:	f000 fd95 	bl	8001e30 <HAL_Delay>
		 HAL_ADC_Start(&hadc3);
 8001306:	e7db      	b.n	80012c0 <vIR_Task+0x8>
 8001308:	2000052c 	.word	0x2000052c
 800130c:	200005c4 	.word	0x200005c4
 8001310:	200005e0 	.word	0x200005e0
 8001314:	20000574 	.word	0x20000574

08001318 <vSound_Task>:
	}
	vTaskDelete(NULL);
}

void vSound_Task(void *pvParam)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		 HAL_ADC_Start(&hadc2);
 8001320:	4811      	ldr	r0, [pc, #68]	; (8001368 <vSound_Task+0x50>)
 8001322:	f000 fded 	bl	8001f00 <HAL_ADC_Start>
		 HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8001326:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800132a:	480f      	ldr	r0, [pc, #60]	; (8001368 <vSound_Task+0x50>)
 800132c:	f000 feed 	bl	800210a <HAL_ADC_PollForConversion>
		 sensor_data1.sound_data = HAL_ADC_GetValue(&hadc2);
 8001330:	480d      	ldr	r0, [pc, #52]	; (8001368 <vSound_Task+0x50>)
 8001332:	f000 ff75 	bl	8002220 <HAL_ADC_GetValue>
 8001336:	4603      	mov	r3, r0
 8001338:	461a      	mov	r2, r3
 800133a:	4b0c      	ldr	r3, [pc, #48]	; (800136c <vSound_Task+0x54>)
 800133c:	611a      	str	r2, [r3, #16]
		 portENTER_CRITICAL();
 800133e:	f003 ff71 	bl	8005224 <vPortEnterCritical>
		 HAL_UART_Transmit(&huart2,(uint8_t*)&sensor_data1, count, HAL_MAX_DELAY );
 8001342:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <vSound_Task+0x58>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	b29a      	uxth	r2, r3
 8001348:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800134c:	4907      	ldr	r1, [pc, #28]	; (800136c <vSound_Task+0x54>)
 800134e:	4809      	ldr	r0, [pc, #36]	; (8001374 <vSound_Task+0x5c>)
 8001350:	f002 fbfe 	bl	8003b50 <HAL_UART_Transmit>
		 portEXIT_CRITICAL();
 8001354:	f003 ff96 	bl	8005284 <vPortExitCritical>
		 HAL_ADC_Stop(&hadc2);
 8001358:	4803      	ldr	r0, [pc, #12]	; (8001368 <vSound_Task+0x50>)
 800135a:	f000 fea3 	bl	80020a4 <HAL_ADC_Stop>
		 HAL_Delay(2000);
 800135e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001362:	f000 fd65 	bl	8001e30 <HAL_Delay>
		 HAL_ADC_Start(&hadc2);
 8001366:	e7db      	b.n	8001320 <vSound_Task+0x8>
 8001368:	200004e4 	.word	0x200004e4
 800136c:	200005c4 	.word	0x200005c4
 8001370:	200005e0 	.word	0x200005e0
 8001374:	20000574 	.word	0x20000574

08001378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001378:	b5b0      	push	{r4, r5, r7, lr}
 800137a:	b090      	sub	sp, #64	; 0x40
 800137c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800137e:	f000 fd15 	bl	8001dac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001382:	f000 f871 	bl	8001468 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001386:	f000 f9f9 	bl	800177c <MX_GPIO_Init>
  MX_ADC1_Init();
 800138a:	f000 f8d7 	bl	800153c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800138e:	f000 f9cb 	bl	8001728 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8001392:	f000 f925 	bl	80015e0 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001396:	f000 f975 	bl	8001684 <MX_ADC3_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800139a:	4b27      	ldr	r3, [pc, #156]	; (8001438 <main+0xc0>)
 800139c:	f107 041c 	add.w	r4, r7, #28
 80013a0:	461d      	mov	r5, r3
 80013a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80013ae:	f107 031c 	add.w	r3, r7, #28
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f002 ffa6 	bl	8004306 <osThreadCreate>
 80013ba:	4603      	mov	r3, r0
 80013bc:	4a1f      	ldr	r2, [pc, #124]	; (800143c <main+0xc4>)
 80013be:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 80013c0:	4b1f      	ldr	r3, [pc, #124]	; (8001440 <main+0xc8>)
 80013c2:	463c      	mov	r4, r7
 80013c4:	461d      	mov	r5, r3
 80013c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80013d2:	463b      	mov	r3, r7
 80013d4:	2100      	movs	r1, #0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f002 ff95 	bl	8004306 <osThreadCreate>
 80013dc:	4603      	mov	r3, r0
 80013de:	4a19      	ldr	r2, [pc, #100]	; (8001444 <main+0xcc>)
 80013e0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(vMQ_5_Task, "Task1", 128, NULL, 4, NULL);
 80013e2:	2300      	movs	r3, #0
 80013e4:	9301      	str	r3, [sp, #4]
 80013e6:	2304      	movs	r3, #4
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	2300      	movs	r3, #0
 80013ec:	2280      	movs	r2, #128	; 0x80
 80013ee:	4916      	ldr	r1, [pc, #88]	; (8001448 <main+0xd0>)
 80013f0:	4816      	ldr	r0, [pc, #88]	; (800144c <main+0xd4>)
 80013f2:	f003 f8f9 	bl	80045e8 <xTaskCreate>
  xTaskCreate(vIR_Task, "Task2", 128, NULL, 4, NULL);
 80013f6:	2300      	movs	r3, #0
 80013f8:	9301      	str	r3, [sp, #4]
 80013fa:	2304      	movs	r3, #4
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	2300      	movs	r3, #0
 8001400:	2280      	movs	r2, #128	; 0x80
 8001402:	4913      	ldr	r1, [pc, #76]	; (8001450 <main+0xd8>)
 8001404:	4813      	ldr	r0, [pc, #76]	; (8001454 <main+0xdc>)
 8001406:	f003 f8ef 	bl	80045e8 <xTaskCreate>
  xTaskCreate(vSound_Task, "Task3", 128, NULL, 4, NULL);
 800140a:	2300      	movs	r3, #0
 800140c:	9301      	str	r3, [sp, #4]
 800140e:	2304      	movs	r3, #4
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	2300      	movs	r3, #0
 8001414:	2280      	movs	r2, #128	; 0x80
 8001416:	4910      	ldr	r1, [pc, #64]	; (8001458 <main+0xe0>)
 8001418:	4810      	ldr	r0, [pc, #64]	; (800145c <main+0xe4>)
 800141a:	f003 f8e5 	bl	80045e8 <xTaskCreate>
  xTaskCreate(vDHT_22_Task, "Task4", 128, NULL, 4, NULL);
 800141e:	2300      	movs	r3, #0
 8001420:	9301      	str	r3, [sp, #4]
 8001422:	2304      	movs	r3, #4
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	2300      	movs	r3, #0
 8001428:	2280      	movs	r2, #128	; 0x80
 800142a:	490d      	ldr	r1, [pc, #52]	; (8001460 <main+0xe8>)
 800142c:	480d      	ldr	r0, [pc, #52]	; (8001464 <main+0xec>)
 800142e:	f003 f8db 	bl	80045e8 <xTaskCreate>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001432:	f002 ff61 	bl	80042f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001436:	e7fe      	b.n	8001436 <main+0xbe>
 8001438:	0800822c 	.word	0x0800822c
 800143c:	200005bc 	.word	0x200005bc
 8001440:	08008254 	.word	0x08008254
 8001444:	200005c0 	.word	0x200005c0
 8001448:	08008200 	.word	0x08008200
 800144c:	080011f5 	.word	0x080011f5
 8001450:	08008208 	.word	0x08008208
 8001454:	080012b9 	.word	0x080012b9
 8001458:	08008210 	.word	0x08008210
 800145c:	08001319 	.word	0x08001319
 8001460:	08008218 	.word	0x08008218
 8001464:	0800124d 	.word	0x0800124d

08001468 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b094      	sub	sp, #80	; 0x50
 800146c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800146e:	f107 0320 	add.w	r3, r7, #32
 8001472:	2230      	movs	r2, #48	; 0x30
 8001474:	2100      	movs	r1, #0
 8001476:	4618      	mov	r0, r3
 8001478:	f004 ff0b 	bl	8006292 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800147c:	f107 030c 	add.w	r3, r7, #12
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800148c:	2300      	movs	r3, #0
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	4b28      	ldr	r3, [pc, #160]	; (8001534 <SystemClock_Config+0xcc>)
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	4a27      	ldr	r2, [pc, #156]	; (8001534 <SystemClock_Config+0xcc>)
 8001496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149a:	6413      	str	r3, [r2, #64]	; 0x40
 800149c:	4b25      	ldr	r3, [pc, #148]	; (8001534 <SystemClock_Config+0xcc>)
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014a8:	2300      	movs	r3, #0
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	4b22      	ldr	r3, [pc, #136]	; (8001538 <SystemClock_Config+0xd0>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a21      	ldr	r2, [pc, #132]	; (8001538 <SystemClock_Config+0xd0>)
 80014b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b6:	6013      	str	r3, [r2, #0]
 80014b8:	4b1f      	ldr	r3, [pc, #124]	; (8001538 <SystemClock_Config+0xd0>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014c4:	2301      	movs	r3, #1
 80014c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ce:	2302      	movs	r3, #2
 80014d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014d8:	2308      	movs	r3, #8
 80014da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80014e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014e2:	2302      	movs	r3, #2
 80014e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80014e6:	2307      	movs	r3, #7
 80014e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ea:	f107 0320 	add.w	r3, r7, #32
 80014ee:	4618      	mov	r0, r3
 80014f0:	f001 fb72 	bl	8002bd8 <HAL_RCC_OscConfig>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <SystemClock_Config+0x96>
  {
    Error_Handler();
 80014fa:	f000 f9a3 	bl	8001844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014fe:	230f      	movs	r3, #15
 8001500:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001502:	2302      	movs	r3, #2
 8001504:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800150a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800150e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001510:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001514:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001516:	f107 030c 	add.w	r3, r7, #12
 800151a:	2105      	movs	r1, #5
 800151c:	4618      	mov	r0, r3
 800151e:	f001 fdd3 	bl	80030c8 <HAL_RCC_ClockConfig>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001528:	f000 f98c 	bl	8001844 <Error_Handler>
  }
}
 800152c:	bf00      	nop
 800152e:	3750      	adds	r7, #80	; 0x50
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40023800 	.word	0x40023800
 8001538:	40007000 	.word	0x40007000

0800153c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001542:	463b      	mov	r3, r7
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800154e:	4b21      	ldr	r3, [pc, #132]	; (80015d4 <MX_ADC1_Init+0x98>)
 8001550:	4a21      	ldr	r2, [pc, #132]	; (80015d8 <MX_ADC1_Init+0x9c>)
 8001552:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001554:	4b1f      	ldr	r3, [pc, #124]	; (80015d4 <MX_ADC1_Init+0x98>)
 8001556:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800155a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800155c:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <MX_ADC1_Init+0x98>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001562:	4b1c      	ldr	r3, [pc, #112]	; (80015d4 <MX_ADC1_Init+0x98>)
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001568:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <MX_ADC1_Init+0x98>)
 800156a:	2200      	movs	r2, #0
 800156c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800156e:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <MX_ADC1_Init+0x98>)
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001576:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <MX_ADC1_Init+0x98>)
 8001578:	2200      	movs	r2, #0
 800157a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800157c:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <MX_ADC1_Init+0x98>)
 800157e:	4a17      	ldr	r2, [pc, #92]	; (80015dc <MX_ADC1_Init+0xa0>)
 8001580:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001582:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <MX_ADC1_Init+0x98>)
 8001584:	2200      	movs	r2, #0
 8001586:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <MX_ADC1_Init+0x98>)
 800158a:	2201      	movs	r2, #1
 800158c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800158e:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <MX_ADC1_Init+0x98>)
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001596:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <MX_ADC1_Init+0x98>)
 8001598:	2201      	movs	r2, #1
 800159a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800159c:	480d      	ldr	r0, [pc, #52]	; (80015d4 <MX_ADC1_Init+0x98>)
 800159e:	f000 fc6b 	bl	8001e78 <HAL_ADC_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80015a8:	f000 f94c 	bl	8001844 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015b0:	2301      	movs	r3, #1
 80015b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015b8:	463b      	mov	r3, r7
 80015ba:	4619      	mov	r1, r3
 80015bc:	4805      	ldr	r0, [pc, #20]	; (80015d4 <MX_ADC1_Init+0x98>)
 80015be:	f000 fe3d 	bl	800223c <HAL_ADC_ConfigChannel>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80015c8:	f000 f93c 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015cc:	bf00      	nop
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	2000049c 	.word	0x2000049c
 80015d8:	40012000 	.word	0x40012000
 80015dc:	0f000001 	.word	0x0f000001

080015e0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015e6:	463b      	mov	r3, r7
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80015f2:	4b21      	ldr	r3, [pc, #132]	; (8001678 <MX_ADC2_Init+0x98>)
 80015f4:	4a21      	ldr	r2, [pc, #132]	; (800167c <MX_ADC2_Init+0x9c>)
 80015f6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015f8:	4b1f      	ldr	r3, [pc, #124]	; (8001678 <MX_ADC2_Init+0x98>)
 80015fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015fe:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001600:	4b1d      	ldr	r3, [pc, #116]	; (8001678 <MX_ADC2_Init+0x98>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001606:	4b1c      	ldr	r3, [pc, #112]	; (8001678 <MX_ADC2_Init+0x98>)
 8001608:	2200      	movs	r2, #0
 800160a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800160c:	4b1a      	ldr	r3, [pc, #104]	; (8001678 <MX_ADC2_Init+0x98>)
 800160e:	2200      	movs	r2, #0
 8001610:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001612:	4b19      	ldr	r3, [pc, #100]	; (8001678 <MX_ADC2_Init+0x98>)
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800161a:	4b17      	ldr	r3, [pc, #92]	; (8001678 <MX_ADC2_Init+0x98>)
 800161c:	2200      	movs	r2, #0
 800161e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001620:	4b15      	ldr	r3, [pc, #84]	; (8001678 <MX_ADC2_Init+0x98>)
 8001622:	4a17      	ldr	r2, [pc, #92]	; (8001680 <MX_ADC2_Init+0xa0>)
 8001624:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001626:	4b14      	ldr	r3, [pc, #80]	; (8001678 <MX_ADC2_Init+0x98>)
 8001628:	2200      	movs	r2, #0
 800162a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800162c:	4b12      	ldr	r3, [pc, #72]	; (8001678 <MX_ADC2_Init+0x98>)
 800162e:	2201      	movs	r2, #1
 8001630:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001632:	4b11      	ldr	r3, [pc, #68]	; (8001678 <MX_ADC2_Init+0x98>)
 8001634:	2200      	movs	r2, #0
 8001636:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800163a:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <MX_ADC2_Init+0x98>)
 800163c:	2201      	movs	r2, #1
 800163e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001640:	480d      	ldr	r0, [pc, #52]	; (8001678 <MX_ADC2_Init+0x98>)
 8001642:	f000 fc19 	bl	8001e78 <HAL_ADC_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800164c:	f000 f8fa 	bl	8001844 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001650:	2304      	movs	r3, #4
 8001652:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001654:	2301      	movs	r3, #1
 8001656:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001658:	2300      	movs	r3, #0
 800165a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800165c:	463b      	mov	r3, r7
 800165e:	4619      	mov	r1, r3
 8001660:	4805      	ldr	r0, [pc, #20]	; (8001678 <MX_ADC2_Init+0x98>)
 8001662:	f000 fdeb 	bl	800223c <HAL_ADC_ConfigChannel>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800166c:	f000 f8ea 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001670:	bf00      	nop
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	200004e4 	.word	0x200004e4
 800167c:	40012100 	.word	0x40012100
 8001680:	0f000001 	.word	0x0f000001

08001684 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800168a:	463b      	mov	r3, r7
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001696:	4b21      	ldr	r3, [pc, #132]	; (800171c <MX_ADC3_Init+0x98>)
 8001698:	4a21      	ldr	r2, [pc, #132]	; (8001720 <MX_ADC3_Init+0x9c>)
 800169a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800169c:	4b1f      	ldr	r3, [pc, #124]	; (800171c <MX_ADC3_Init+0x98>)
 800169e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016a2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80016a4:	4b1d      	ldr	r3, [pc, #116]	; (800171c <MX_ADC3_Init+0x98>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80016aa:	4b1c      	ldr	r3, [pc, #112]	; (800171c <MX_ADC3_Init+0x98>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80016b0:	4b1a      	ldr	r3, [pc, #104]	; (800171c <MX_ADC3_Init+0x98>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80016b6:	4b19      	ldr	r3, [pc, #100]	; (800171c <MX_ADC3_Init+0x98>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016be:	4b17      	ldr	r3, [pc, #92]	; (800171c <MX_ADC3_Init+0x98>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016c4:	4b15      	ldr	r3, [pc, #84]	; (800171c <MX_ADC3_Init+0x98>)
 80016c6:	4a17      	ldr	r2, [pc, #92]	; (8001724 <MX_ADC3_Init+0xa0>)
 80016c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016ca:	4b14      	ldr	r3, [pc, #80]	; (800171c <MX_ADC3_Init+0x98>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <MX_ADC3_Init+0x98>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80016d6:	4b11      	ldr	r3, [pc, #68]	; (800171c <MX_ADC3_Init+0x98>)
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016de:	4b0f      	ldr	r3, [pc, #60]	; (800171c <MX_ADC3_Init+0x98>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80016e4:	480d      	ldr	r0, [pc, #52]	; (800171c <MX_ADC3_Init+0x98>)
 80016e6:	f000 fbc7 	bl	8001e78 <HAL_ADC_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80016f0:	f000 f8a8 	bl	8001844 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80016f4:	2301      	movs	r3, #1
 80016f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80016f8:	2301      	movs	r3, #1
 80016fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001700:	463b      	mov	r3, r7
 8001702:	4619      	mov	r1, r3
 8001704:	4805      	ldr	r0, [pc, #20]	; (800171c <MX_ADC3_Init+0x98>)
 8001706:	f000 fd99 	bl	800223c <HAL_ADC_ConfigChannel>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001710:	f000 f898 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001714:	bf00      	nop
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	2000052c 	.word	0x2000052c
 8001720:	40012200 	.word	0x40012200
 8001724:	0f000001 	.word	0x0f000001

08001728 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800172c:	4b11      	ldr	r3, [pc, #68]	; (8001774 <MX_USART2_UART_Init+0x4c>)
 800172e:	4a12      	ldr	r2, [pc, #72]	; (8001778 <MX_USART2_UART_Init+0x50>)
 8001730:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001732:	4b10      	ldr	r3, [pc, #64]	; (8001774 <MX_USART2_UART_Init+0x4c>)
 8001734:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001738:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800173a:	4b0e      	ldr	r3, [pc, #56]	; (8001774 <MX_USART2_UART_Init+0x4c>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <MX_USART2_UART_Init+0x4c>)
 8001742:	2200      	movs	r2, #0
 8001744:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001746:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <MX_USART2_UART_Init+0x4c>)
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800174c:	4b09      	ldr	r3, [pc, #36]	; (8001774 <MX_USART2_UART_Init+0x4c>)
 800174e:	220c      	movs	r2, #12
 8001750:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001752:	4b08      	ldr	r3, [pc, #32]	; (8001774 <MX_USART2_UART_Init+0x4c>)
 8001754:	2200      	movs	r2, #0
 8001756:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <MX_USART2_UART_Init+0x4c>)
 800175a:	2200      	movs	r2, #0
 800175c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800175e:	4805      	ldr	r0, [pc, #20]	; (8001774 <MX_USART2_UART_Init+0x4c>)
 8001760:	f002 f9a6 	bl	8003ab0 <HAL_UART_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800176a:	f000 f86b 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000574 	.word	0x20000574
 8001778:	40004400 	.word	0x40004400

0800177c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b088      	sub	sp, #32
 8001780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001782:	f107 030c 	add.w	r3, r7, #12
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	60da      	str	r2, [r3, #12]
 8001790:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <MX_GPIO_Init+0x7c>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a17      	ldr	r2, [pc, #92]	; (80017f8 <MX_GPIO_Init+0x7c>)
 800179c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <MX_GPIO_Init+0x7c>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	607b      	str	r3, [r7, #4]
 80017b2:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <MX_GPIO_Init+0x7c>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	4a10      	ldr	r2, [pc, #64]	; (80017f8 <MX_GPIO_Init+0x7c>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6313      	str	r3, [r2, #48]	; 0x30
 80017be:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <MX_GPIO_Init+0x7c>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	607b      	str	r3, [r7, #4]
 80017c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80017ca:	2200      	movs	r2, #0
 80017cc:	2120      	movs	r1, #32
 80017ce:	480b      	ldr	r0, [pc, #44]	; (80017fc <MX_GPIO_Init+0x80>)
 80017d0:	f001 f9e8 	bl	8002ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80017d4:	2320      	movs	r3, #32
 80017d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d8:	2301      	movs	r3, #1
 80017da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e4:	f107 030c 	add.w	r3, r7, #12
 80017e8:	4619      	mov	r1, r3
 80017ea:	4804      	ldr	r0, [pc, #16]	; (80017fc <MX_GPIO_Init+0x80>)
 80017ec:	f001 f826 	bl	800283c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017f0:	bf00      	nop
 80017f2:	3720      	adds	r7, #32
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40020000 	.word	0x40020000

08001800 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001808:	2001      	movs	r0, #1
 800180a:	f002 fdc8 	bl	800439e <osDelay>
 800180e:	e7fb      	b.n	8001808 <StartDefaultTask+0x8>

08001810 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001818:	2001      	movs	r0, #1
 800181a:	f002 fdc0 	bl	800439e <osDelay>
 800181e:	e7fb      	b.n	8001818 <StartTask02+0x8>

08001820 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a04      	ldr	r2, [pc, #16]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d101      	bne.n	8001836 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001832:	f000 fadd 	bl	8001df0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40010000 	.word	0x40010000

08001844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001848:	b672      	cpsid	i
}
 800184a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800184c:	e7fe      	b.n	800184c <Error_Handler+0x8>
	...

08001850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	607b      	str	r3, [r7, #4]
 800185a:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <HAL_MspInit+0x54>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185e:	4a11      	ldr	r2, [pc, #68]	; (80018a4 <HAL_MspInit+0x54>)
 8001860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001864:	6453      	str	r3, [r2, #68]	; 0x44
 8001866:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <HAL_MspInit+0x54>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800186e:	607b      	str	r3, [r7, #4]
 8001870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	603b      	str	r3, [r7, #0]
 8001876:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <HAL_MspInit+0x54>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	4a0a      	ldr	r2, [pc, #40]	; (80018a4 <HAL_MspInit+0x54>)
 800187c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001880:	6413      	str	r3, [r2, #64]	; 0x40
 8001882:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <HAL_MspInit+0x54>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188a:	603b      	str	r3, [r7, #0]
 800188c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800188e:	2200      	movs	r2, #0
 8001890:	210f      	movs	r1, #15
 8001892:	f06f 0001 	mvn.w	r0, #1
 8001896:	f000 ffa7 	bl	80027e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40023800 	.word	0x40023800

080018a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08e      	sub	sp, #56	; 0x38
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a45      	ldr	r2, [pc, #276]	; (80019dc <HAL_ADC_MspInit+0x134>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d128      	bne.n	800191c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	623b      	str	r3, [r7, #32]
 80018ce:	4b44      	ldr	r3, [pc, #272]	; (80019e0 <HAL_ADC_MspInit+0x138>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d2:	4a43      	ldr	r2, [pc, #268]	; (80019e0 <HAL_ADC_MspInit+0x138>)
 80018d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d8:	6453      	str	r3, [r2, #68]	; 0x44
 80018da:	4b41      	ldr	r3, [pc, #260]	; (80019e0 <HAL_ADC_MspInit+0x138>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e2:	623b      	str	r3, [r7, #32]
 80018e4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]
 80018ea:	4b3d      	ldr	r3, [pc, #244]	; (80019e0 <HAL_ADC_MspInit+0x138>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	4a3c      	ldr	r2, [pc, #240]	; (80019e0 <HAL_ADC_MspInit+0x138>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6313      	str	r3, [r2, #48]	; 0x30
 80018f6:	4b3a      	ldr	r3, [pc, #232]	; (80019e0 <HAL_ADC_MspInit+0x138>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	61fb      	str	r3, [r7, #28]
 8001900:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001902:	2301      	movs	r3, #1
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001906:	2303      	movs	r3, #3
 8001908:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001912:	4619      	mov	r1, r3
 8001914:	4833      	ldr	r0, [pc, #204]	; (80019e4 <HAL_ADC_MspInit+0x13c>)
 8001916:	f000 ff91 	bl	800283c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800191a:	e05a      	b.n	80019d2 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a31      	ldr	r2, [pc, #196]	; (80019e8 <HAL_ADC_MspInit+0x140>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d128      	bne.n	8001978 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	61bb      	str	r3, [r7, #24]
 800192a:	4b2d      	ldr	r3, [pc, #180]	; (80019e0 <HAL_ADC_MspInit+0x138>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	4a2c      	ldr	r2, [pc, #176]	; (80019e0 <HAL_ADC_MspInit+0x138>)
 8001930:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001934:	6453      	str	r3, [r2, #68]	; 0x44
 8001936:	4b2a      	ldr	r3, [pc, #168]	; (80019e0 <HAL_ADC_MspInit+0x138>)
 8001938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800193e:	61bb      	str	r3, [r7, #24]
 8001940:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
 8001946:	4b26      	ldr	r3, [pc, #152]	; (80019e0 <HAL_ADC_MspInit+0x138>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	4a25      	ldr	r2, [pc, #148]	; (80019e0 <HAL_ADC_MspInit+0x138>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	6313      	str	r3, [r2, #48]	; 0x30
 8001952:	4b23      	ldr	r3, [pc, #140]	; (80019e0 <HAL_ADC_MspInit+0x138>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800195e:	2310      	movs	r3, #16
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001962:	2303      	movs	r3, #3
 8001964:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800196e:	4619      	mov	r1, r3
 8001970:	481c      	ldr	r0, [pc, #112]	; (80019e4 <HAL_ADC_MspInit+0x13c>)
 8001972:	f000 ff63 	bl	800283c <HAL_GPIO_Init>
}
 8001976:	e02c      	b.n	80019d2 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a1b      	ldr	r2, [pc, #108]	; (80019ec <HAL_ADC_MspInit+0x144>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d127      	bne.n	80019d2 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	613b      	str	r3, [r7, #16]
 8001986:	4b16      	ldr	r3, [pc, #88]	; (80019e0 <HAL_ADC_MspInit+0x138>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198a:	4a15      	ldr	r2, [pc, #84]	; (80019e0 <HAL_ADC_MspInit+0x138>)
 800198c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001990:	6453      	str	r3, [r2, #68]	; 0x44
 8001992:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <HAL_ADC_MspInit+0x138>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <HAL_ADC_MspInit+0x138>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	4a0e      	ldr	r2, [pc, #56]	; (80019e0 <HAL_ADC_MspInit+0x138>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6313      	str	r3, [r2, #48]	; 0x30
 80019ae:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <HAL_ADC_MspInit+0x138>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80019ba:	2302      	movs	r3, #2
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019be:	2303      	movs	r3, #3
 80019c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ca:	4619      	mov	r1, r3
 80019cc:	4805      	ldr	r0, [pc, #20]	; (80019e4 <HAL_ADC_MspInit+0x13c>)
 80019ce:	f000 ff35 	bl	800283c <HAL_GPIO_Init>
}
 80019d2:	bf00      	nop
 80019d4:	3738      	adds	r7, #56	; 0x38
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40012000 	.word	0x40012000
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40020000 	.word	0x40020000
 80019e8:	40012100 	.word	0x40012100
 80019ec:	40012200 	.word	0x40012200

080019f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08a      	sub	sp, #40	; 0x28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a19      	ldr	r2, [pc, #100]	; (8001a74 <HAL_UART_MspInit+0x84>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d12b      	bne.n	8001a6a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <HAL_UART_MspInit+0x88>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	4a17      	ldr	r2, [pc, #92]	; (8001a78 <HAL_UART_MspInit+0x88>)
 8001a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a20:	6413      	str	r3, [r2, #64]	; 0x40
 8001a22:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <HAL_UART_MspInit+0x88>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <HAL_UART_MspInit+0x88>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	4a10      	ldr	r2, [pc, #64]	; (8001a78 <HAL_UART_MspInit+0x88>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3e:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <HAL_UART_MspInit+0x88>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a4a:	230c      	movs	r3, #12
 8001a4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a56:	2303      	movs	r3, #3
 8001a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a5a:	2307      	movs	r3, #7
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5e:	f107 0314 	add.w	r3, r7, #20
 8001a62:	4619      	mov	r1, r3
 8001a64:	4805      	ldr	r0, [pc, #20]	; (8001a7c <HAL_UART_MspInit+0x8c>)
 8001a66:	f000 fee9 	bl	800283c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a6a:	bf00      	nop
 8001a6c:	3728      	adds	r7, #40	; 0x28
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40004400 	.word	0x40004400
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40020000 	.word	0x40020000

08001a80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08c      	sub	sp, #48	; 0x30
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001a90:	2300      	movs	r3, #0
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	4b2f      	ldr	r3, [pc, #188]	; (8001b54 <HAL_InitTick+0xd4>)
 8001a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a98:	4a2e      	ldr	r2, [pc, #184]	; (8001b54 <HAL_InitTick+0xd4>)
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa0:	4b2c      	ldr	r3, [pc, #176]	; (8001b54 <HAL_InitTick+0xd4>)
 8001aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001aac:	f107 020c 	add.w	r2, r7, #12
 8001ab0:	f107 0310 	add.w	r3, r7, #16
 8001ab4:	4611      	mov	r1, r2
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f001 fd26 	bl	8003508 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001abc:	f001 fd10 	bl	80034e0 <HAL_RCC_GetPCLK2Freq>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac8:	4a23      	ldr	r2, [pc, #140]	; (8001b58 <HAL_InitTick+0xd8>)
 8001aca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ace:	0c9b      	lsrs	r3, r3, #18
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001ad4:	4b21      	ldr	r3, [pc, #132]	; (8001b5c <HAL_InitTick+0xdc>)
 8001ad6:	4a22      	ldr	r2, [pc, #136]	; (8001b60 <HAL_InitTick+0xe0>)
 8001ad8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001ada:	4b20      	ldr	r3, [pc, #128]	; (8001b5c <HAL_InitTick+0xdc>)
 8001adc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ae0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001ae2:	4a1e      	ldr	r2, [pc, #120]	; (8001b5c <HAL_InitTick+0xdc>)
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001ae8:	4b1c      	ldr	r3, [pc, #112]	; (8001b5c <HAL_InitTick+0xdc>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aee:	4b1b      	ldr	r3, [pc, #108]	; (8001b5c <HAL_InitTick+0xdc>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af4:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <HAL_InitTick+0xdc>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001afa:	4818      	ldr	r0, [pc, #96]	; (8001b5c <HAL_InitTick+0xdc>)
 8001afc:	f001 fd36 	bl	800356c <HAL_TIM_Base_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001b06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d11b      	bne.n	8001b46 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001b0e:	4813      	ldr	r0, [pc, #76]	; (8001b5c <HAL_InitTick+0xdc>)
 8001b10:	f001 fd86 	bl	8003620 <HAL_TIM_Base_Start_IT>
 8001b14:	4603      	mov	r3, r0
 8001b16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001b1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d111      	bne.n	8001b46 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b22:	2019      	movs	r0, #25
 8001b24:	f000 fe7c 	bl	8002820 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b0f      	cmp	r3, #15
 8001b2c:	d808      	bhi.n	8001b40 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	6879      	ldr	r1, [r7, #4]
 8001b32:	2019      	movs	r0, #25
 8001b34:	f000 fe58 	bl	80027e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b38:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <HAL_InitTick+0xe4>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	e002      	b.n	8001b46 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001b46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3730      	adds	r7, #48	; 0x30
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40023800 	.word	0x40023800
 8001b58:	431bde83 	.word	0x431bde83
 8001b5c:	200005e4 	.word	0x200005e4
 8001b60:	40010000 	.word	0x40010000
 8001b64:	20000004 	.word	0x20000004

08001b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b6c:	e7fe      	b.n	8001b6c <NMI_Handler+0x4>

08001b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b72:	e7fe      	b.n	8001b72 <HardFault_Handler+0x4>

08001b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <MemManage_Handler+0x4>

08001b7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b7e:	e7fe      	b.n	8001b7e <BusFault_Handler+0x4>

08001b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <UsageFault_Handler+0x4>

08001b86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b98:	4802      	ldr	r0, [pc, #8]	; (8001ba4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001b9a:	f001 fdb1 	bl	8003700 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	200005e4 	.word	0x200005e4

08001ba8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  return 1;
 8001bac:	2301      	movs	r3, #1
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <_kill>:

int _kill(int pid, int sig)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bc2:	f004 fc0f 	bl	80063e4 <__errno>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2216      	movs	r2, #22
 8001bca:	601a      	str	r2, [r3, #0]
  return -1;
 8001bcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <_exit>:

void _exit (int status)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001be0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff ffe7 	bl	8001bb8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bea:	e7fe      	b.n	8001bea <_exit+0x12>

08001bec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	e00a      	b.n	8001c14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bfe:	f3af 8000 	nop.w
 8001c02:	4601      	mov	r1, r0
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	1c5a      	adds	r2, r3, #1
 8001c08:	60ba      	str	r2, [r7, #8]
 8001c0a:	b2ca      	uxtb	r2, r1
 8001c0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	3301      	adds	r3, #1
 8001c12:	617b      	str	r3, [r7, #20]
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	dbf0      	blt.n	8001bfe <_read+0x12>
  }

  return len;
 8001c1c:	687b      	ldr	r3, [r7, #4]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b086      	sub	sp, #24
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	60f8      	str	r0, [r7, #12]
 8001c2e:	60b9      	str	r1, [r7, #8]
 8001c30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	e009      	b.n	8001c4c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	1c5a      	adds	r2, r3, #1
 8001c3c:	60ba      	str	r2, [r7, #8]
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	617b      	str	r3, [r7, #20]
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	dbf1      	blt.n	8001c38 <_write+0x12>
  }
  return len;
 8001c54:	687b      	ldr	r3, [r7, #4]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3718      	adds	r7, #24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <_close>:

int _close(int file)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
 8001c7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c86:	605a      	str	r2, [r3, #4]
  return 0;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <_isatty>:

int _isatty(int file)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c9e:	2301      	movs	r3, #1
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
	...

08001cc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cd0:	4a14      	ldr	r2, [pc, #80]	; (8001d24 <_sbrk+0x5c>)
 8001cd2:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <_sbrk+0x60>)
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cdc:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <_sbrk+0x64>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d102      	bne.n	8001cea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ce4:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <_sbrk+0x64>)
 8001ce6:	4a12      	ldr	r2, [pc, #72]	; (8001d30 <_sbrk+0x68>)
 8001ce8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cea:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <_sbrk+0x64>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d207      	bcs.n	8001d08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cf8:	f004 fb74 	bl	80063e4 <__errno>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	220c      	movs	r2, #12
 8001d00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d06:	e009      	b.n	8001d1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d08:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <_sbrk+0x64>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d0e:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <_sbrk+0x64>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4413      	add	r3, r2
 8001d16:	4a05      	ldr	r2, [pc, #20]	; (8001d2c <_sbrk+0x64>)
 8001d18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20020000 	.word	0x20020000
 8001d28:	00000400 	.word	0x00000400
 8001d2c:	2000062c 	.word	0x2000062c
 8001d30:	200044d8 	.word	0x200044d8

08001d34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d38:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <SystemInit+0x20>)
 8001d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d3e:	4a05      	ldr	r2, [pc, #20]	; (8001d54 <SystemInit+0x20>)
 8001d40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d90 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d5c:	f7ff ffea 	bl	8001d34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d60:	480c      	ldr	r0, [pc, #48]	; (8001d94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d62:	490d      	ldr	r1, [pc, #52]	; (8001d98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d64:	4a0d      	ldr	r2, [pc, #52]	; (8001d9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d68:	e002      	b.n	8001d70 <LoopCopyDataInit>

08001d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d6e:	3304      	adds	r3, #4

08001d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d74:	d3f9      	bcc.n	8001d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d76:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d78:	4c0a      	ldr	r4, [pc, #40]	; (8001da4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d7c:	e001      	b.n	8001d82 <LoopFillZerobss>

08001d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d80:	3204      	adds	r2, #4

08001d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d84:	d3fb      	bcc.n	8001d7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d86:	f004 fb33 	bl	80063f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d8a:	f7ff faf5 	bl	8001378 <main>
  bx  lr    
 8001d8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d98:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001d9c:	08008614 	.word	0x08008614
  ldr r2, =_sbss
 8001da0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001da4:	200044d4 	.word	0x200044d4

08001da8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001da8:	e7fe      	b.n	8001da8 <ADC_IRQHandler>
	...

08001dac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001db0:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <HAL_Init+0x40>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a0d      	ldr	r2, [pc, #52]	; (8001dec <HAL_Init+0x40>)
 8001db6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <HAL_Init+0x40>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a0a      	ldr	r2, [pc, #40]	; (8001dec <HAL_Init+0x40>)
 8001dc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dc8:	4b08      	ldr	r3, [pc, #32]	; (8001dec <HAL_Init+0x40>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a07      	ldr	r2, [pc, #28]	; (8001dec <HAL_Init+0x40>)
 8001dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dd4:	2003      	movs	r0, #3
 8001dd6:	f000 fcfc 	bl	80027d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dda:	200f      	movs	r0, #15
 8001ddc:	f7ff fe50 	bl	8001a80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001de0:	f7ff fd36 	bl	8001850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40023c00 	.word	0x40023c00

08001df0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <HAL_IncTick+0x20>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <HAL_IncTick+0x24>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4413      	add	r3, r2
 8001e00:	4a04      	ldr	r2, [pc, #16]	; (8001e14 <HAL_IncTick+0x24>)
 8001e02:	6013      	str	r3, [r2, #0]
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	20000008 	.word	0x20000008
 8001e14:	20000630 	.word	0x20000630

08001e18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e1c:	4b03      	ldr	r3, [pc, #12]	; (8001e2c <HAL_GetTick+0x14>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	20000630 	.word	0x20000630

08001e30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e38:	f7ff ffee 	bl	8001e18 <HAL_GetTick>
 8001e3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e48:	d005      	beq.n	8001e56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e4a:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <HAL_Delay+0x44>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4413      	add	r3, r2
 8001e54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e56:	bf00      	nop
 8001e58:	f7ff ffde 	bl	8001e18 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d8f7      	bhi.n	8001e58 <HAL_Delay+0x28>
  {
  }
}
 8001e68:	bf00      	nop
 8001e6a:	bf00      	nop
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000008 	.word	0x20000008

08001e78 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e80:	2300      	movs	r3, #0
 8001e82:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e033      	b.n	8001ef6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d109      	bne.n	8001eaa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff fd06 	bl	80018a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f003 0310 	and.w	r3, r3, #16
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d118      	bne.n	8001ee8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ebe:	f023 0302 	bic.w	r3, r3, #2
 8001ec2:	f043 0202 	orr.w	r2, r3, #2
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 fad8 	bl	8002480 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	f023 0303 	bic.w	r3, r3, #3
 8001ede:	f043 0201 	orr.w	r2, r3, #1
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	641a      	str	r2, [r3, #64]	; 0x40
 8001ee6:	e001      	b.n	8001eec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
	...

08001f00 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d101      	bne.n	8001f1a <HAL_ADC_Start+0x1a>
 8001f16:	2302      	movs	r3, #2
 8001f18:	e0b2      	b.n	8002080 <HAL_ADC_Start+0x180>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d018      	beq.n	8001f62 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0201 	orr.w	r2, r2, #1
 8001f3e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f40:	4b52      	ldr	r3, [pc, #328]	; (800208c <HAL_ADC_Start+0x18c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a52      	ldr	r2, [pc, #328]	; (8002090 <HAL_ADC_Start+0x190>)
 8001f46:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4a:	0c9a      	lsrs	r2, r3, #18
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	4413      	add	r3, r2
 8001f52:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001f54:	e002      	b.n	8001f5c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f9      	bne.n	8001f56 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d17a      	bne.n	8002066 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f78:	f023 0301 	bic.w	r3, r3, #1
 8001f7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d007      	beq.n	8001fa2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f9a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fae:	d106      	bne.n	8001fbe <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb4:	f023 0206 	bic.w	r2, r3, #6
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	645a      	str	r2, [r3, #68]	; 0x44
 8001fbc:	e002      	b.n	8001fc4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fcc:	4b31      	ldr	r3, [pc, #196]	; (8002094 <HAL_ADC_Start+0x194>)
 8001fce:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001fd8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f003 031f 	and.w	r3, r3, #31
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d12a      	bne.n	800203c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a2b      	ldr	r2, [pc, #172]	; (8002098 <HAL_ADC_Start+0x198>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d015      	beq.n	800201c <HAL_ADC_Start+0x11c>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a29      	ldr	r2, [pc, #164]	; (800209c <HAL_ADC_Start+0x19c>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d105      	bne.n	8002006 <HAL_ADC_Start+0x106>
 8001ffa:	4b26      	ldr	r3, [pc, #152]	; (8002094 <HAL_ADC_Start+0x194>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 031f 	and.w	r3, r3, #31
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00a      	beq.n	800201c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a25      	ldr	r2, [pc, #148]	; (80020a0 <HAL_ADC_Start+0x1a0>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d136      	bne.n	800207e <HAL_ADC_Start+0x17e>
 8002010:	4b20      	ldr	r3, [pc, #128]	; (8002094 <HAL_ADC_Start+0x194>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 0310 	and.w	r3, r3, #16
 8002018:	2b00      	cmp	r3, #0
 800201a:	d130      	bne.n	800207e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d129      	bne.n	800207e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002038:	609a      	str	r2, [r3, #8]
 800203a:	e020      	b.n	800207e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a15      	ldr	r2, [pc, #84]	; (8002098 <HAL_ADC_Start+0x198>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d11b      	bne.n	800207e <HAL_ADC_Start+0x17e>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d114      	bne.n	800207e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689a      	ldr	r2, [r3, #8]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	e00b      	b.n	800207e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	f043 0210 	orr.w	r2, r3, #16
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002076:	f043 0201 	orr.w	r2, r3, #1
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	20000000 	.word	0x20000000
 8002090:	431bde83 	.word	0x431bde83
 8002094:	40012300 	.word	0x40012300
 8002098:	40012000 	.word	0x40012000
 800209c:	40012100 	.word	0x40012100
 80020a0:	40012200 	.word	0x40012200

080020a4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d101      	bne.n	80020ba <HAL_ADC_Stop+0x16>
 80020b6:	2302      	movs	r3, #2
 80020b8:	e021      	b.n	80020fe <HAL_ADC_Stop+0x5a>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0201 	bic.w	r2, r2, #1
 80020d0:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d109      	bne.n	80020f4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020e8:	f023 0301 	bic.w	r3, r3, #1
 80020ec:	f043 0201 	orr.w	r2, r3, #1
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b084      	sub	sp, #16
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
 8002112:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002114:	2300      	movs	r3, #0
 8002116:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002126:	d113      	bne.n	8002150 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002136:	d10b      	bne.n	8002150 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	f043 0220 	orr.w	r2, r3, #32
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e063      	b.n	8002218 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002150:	f7ff fe62 	bl	8001e18 <HAL_GetTick>
 8002154:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002156:	e021      	b.n	800219c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800215e:	d01d      	beq.n	800219c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d007      	beq.n	8002176 <HAL_ADC_PollForConversion+0x6c>
 8002166:	f7ff fe57 	bl	8001e18 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	429a      	cmp	r2, r3
 8002174:	d212      	bcs.n	800219c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b02      	cmp	r3, #2
 8002182:	d00b      	beq.n	800219c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002188:	f043 0204 	orr.w	r2, r3, #4
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e03d      	b.n	8002218 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d1d6      	bne.n	8002158 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f06f 0212 	mvn.w	r2, #18
 80021b2:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d123      	bne.n	8002216 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d11f      	bne.n	8002216 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021dc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d006      	beq.n	80021f2 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d111      	bne.n	8002216 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d105      	bne.n	8002216 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	f043 0201 	orr.w	r2, r3, #1
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800222e:	4618      	mov	r0, r3
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
	...

0800223c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002246:	2300      	movs	r3, #0
 8002248:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002250:	2b01      	cmp	r3, #1
 8002252:	d101      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x1c>
 8002254:	2302      	movs	r3, #2
 8002256:	e105      	b.n	8002464 <HAL_ADC_ConfigChannel+0x228>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2b09      	cmp	r3, #9
 8002266:	d925      	bls.n	80022b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68d9      	ldr	r1, [r3, #12]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	b29b      	uxth	r3, r3
 8002274:	461a      	mov	r2, r3
 8002276:	4613      	mov	r3, r2
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	4413      	add	r3, r2
 800227c:	3b1e      	subs	r3, #30
 800227e:	2207      	movs	r2, #7
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43da      	mvns	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	400a      	ands	r2, r1
 800228c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68d9      	ldr	r1, [r3, #12]
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	b29b      	uxth	r3, r3
 800229e:	4618      	mov	r0, r3
 80022a0:	4603      	mov	r3, r0
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	4403      	add	r3, r0
 80022a6:	3b1e      	subs	r3, #30
 80022a8:	409a      	lsls	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	60da      	str	r2, [r3, #12]
 80022b2:	e022      	b.n	80022fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6919      	ldr	r1, [r3, #16]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	b29b      	uxth	r3, r3
 80022c0:	461a      	mov	r2, r3
 80022c2:	4613      	mov	r3, r2
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	4413      	add	r3, r2
 80022c8:	2207      	movs	r2, #7
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43da      	mvns	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	400a      	ands	r2, r1
 80022d6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6919      	ldr	r1, [r3, #16]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	689a      	ldr	r2, [r3, #8]
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	4618      	mov	r0, r3
 80022ea:	4603      	mov	r3, r0
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	4403      	add	r3, r0
 80022f0:	409a      	lsls	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b06      	cmp	r3, #6
 8002300:	d824      	bhi.n	800234c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	3b05      	subs	r3, #5
 8002314:	221f      	movs	r2, #31
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43da      	mvns	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	400a      	ands	r2, r1
 8002322:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	b29b      	uxth	r3, r3
 8002330:	4618      	mov	r0, r3
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	4613      	mov	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	3b05      	subs	r3, #5
 800233e:	fa00 f203 	lsl.w	r2, r0, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	430a      	orrs	r2, r1
 8002348:	635a      	str	r2, [r3, #52]	; 0x34
 800234a:	e04c      	b.n	80023e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b0c      	cmp	r3, #12
 8002352:	d824      	bhi.n	800239e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	3b23      	subs	r3, #35	; 0x23
 8002366:	221f      	movs	r2, #31
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43da      	mvns	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	400a      	ands	r2, r1
 8002374:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	b29b      	uxth	r3, r3
 8002382:	4618      	mov	r0, r3
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	3b23      	subs	r3, #35	; 0x23
 8002390:	fa00 f203 	lsl.w	r2, r0, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	430a      	orrs	r2, r1
 800239a:	631a      	str	r2, [r3, #48]	; 0x30
 800239c:	e023      	b.n	80023e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	4613      	mov	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	3b41      	subs	r3, #65	; 0x41
 80023b0:	221f      	movs	r2, #31
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43da      	mvns	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	400a      	ands	r2, r1
 80023be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	4618      	mov	r0, r3
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	4613      	mov	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4413      	add	r3, r2
 80023d8:	3b41      	subs	r3, #65	; 0x41
 80023da:	fa00 f203 	lsl.w	r2, r0, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023e6:	4b22      	ldr	r3, [pc, #136]	; (8002470 <HAL_ADC_ConfigChannel+0x234>)
 80023e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a21      	ldr	r2, [pc, #132]	; (8002474 <HAL_ADC_ConfigChannel+0x238>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d109      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x1cc>
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2b12      	cmp	r3, #18
 80023fa:	d105      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a19      	ldr	r2, [pc, #100]	; (8002474 <HAL_ADC_ConfigChannel+0x238>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d123      	bne.n	800245a <HAL_ADC_ConfigChannel+0x21e>
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2b10      	cmp	r3, #16
 8002418:	d003      	beq.n	8002422 <HAL_ADC_ConfigChannel+0x1e6>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2b11      	cmp	r3, #17
 8002420:	d11b      	bne.n	800245a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2b10      	cmp	r3, #16
 8002434:	d111      	bne.n	800245a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002436:	4b10      	ldr	r3, [pc, #64]	; (8002478 <HAL_ADC_ConfigChannel+0x23c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a10      	ldr	r2, [pc, #64]	; (800247c <HAL_ADC_ConfigChannel+0x240>)
 800243c:	fba2 2303 	umull	r2, r3, r2, r3
 8002440:	0c9a      	lsrs	r2, r3, #18
 8002442:	4613      	mov	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800244c:	e002      	b.n	8002454 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	3b01      	subs	r3, #1
 8002452:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1f9      	bne.n	800244e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	40012300 	.word	0x40012300
 8002474:	40012000 	.word	0x40012000
 8002478:	20000000 	.word	0x20000000
 800247c:	431bde83 	.word	0x431bde83

08002480 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002488:	4b79      	ldr	r3, [pc, #484]	; (8002670 <ADC_Init+0x1f0>)
 800248a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	431a      	orrs	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6859      	ldr	r1, [r3, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	021a      	lsls	r2, r3, #8
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80024d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6859      	ldr	r1, [r3, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689a      	ldr	r2, [r3, #8]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6899      	ldr	r1, [r3, #8]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68da      	ldr	r2, [r3, #12]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002512:	4a58      	ldr	r2, [pc, #352]	; (8002674 <ADC_Init+0x1f4>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d022      	beq.n	800255e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002526:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6899      	ldr	r1, [r3, #8]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002548:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6899      	ldr	r1, [r3, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	430a      	orrs	r2, r1
 800255a:	609a      	str	r2, [r3, #8]
 800255c:	e00f      	b.n	800257e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800256c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800257c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 0202 	bic.w	r2, r2, #2
 800258c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6899      	ldr	r1, [r3, #8]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	7e1b      	ldrb	r3, [r3, #24]
 8002598:	005a      	lsls	r2, r3, #1
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	430a      	orrs	r2, r1
 80025a0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d01b      	beq.n	80025e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025ba:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80025ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6859      	ldr	r1, [r3, #4]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	3b01      	subs	r3, #1
 80025d8:	035a      	lsls	r2, r3, #13
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	430a      	orrs	r2, r1
 80025e0:	605a      	str	r2, [r3, #4]
 80025e2:	e007      	b.n	80025f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025f2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002602:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	3b01      	subs	r3, #1
 8002610:	051a      	lsls	r2, r3, #20
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	430a      	orrs	r2, r1
 8002618:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002628:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6899      	ldr	r1, [r3, #8]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002636:	025a      	lsls	r2, r3, #9
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689a      	ldr	r2, [r3, #8]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800264e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6899      	ldr	r1, [r3, #8]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	029a      	lsls	r2, r3, #10
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	430a      	orrs	r2, r1
 8002662:	609a      	str	r2, [r3, #8]
}
 8002664:	bf00      	nop
 8002666:	3714      	adds	r7, #20
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	40012300 	.word	0x40012300
 8002674:	0f000001 	.word	0x0f000001

08002678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002688:	4b0c      	ldr	r3, [pc, #48]	; (80026bc <__NVIC_SetPriorityGrouping+0x44>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002694:	4013      	ands	r3, r2
 8002696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026aa:	4a04      	ldr	r2, [pc, #16]	; (80026bc <__NVIC_SetPriorityGrouping+0x44>)
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	60d3      	str	r3, [r2, #12]
}
 80026b0:	bf00      	nop
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	e000ed00 	.word	0xe000ed00

080026c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026c4:	4b04      	ldr	r3, [pc, #16]	; (80026d8 <__NVIC_GetPriorityGrouping+0x18>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	0a1b      	lsrs	r3, r3, #8
 80026ca:	f003 0307 	and.w	r3, r3, #7
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	e000ed00 	.word	0xe000ed00

080026dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	db0b      	blt.n	8002706 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	f003 021f 	and.w	r2, r3, #31
 80026f4:	4907      	ldr	r1, [pc, #28]	; (8002714 <__NVIC_EnableIRQ+0x38>)
 80026f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fa:	095b      	lsrs	r3, r3, #5
 80026fc:	2001      	movs	r0, #1
 80026fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	e000e100 	.word	0xe000e100

08002718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	6039      	str	r1, [r7, #0]
 8002722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002728:	2b00      	cmp	r3, #0
 800272a:	db0a      	blt.n	8002742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	b2da      	uxtb	r2, r3
 8002730:	490c      	ldr	r1, [pc, #48]	; (8002764 <__NVIC_SetPriority+0x4c>)
 8002732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002736:	0112      	lsls	r2, r2, #4
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	440b      	add	r3, r1
 800273c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002740:	e00a      	b.n	8002758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	b2da      	uxtb	r2, r3
 8002746:	4908      	ldr	r1, [pc, #32]	; (8002768 <__NVIC_SetPriority+0x50>)
 8002748:	79fb      	ldrb	r3, [r7, #7]
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	3b04      	subs	r3, #4
 8002750:	0112      	lsls	r2, r2, #4
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	440b      	add	r3, r1
 8002756:	761a      	strb	r2, [r3, #24]
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	e000e100 	.word	0xe000e100
 8002768:	e000ed00 	.word	0xe000ed00

0800276c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800276c:	b480      	push	{r7}
 800276e:	b089      	sub	sp, #36	; 0x24
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	f1c3 0307 	rsb	r3, r3, #7
 8002786:	2b04      	cmp	r3, #4
 8002788:	bf28      	it	cs
 800278a:	2304      	movcs	r3, #4
 800278c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	3304      	adds	r3, #4
 8002792:	2b06      	cmp	r3, #6
 8002794:	d902      	bls.n	800279c <NVIC_EncodePriority+0x30>
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	3b03      	subs	r3, #3
 800279a:	e000      	b.n	800279e <NVIC_EncodePriority+0x32>
 800279c:	2300      	movs	r3, #0
 800279e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	43da      	mvns	r2, r3
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	401a      	ands	r2, r3
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	fa01 f303 	lsl.w	r3, r1, r3
 80027be:	43d9      	mvns	r1, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c4:	4313      	orrs	r3, r2
         );
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3724      	adds	r7, #36	; 0x24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b082      	sub	sp, #8
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7ff ff4c 	bl	8002678 <__NVIC_SetPriorityGrouping>
}
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
 80027f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027fa:	f7ff ff61 	bl	80026c0 <__NVIC_GetPriorityGrouping>
 80027fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	68b9      	ldr	r1, [r7, #8]
 8002804:	6978      	ldr	r0, [r7, #20]
 8002806:	f7ff ffb1 	bl	800276c <NVIC_EncodePriority>
 800280a:	4602      	mov	r2, r0
 800280c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002810:	4611      	mov	r1, r2
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff ff80 	bl	8002718 <__NVIC_SetPriority>
}
 8002818:	bf00      	nop
 800281a:	3718      	adds	r7, #24
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800282a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff ff54 	bl	80026dc <__NVIC_EnableIRQ>
}
 8002834:	bf00      	nop
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800283c:	b480      	push	{r7}
 800283e:	b089      	sub	sp, #36	; 0x24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002846:	2300      	movs	r3, #0
 8002848:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800284a:	2300      	movs	r3, #0
 800284c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800284e:	2300      	movs	r3, #0
 8002850:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002852:	2300      	movs	r3, #0
 8002854:	61fb      	str	r3, [r7, #28]
 8002856:	e16b      	b.n	8002b30 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002858:	2201      	movs	r2, #1
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	4013      	ands	r3, r2
 800286a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	429a      	cmp	r2, r3
 8002872:	f040 815a 	bne.w	8002b2a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	2b01      	cmp	r3, #1
 8002880:	d005      	beq.n	800288e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800288a:	2b02      	cmp	r3, #2
 800288c:	d130      	bne.n	80028f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	2203      	movs	r2, #3
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43db      	mvns	r3, r3
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4013      	ands	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	68da      	ldr	r2, [r3, #12]
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028c4:	2201      	movs	r2, #1
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	091b      	lsrs	r3, r3, #4
 80028da:	f003 0201 	and.w	r2, r3, #1
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f003 0303 	and.w	r3, r3, #3
 80028f8:	2b03      	cmp	r3, #3
 80028fa:	d017      	beq.n	800292c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	2203      	movs	r2, #3
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4013      	ands	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4313      	orrs	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 0303 	and.w	r3, r3, #3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d123      	bne.n	8002980 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	08da      	lsrs	r2, r3, #3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3208      	adds	r2, #8
 8002940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002944:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	220f      	movs	r2, #15
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	43db      	mvns	r3, r3
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4013      	ands	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	691a      	ldr	r2, [r3, #16]
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4313      	orrs	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	08da      	lsrs	r2, r3, #3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	3208      	adds	r2, #8
 800297a:	69b9      	ldr	r1, [r7, #24]
 800297c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	2203      	movs	r2, #3
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	43db      	mvns	r3, r3
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	4013      	ands	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f003 0203 	and.w	r2, r3, #3
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 80b4 	beq.w	8002b2a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	4b60      	ldr	r3, [pc, #384]	; (8002b48 <HAL_GPIO_Init+0x30c>)
 80029c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ca:	4a5f      	ldr	r2, [pc, #380]	; (8002b48 <HAL_GPIO_Init+0x30c>)
 80029cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029d0:	6453      	str	r3, [r2, #68]	; 0x44
 80029d2:	4b5d      	ldr	r3, [pc, #372]	; (8002b48 <HAL_GPIO_Init+0x30c>)
 80029d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029de:	4a5b      	ldr	r2, [pc, #364]	; (8002b4c <HAL_GPIO_Init+0x310>)
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	089b      	lsrs	r3, r3, #2
 80029e4:	3302      	adds	r3, #2
 80029e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	220f      	movs	r2, #15
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	43db      	mvns	r3, r3
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	4013      	ands	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a52      	ldr	r2, [pc, #328]	; (8002b50 <HAL_GPIO_Init+0x314>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d02b      	beq.n	8002a62 <HAL_GPIO_Init+0x226>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a51      	ldr	r2, [pc, #324]	; (8002b54 <HAL_GPIO_Init+0x318>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d025      	beq.n	8002a5e <HAL_GPIO_Init+0x222>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a50      	ldr	r2, [pc, #320]	; (8002b58 <HAL_GPIO_Init+0x31c>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d01f      	beq.n	8002a5a <HAL_GPIO_Init+0x21e>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a4f      	ldr	r2, [pc, #316]	; (8002b5c <HAL_GPIO_Init+0x320>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d019      	beq.n	8002a56 <HAL_GPIO_Init+0x21a>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a4e      	ldr	r2, [pc, #312]	; (8002b60 <HAL_GPIO_Init+0x324>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d013      	beq.n	8002a52 <HAL_GPIO_Init+0x216>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a4d      	ldr	r2, [pc, #308]	; (8002b64 <HAL_GPIO_Init+0x328>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d00d      	beq.n	8002a4e <HAL_GPIO_Init+0x212>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a4c      	ldr	r2, [pc, #304]	; (8002b68 <HAL_GPIO_Init+0x32c>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d007      	beq.n	8002a4a <HAL_GPIO_Init+0x20e>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a4b      	ldr	r2, [pc, #300]	; (8002b6c <HAL_GPIO_Init+0x330>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d101      	bne.n	8002a46 <HAL_GPIO_Init+0x20a>
 8002a42:	2307      	movs	r3, #7
 8002a44:	e00e      	b.n	8002a64 <HAL_GPIO_Init+0x228>
 8002a46:	2308      	movs	r3, #8
 8002a48:	e00c      	b.n	8002a64 <HAL_GPIO_Init+0x228>
 8002a4a:	2306      	movs	r3, #6
 8002a4c:	e00a      	b.n	8002a64 <HAL_GPIO_Init+0x228>
 8002a4e:	2305      	movs	r3, #5
 8002a50:	e008      	b.n	8002a64 <HAL_GPIO_Init+0x228>
 8002a52:	2304      	movs	r3, #4
 8002a54:	e006      	b.n	8002a64 <HAL_GPIO_Init+0x228>
 8002a56:	2303      	movs	r3, #3
 8002a58:	e004      	b.n	8002a64 <HAL_GPIO_Init+0x228>
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	e002      	b.n	8002a64 <HAL_GPIO_Init+0x228>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <HAL_GPIO_Init+0x228>
 8002a62:	2300      	movs	r3, #0
 8002a64:	69fa      	ldr	r2, [r7, #28]
 8002a66:	f002 0203 	and.w	r2, r2, #3
 8002a6a:	0092      	lsls	r2, r2, #2
 8002a6c:	4093      	lsls	r3, r2
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a74:	4935      	ldr	r1, [pc, #212]	; (8002b4c <HAL_GPIO_Init+0x310>)
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	089b      	lsrs	r3, r3, #2
 8002a7a:	3302      	adds	r3, #2
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a82:	4b3b      	ldr	r3, [pc, #236]	; (8002b70 <HAL_GPIO_Init+0x334>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aa6:	4a32      	ldr	r2, [pc, #200]	; (8002b70 <HAL_GPIO_Init+0x334>)
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002aac:	4b30      	ldr	r3, [pc, #192]	; (8002b70 <HAL_GPIO_Init+0x334>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d003      	beq.n	8002ad0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ad0:	4a27      	ldr	r2, [pc, #156]	; (8002b70 <HAL_GPIO_Init+0x334>)
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ad6:	4b26      	ldr	r3, [pc, #152]	; (8002b70 <HAL_GPIO_Init+0x334>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002afa:	4a1d      	ldr	r2, [pc, #116]	; (8002b70 <HAL_GPIO_Init+0x334>)
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b00:	4b1b      	ldr	r3, [pc, #108]	; (8002b70 <HAL_GPIO_Init+0x334>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b24:	4a12      	ldr	r2, [pc, #72]	; (8002b70 <HAL_GPIO_Init+0x334>)
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	61fb      	str	r3, [r7, #28]
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	2b0f      	cmp	r3, #15
 8002b34:	f67f ae90 	bls.w	8002858 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b38:	bf00      	nop
 8002b3a:	bf00      	nop
 8002b3c:	3724      	adds	r7, #36	; 0x24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	40013800 	.word	0x40013800
 8002b50:	40020000 	.word	0x40020000
 8002b54:	40020400 	.word	0x40020400
 8002b58:	40020800 	.word	0x40020800
 8002b5c:	40020c00 	.word	0x40020c00
 8002b60:	40021000 	.word	0x40021000
 8002b64:	40021400 	.word	0x40021400
 8002b68:	40021800 	.word	0x40021800
 8002b6c:	40021c00 	.word	0x40021c00
 8002b70:	40013c00 	.word	0x40013c00

08002b74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	691a      	ldr	r2, [r3, #16]
 8002b84:	887b      	ldrh	r3, [r7, #2]
 8002b86:	4013      	ands	r3, r2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d002      	beq.n	8002b92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	73fb      	strb	r3, [r7, #15]
 8002b90:	e001      	b.n	8002b96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b92:	2300      	movs	r3, #0
 8002b94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3714      	adds	r7, #20
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	460b      	mov	r3, r1
 8002bae:	807b      	strh	r3, [r7, #2]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bb4:	787b      	ldrb	r3, [r7, #1]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bba:	887a      	ldrh	r2, [r7, #2]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bc0:	e003      	b.n	8002bca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bc2:	887b      	ldrh	r3, [r7, #2]
 8002bc4:	041a      	lsls	r2, r3, #16
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	619a      	str	r2, [r3, #24]
}
 8002bca:	bf00      	nop
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
	...

08002bd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e267      	b.n	80030ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d075      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bf6:	4b88      	ldr	r3, [pc, #544]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 030c 	and.w	r3, r3, #12
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d00c      	beq.n	8002c1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c02:	4b85      	ldr	r3, [pc, #532]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c0a:	2b08      	cmp	r3, #8
 8002c0c:	d112      	bne.n	8002c34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c0e:	4b82      	ldr	r3, [pc, #520]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c1a:	d10b      	bne.n	8002c34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c1c:	4b7e      	ldr	r3, [pc, #504]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d05b      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x108>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d157      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e242      	b.n	80030ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c3c:	d106      	bne.n	8002c4c <HAL_RCC_OscConfig+0x74>
 8002c3e:	4b76      	ldr	r3, [pc, #472]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a75      	ldr	r2, [pc, #468]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c48:	6013      	str	r3, [r2, #0]
 8002c4a:	e01d      	b.n	8002c88 <HAL_RCC_OscConfig+0xb0>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c54:	d10c      	bne.n	8002c70 <HAL_RCC_OscConfig+0x98>
 8002c56:	4b70      	ldr	r3, [pc, #448]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a6f      	ldr	r2, [pc, #444]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	4b6d      	ldr	r3, [pc, #436]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a6c      	ldr	r2, [pc, #432]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	e00b      	b.n	8002c88 <HAL_RCC_OscConfig+0xb0>
 8002c70:	4b69      	ldr	r3, [pc, #420]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a68      	ldr	r2, [pc, #416]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c7a:	6013      	str	r3, [r2, #0]
 8002c7c:	4b66      	ldr	r3, [pc, #408]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a65      	ldr	r2, [pc, #404]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002c82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d013      	beq.n	8002cb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c90:	f7ff f8c2 	bl	8001e18 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c98:	f7ff f8be 	bl	8001e18 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b64      	cmp	r3, #100	; 0x64
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e207      	b.n	80030ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002caa:	4b5b      	ldr	r3, [pc, #364]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0f0      	beq.n	8002c98 <HAL_RCC_OscConfig+0xc0>
 8002cb6:	e014      	b.n	8002ce2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb8:	f7ff f8ae 	bl	8001e18 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cc0:	f7ff f8aa 	bl	8001e18 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b64      	cmp	r3, #100	; 0x64
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e1f3      	b.n	80030ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cd2:	4b51      	ldr	r3, [pc, #324]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f0      	bne.n	8002cc0 <HAL_RCC_OscConfig+0xe8>
 8002cde:	e000      	b.n	8002ce2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d063      	beq.n	8002db6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cee:	4b4a      	ldr	r3, [pc, #296]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 030c 	and.w	r3, r3, #12
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00b      	beq.n	8002d12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cfa:	4b47      	ldr	r3, [pc, #284]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d02:	2b08      	cmp	r3, #8
 8002d04:	d11c      	bne.n	8002d40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d06:	4b44      	ldr	r3, [pc, #272]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d116      	bne.n	8002d40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d12:	4b41      	ldr	r3, [pc, #260]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d005      	beq.n	8002d2a <HAL_RCC_OscConfig+0x152>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d001      	beq.n	8002d2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e1c7      	b.n	80030ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d2a:	4b3b      	ldr	r3, [pc, #236]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	4937      	ldr	r1, [pc, #220]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d3e:	e03a      	b.n	8002db6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d020      	beq.n	8002d8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d48:	4b34      	ldr	r3, [pc, #208]	; (8002e1c <HAL_RCC_OscConfig+0x244>)
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4e:	f7ff f863 	bl	8001e18 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d56:	f7ff f85f 	bl	8001e18 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e1a8      	b.n	80030ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d68:	4b2b      	ldr	r3, [pc, #172]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0f0      	beq.n	8002d56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d74:	4b28      	ldr	r3, [pc, #160]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	4925      	ldr	r1, [pc, #148]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	600b      	str	r3, [r1, #0]
 8002d88:	e015      	b.n	8002db6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d8a:	4b24      	ldr	r3, [pc, #144]	; (8002e1c <HAL_RCC_OscConfig+0x244>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d90:	f7ff f842 	bl	8001e18 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d98:	f7ff f83e 	bl	8001e18 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e187      	b.n	80030ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002daa:	4b1b      	ldr	r3, [pc, #108]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1f0      	bne.n	8002d98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0308 	and.w	r3, r3, #8
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d036      	beq.n	8002e30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d016      	beq.n	8002df8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dca:	4b15      	ldr	r3, [pc, #84]	; (8002e20 <HAL_RCC_OscConfig+0x248>)
 8002dcc:	2201      	movs	r2, #1
 8002dce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd0:	f7ff f822 	bl	8001e18 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dd8:	f7ff f81e 	bl	8001e18 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e167      	b.n	80030ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dea:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0f0      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x200>
 8002df6:	e01b      	b.n	8002e30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002df8:	4b09      	ldr	r3, [pc, #36]	; (8002e20 <HAL_RCC_OscConfig+0x248>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dfe:	f7ff f80b 	bl	8001e18 <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e04:	e00e      	b.n	8002e24 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e06:	f7ff f807 	bl	8001e18 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d907      	bls.n	8002e24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e150      	b.n	80030ba <HAL_RCC_OscConfig+0x4e2>
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	42470000 	.word	0x42470000
 8002e20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e24:	4b88      	ldr	r3, [pc, #544]	; (8003048 <HAL_RCC_OscConfig+0x470>)
 8002e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1ea      	bne.n	8002e06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 8097 	beq.w	8002f6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e42:	4b81      	ldr	r3, [pc, #516]	; (8003048 <HAL_RCC_OscConfig+0x470>)
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10f      	bne.n	8002e6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60bb      	str	r3, [r7, #8]
 8002e52:	4b7d      	ldr	r3, [pc, #500]	; (8003048 <HAL_RCC_OscConfig+0x470>)
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	4a7c      	ldr	r2, [pc, #496]	; (8003048 <HAL_RCC_OscConfig+0x470>)
 8002e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e5e:	4b7a      	ldr	r3, [pc, #488]	; (8003048 <HAL_RCC_OscConfig+0x470>)
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e66:	60bb      	str	r3, [r7, #8]
 8002e68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e6e:	4b77      	ldr	r3, [pc, #476]	; (800304c <HAL_RCC_OscConfig+0x474>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d118      	bne.n	8002eac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e7a:	4b74      	ldr	r3, [pc, #464]	; (800304c <HAL_RCC_OscConfig+0x474>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a73      	ldr	r2, [pc, #460]	; (800304c <HAL_RCC_OscConfig+0x474>)
 8002e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e86:	f7fe ffc7 	bl	8001e18 <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e8e:	f7fe ffc3 	bl	8001e18 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e10c      	b.n	80030ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea0:	4b6a      	ldr	r3, [pc, #424]	; (800304c <HAL_RCC_OscConfig+0x474>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0f0      	beq.n	8002e8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d106      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x2ea>
 8002eb4:	4b64      	ldr	r3, [pc, #400]	; (8003048 <HAL_RCC_OscConfig+0x470>)
 8002eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb8:	4a63      	ldr	r2, [pc, #396]	; (8003048 <HAL_RCC_OscConfig+0x470>)
 8002eba:	f043 0301 	orr.w	r3, r3, #1
 8002ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec0:	e01c      	b.n	8002efc <HAL_RCC_OscConfig+0x324>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	2b05      	cmp	r3, #5
 8002ec8:	d10c      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x30c>
 8002eca:	4b5f      	ldr	r3, [pc, #380]	; (8003048 <HAL_RCC_OscConfig+0x470>)
 8002ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ece:	4a5e      	ldr	r2, [pc, #376]	; (8003048 <HAL_RCC_OscConfig+0x470>)
 8002ed0:	f043 0304 	orr.w	r3, r3, #4
 8002ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed6:	4b5c      	ldr	r3, [pc, #368]	; (8003048 <HAL_RCC_OscConfig+0x470>)
 8002ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eda:	4a5b      	ldr	r2, [pc, #364]	; (8003048 <HAL_RCC_OscConfig+0x470>)
 8002edc:	f043 0301 	orr.w	r3, r3, #1
 8002ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee2:	e00b      	b.n	8002efc <HAL_RCC_OscConfig+0x324>
 8002ee4:	4b58      	ldr	r3, [pc, #352]	; (8003048 <HAL_RCC_OscConfig+0x470>)
 8002ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee8:	4a57      	ldr	r2, [pc, #348]	; (8003048 <HAL_RCC_OscConfig+0x470>)
 8002eea:	f023 0301 	bic.w	r3, r3, #1
 8002eee:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef0:	4b55      	ldr	r3, [pc, #340]	; (8003048 <HAL_RCC_OscConfig+0x470>)
 8002ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef4:	4a54      	ldr	r2, [pc, #336]	; (8003048 <HAL_RCC_OscConfig+0x470>)
 8002ef6:	f023 0304 	bic.w	r3, r3, #4
 8002efa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d015      	beq.n	8002f30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f04:	f7fe ff88 	bl	8001e18 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f0a:	e00a      	b.n	8002f22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f0c:	f7fe ff84 	bl	8001e18 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e0cb      	b.n	80030ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f22:	4b49      	ldr	r3, [pc, #292]	; (8003048 <HAL_RCC_OscConfig+0x470>)
 8002f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0ee      	beq.n	8002f0c <HAL_RCC_OscConfig+0x334>
 8002f2e:	e014      	b.n	8002f5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f30:	f7fe ff72 	bl	8001e18 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f36:	e00a      	b.n	8002f4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f38:	f7fe ff6e 	bl	8001e18 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e0b5      	b.n	80030ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f4e:	4b3e      	ldr	r3, [pc, #248]	; (8003048 <HAL_RCC_OscConfig+0x470>)
 8002f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1ee      	bne.n	8002f38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f5a:	7dfb      	ldrb	r3, [r7, #23]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d105      	bne.n	8002f6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f60:	4b39      	ldr	r3, [pc, #228]	; (8003048 <HAL_RCC_OscConfig+0x470>)
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	4a38      	ldr	r2, [pc, #224]	; (8003048 <HAL_RCC_OscConfig+0x470>)
 8002f66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 80a1 	beq.w	80030b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f76:	4b34      	ldr	r3, [pc, #208]	; (8003048 <HAL_RCC_OscConfig+0x470>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 030c 	and.w	r3, r3, #12
 8002f7e:	2b08      	cmp	r3, #8
 8002f80:	d05c      	beq.n	800303c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d141      	bne.n	800300e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f8a:	4b31      	ldr	r3, [pc, #196]	; (8003050 <HAL_RCC_OscConfig+0x478>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f90:	f7fe ff42 	bl	8001e18 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f98:	f7fe ff3e 	bl	8001e18 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e087      	b.n	80030ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002faa:	4b27      	ldr	r3, [pc, #156]	; (8003048 <HAL_RCC_OscConfig+0x470>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1f0      	bne.n	8002f98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	69da      	ldr	r2, [r3, #28]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc4:	019b      	lsls	r3, r3, #6
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fcc:	085b      	lsrs	r3, r3, #1
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	041b      	lsls	r3, r3, #16
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd8:	061b      	lsls	r3, r3, #24
 8002fda:	491b      	ldr	r1, [pc, #108]	; (8003048 <HAL_RCC_OscConfig+0x470>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fe0:	4b1b      	ldr	r3, [pc, #108]	; (8003050 <HAL_RCC_OscConfig+0x478>)
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe6:	f7fe ff17 	bl	8001e18 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fee:	f7fe ff13 	bl	8001e18 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e05c      	b.n	80030ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003000:	4b11      	ldr	r3, [pc, #68]	; (8003048 <HAL_RCC_OscConfig+0x470>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0f0      	beq.n	8002fee <HAL_RCC_OscConfig+0x416>
 800300c:	e054      	b.n	80030b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800300e:	4b10      	ldr	r3, [pc, #64]	; (8003050 <HAL_RCC_OscConfig+0x478>)
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003014:	f7fe ff00 	bl	8001e18 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800301c:	f7fe fefc 	bl	8001e18 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e045      	b.n	80030ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800302e:	4b06      	ldr	r3, [pc, #24]	; (8003048 <HAL_RCC_OscConfig+0x470>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f0      	bne.n	800301c <HAL_RCC_OscConfig+0x444>
 800303a:	e03d      	b.n	80030b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d107      	bne.n	8003054 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e038      	b.n	80030ba <HAL_RCC_OscConfig+0x4e2>
 8003048:	40023800 	.word	0x40023800
 800304c:	40007000 	.word	0x40007000
 8003050:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003054:	4b1b      	ldr	r3, [pc, #108]	; (80030c4 <HAL_RCC_OscConfig+0x4ec>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d028      	beq.n	80030b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800306c:	429a      	cmp	r2, r3
 800306e:	d121      	bne.n	80030b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800307a:	429a      	cmp	r2, r3
 800307c:	d11a      	bne.n	80030b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003084:	4013      	ands	r3, r2
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800308a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800308c:	4293      	cmp	r3, r2
 800308e:	d111      	bne.n	80030b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309a:	085b      	lsrs	r3, r3, #1
 800309c:	3b01      	subs	r3, #1
 800309e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d107      	bne.n	80030b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d001      	beq.n	80030b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e000      	b.n	80030ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3718      	adds	r7, #24
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40023800 	.word	0x40023800

080030c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e0cc      	b.n	8003276 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030dc:	4b68      	ldr	r3, [pc, #416]	; (8003280 <HAL_RCC_ClockConfig+0x1b8>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d90c      	bls.n	8003104 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ea:	4b65      	ldr	r3, [pc, #404]	; (8003280 <HAL_RCC_ClockConfig+0x1b8>)
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f2:	4b63      	ldr	r3, [pc, #396]	; (8003280 <HAL_RCC_ClockConfig+0x1b8>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d001      	beq.n	8003104 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e0b8      	b.n	8003276 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d020      	beq.n	8003152 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	d005      	beq.n	8003128 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800311c:	4b59      	ldr	r3, [pc, #356]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	4a58      	ldr	r2, [pc, #352]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 8003122:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003126:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0308 	and.w	r3, r3, #8
 8003130:	2b00      	cmp	r3, #0
 8003132:	d005      	beq.n	8003140 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003134:	4b53      	ldr	r3, [pc, #332]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	4a52      	ldr	r2, [pc, #328]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 800313a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800313e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003140:	4b50      	ldr	r3, [pc, #320]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	494d      	ldr	r1, [pc, #308]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 800314e:	4313      	orrs	r3, r2
 8003150:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d044      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d107      	bne.n	8003176 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003166:	4b47      	ldr	r3, [pc, #284]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d119      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e07f      	b.n	8003276 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2b02      	cmp	r3, #2
 800317c:	d003      	beq.n	8003186 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003182:	2b03      	cmp	r3, #3
 8003184:	d107      	bne.n	8003196 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003186:	4b3f      	ldr	r3, [pc, #252]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d109      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e06f      	b.n	8003276 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003196:	4b3b      	ldr	r3, [pc, #236]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e067      	b.n	8003276 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031a6:	4b37      	ldr	r3, [pc, #220]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f023 0203 	bic.w	r2, r3, #3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	4934      	ldr	r1, [pc, #208]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031b8:	f7fe fe2e 	bl	8001e18 <HAL_GetTick>
 80031bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031be:	e00a      	b.n	80031d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031c0:	f7fe fe2a 	bl	8001e18 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e04f      	b.n	8003276 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031d6:	4b2b      	ldr	r3, [pc, #172]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 020c 	and.w	r2, r3, #12
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d1eb      	bne.n	80031c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031e8:	4b25      	ldr	r3, [pc, #148]	; (8003280 <HAL_RCC_ClockConfig+0x1b8>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d20c      	bcs.n	8003210 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f6:	4b22      	ldr	r3, [pc, #136]	; (8003280 <HAL_RCC_ClockConfig+0x1b8>)
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fe:	4b20      	ldr	r3, [pc, #128]	; (8003280 <HAL_RCC_ClockConfig+0x1b8>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	429a      	cmp	r2, r3
 800320a:	d001      	beq.n	8003210 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e032      	b.n	8003276 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b00      	cmp	r3, #0
 800321a:	d008      	beq.n	800322e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800321c:	4b19      	ldr	r3, [pc, #100]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	4916      	ldr	r1, [pc, #88]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 800322a:	4313      	orrs	r3, r2
 800322c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d009      	beq.n	800324e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800323a:	4b12      	ldr	r3, [pc, #72]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	490e      	ldr	r1, [pc, #56]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 800324a:	4313      	orrs	r3, r2
 800324c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800324e:	f000 f821 	bl	8003294 <HAL_RCC_GetSysClockFreq>
 8003252:	4602      	mov	r2, r0
 8003254:	4b0b      	ldr	r3, [pc, #44]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	091b      	lsrs	r3, r3, #4
 800325a:	f003 030f 	and.w	r3, r3, #15
 800325e:	490a      	ldr	r1, [pc, #40]	; (8003288 <HAL_RCC_ClockConfig+0x1c0>)
 8003260:	5ccb      	ldrb	r3, [r1, r3]
 8003262:	fa22 f303 	lsr.w	r3, r2, r3
 8003266:	4a09      	ldr	r2, [pc, #36]	; (800328c <HAL_RCC_ClockConfig+0x1c4>)
 8003268:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800326a:	4b09      	ldr	r3, [pc, #36]	; (8003290 <HAL_RCC_ClockConfig+0x1c8>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f7fe fc06 	bl	8001a80 <HAL_InitTick>

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40023c00 	.word	0x40023c00
 8003284:	40023800 	.word	0x40023800
 8003288:	08008278 	.word	0x08008278
 800328c:	20000000 	.word	0x20000000
 8003290:	20000004 	.word	0x20000004

08003294 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003294:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003298:	b094      	sub	sp, #80	; 0x50
 800329a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800329c:	2300      	movs	r3, #0
 800329e:	647b      	str	r3, [r7, #68]	; 0x44
 80032a0:	2300      	movs	r3, #0
 80032a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032a4:	2300      	movs	r3, #0
 80032a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80032a8:	2300      	movs	r3, #0
 80032aa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032ac:	4b79      	ldr	r3, [pc, #484]	; (8003494 <HAL_RCC_GetSysClockFreq+0x200>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f003 030c 	and.w	r3, r3, #12
 80032b4:	2b08      	cmp	r3, #8
 80032b6:	d00d      	beq.n	80032d4 <HAL_RCC_GetSysClockFreq+0x40>
 80032b8:	2b08      	cmp	r3, #8
 80032ba:	f200 80e1 	bhi.w	8003480 <HAL_RCC_GetSysClockFreq+0x1ec>
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d002      	beq.n	80032c8 <HAL_RCC_GetSysClockFreq+0x34>
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	d003      	beq.n	80032ce <HAL_RCC_GetSysClockFreq+0x3a>
 80032c6:	e0db      	b.n	8003480 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032c8:	4b73      	ldr	r3, [pc, #460]	; (8003498 <HAL_RCC_GetSysClockFreq+0x204>)
 80032ca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80032cc:	e0db      	b.n	8003486 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032ce:	4b73      	ldr	r3, [pc, #460]	; (800349c <HAL_RCC_GetSysClockFreq+0x208>)
 80032d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032d2:	e0d8      	b.n	8003486 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032d4:	4b6f      	ldr	r3, [pc, #444]	; (8003494 <HAL_RCC_GetSysClockFreq+0x200>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032dc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032de:	4b6d      	ldr	r3, [pc, #436]	; (8003494 <HAL_RCC_GetSysClockFreq+0x200>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d063      	beq.n	80033b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ea:	4b6a      	ldr	r3, [pc, #424]	; (8003494 <HAL_RCC_GetSysClockFreq+0x200>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	099b      	lsrs	r3, r3, #6
 80032f0:	2200      	movs	r2, #0
 80032f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80032f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80032f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032fc:	633b      	str	r3, [r7, #48]	; 0x30
 80032fe:	2300      	movs	r3, #0
 8003300:	637b      	str	r3, [r7, #52]	; 0x34
 8003302:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003306:	4622      	mov	r2, r4
 8003308:	462b      	mov	r3, r5
 800330a:	f04f 0000 	mov.w	r0, #0
 800330e:	f04f 0100 	mov.w	r1, #0
 8003312:	0159      	lsls	r1, r3, #5
 8003314:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003318:	0150      	lsls	r0, r2, #5
 800331a:	4602      	mov	r2, r0
 800331c:	460b      	mov	r3, r1
 800331e:	4621      	mov	r1, r4
 8003320:	1a51      	subs	r1, r2, r1
 8003322:	6139      	str	r1, [r7, #16]
 8003324:	4629      	mov	r1, r5
 8003326:	eb63 0301 	sbc.w	r3, r3, r1
 800332a:	617b      	str	r3, [r7, #20]
 800332c:	f04f 0200 	mov.w	r2, #0
 8003330:	f04f 0300 	mov.w	r3, #0
 8003334:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003338:	4659      	mov	r1, fp
 800333a:	018b      	lsls	r3, r1, #6
 800333c:	4651      	mov	r1, sl
 800333e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003342:	4651      	mov	r1, sl
 8003344:	018a      	lsls	r2, r1, #6
 8003346:	4651      	mov	r1, sl
 8003348:	ebb2 0801 	subs.w	r8, r2, r1
 800334c:	4659      	mov	r1, fp
 800334e:	eb63 0901 	sbc.w	r9, r3, r1
 8003352:	f04f 0200 	mov.w	r2, #0
 8003356:	f04f 0300 	mov.w	r3, #0
 800335a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800335e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003362:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003366:	4690      	mov	r8, r2
 8003368:	4699      	mov	r9, r3
 800336a:	4623      	mov	r3, r4
 800336c:	eb18 0303 	adds.w	r3, r8, r3
 8003370:	60bb      	str	r3, [r7, #8]
 8003372:	462b      	mov	r3, r5
 8003374:	eb49 0303 	adc.w	r3, r9, r3
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	f04f 0300 	mov.w	r3, #0
 8003382:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003386:	4629      	mov	r1, r5
 8003388:	024b      	lsls	r3, r1, #9
 800338a:	4621      	mov	r1, r4
 800338c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003390:	4621      	mov	r1, r4
 8003392:	024a      	lsls	r2, r1, #9
 8003394:	4610      	mov	r0, r2
 8003396:	4619      	mov	r1, r3
 8003398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800339a:	2200      	movs	r2, #0
 800339c:	62bb      	str	r3, [r7, #40]	; 0x28
 800339e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033a4:	f7fd fc00 	bl	8000ba8 <__aeabi_uldivmod>
 80033a8:	4602      	mov	r2, r0
 80033aa:	460b      	mov	r3, r1
 80033ac:	4613      	mov	r3, r2
 80033ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033b0:	e058      	b.n	8003464 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033b2:	4b38      	ldr	r3, [pc, #224]	; (8003494 <HAL_RCC_GetSysClockFreq+0x200>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	099b      	lsrs	r3, r3, #6
 80033b8:	2200      	movs	r2, #0
 80033ba:	4618      	mov	r0, r3
 80033bc:	4611      	mov	r1, r2
 80033be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033c2:	623b      	str	r3, [r7, #32]
 80033c4:	2300      	movs	r3, #0
 80033c6:	627b      	str	r3, [r7, #36]	; 0x24
 80033c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033cc:	4642      	mov	r2, r8
 80033ce:	464b      	mov	r3, r9
 80033d0:	f04f 0000 	mov.w	r0, #0
 80033d4:	f04f 0100 	mov.w	r1, #0
 80033d8:	0159      	lsls	r1, r3, #5
 80033da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033de:	0150      	lsls	r0, r2, #5
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4641      	mov	r1, r8
 80033e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80033ea:	4649      	mov	r1, r9
 80033ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80033f0:	f04f 0200 	mov.w	r2, #0
 80033f4:	f04f 0300 	mov.w	r3, #0
 80033f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003400:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003404:	ebb2 040a 	subs.w	r4, r2, sl
 8003408:	eb63 050b 	sbc.w	r5, r3, fp
 800340c:	f04f 0200 	mov.w	r2, #0
 8003410:	f04f 0300 	mov.w	r3, #0
 8003414:	00eb      	lsls	r3, r5, #3
 8003416:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800341a:	00e2      	lsls	r2, r4, #3
 800341c:	4614      	mov	r4, r2
 800341e:	461d      	mov	r5, r3
 8003420:	4643      	mov	r3, r8
 8003422:	18e3      	adds	r3, r4, r3
 8003424:	603b      	str	r3, [r7, #0]
 8003426:	464b      	mov	r3, r9
 8003428:	eb45 0303 	adc.w	r3, r5, r3
 800342c:	607b      	str	r3, [r7, #4]
 800342e:	f04f 0200 	mov.w	r2, #0
 8003432:	f04f 0300 	mov.w	r3, #0
 8003436:	e9d7 4500 	ldrd	r4, r5, [r7]
 800343a:	4629      	mov	r1, r5
 800343c:	028b      	lsls	r3, r1, #10
 800343e:	4621      	mov	r1, r4
 8003440:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003444:	4621      	mov	r1, r4
 8003446:	028a      	lsls	r2, r1, #10
 8003448:	4610      	mov	r0, r2
 800344a:	4619      	mov	r1, r3
 800344c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800344e:	2200      	movs	r2, #0
 8003450:	61bb      	str	r3, [r7, #24]
 8003452:	61fa      	str	r2, [r7, #28]
 8003454:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003458:	f7fd fba6 	bl	8000ba8 <__aeabi_uldivmod>
 800345c:	4602      	mov	r2, r0
 800345e:	460b      	mov	r3, r1
 8003460:	4613      	mov	r3, r2
 8003462:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003464:	4b0b      	ldr	r3, [pc, #44]	; (8003494 <HAL_RCC_GetSysClockFreq+0x200>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	0c1b      	lsrs	r3, r3, #16
 800346a:	f003 0303 	and.w	r3, r3, #3
 800346e:	3301      	adds	r3, #1
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003474:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003478:	fbb2 f3f3 	udiv	r3, r2, r3
 800347c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800347e:	e002      	b.n	8003486 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003480:	4b05      	ldr	r3, [pc, #20]	; (8003498 <HAL_RCC_GetSysClockFreq+0x204>)
 8003482:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003484:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003488:	4618      	mov	r0, r3
 800348a:	3750      	adds	r7, #80	; 0x50
 800348c:	46bd      	mov	sp, r7
 800348e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003492:	bf00      	nop
 8003494:	40023800 	.word	0x40023800
 8003498:	00f42400 	.word	0x00f42400
 800349c:	007a1200 	.word	0x007a1200

080034a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034a4:	4b03      	ldr	r3, [pc, #12]	; (80034b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80034a6:	681b      	ldr	r3, [r3, #0]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	20000000 	.word	0x20000000

080034b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034bc:	f7ff fff0 	bl	80034a0 <HAL_RCC_GetHCLKFreq>
 80034c0:	4602      	mov	r2, r0
 80034c2:	4b05      	ldr	r3, [pc, #20]	; (80034d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	0a9b      	lsrs	r3, r3, #10
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	4903      	ldr	r1, [pc, #12]	; (80034dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80034ce:	5ccb      	ldrb	r3, [r1, r3]
 80034d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	40023800 	.word	0x40023800
 80034dc:	08008288 	.word	0x08008288

080034e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034e4:	f7ff ffdc 	bl	80034a0 <HAL_RCC_GetHCLKFreq>
 80034e8:	4602      	mov	r2, r0
 80034ea:	4b05      	ldr	r3, [pc, #20]	; (8003500 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	0b5b      	lsrs	r3, r3, #13
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	4903      	ldr	r1, [pc, #12]	; (8003504 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034f6:	5ccb      	ldrb	r3, [r1, r3]
 80034f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40023800 	.word	0x40023800
 8003504:	08008288 	.word	0x08008288

08003508 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	220f      	movs	r2, #15
 8003516:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003518:	4b12      	ldr	r3, [pc, #72]	; (8003564 <HAL_RCC_GetClockConfig+0x5c>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f003 0203 	and.w	r2, r3, #3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003524:	4b0f      	ldr	r3, [pc, #60]	; (8003564 <HAL_RCC_GetClockConfig+0x5c>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003530:	4b0c      	ldr	r3, [pc, #48]	; (8003564 <HAL_RCC_GetClockConfig+0x5c>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800353c:	4b09      	ldr	r3, [pc, #36]	; (8003564 <HAL_RCC_GetClockConfig+0x5c>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	08db      	lsrs	r3, r3, #3
 8003542:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800354a:	4b07      	ldr	r3, [pc, #28]	; (8003568 <HAL_RCC_GetClockConfig+0x60>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0207 	and.w	r2, r3, #7
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	601a      	str	r2, [r3, #0]
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	40023800 	.word	0x40023800
 8003568:	40023c00 	.word	0x40023c00

0800356c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e041      	b.n	8003602 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d106      	bne.n	8003598 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 f839 	bl	800360a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2202      	movs	r2, #2
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3304      	adds	r3, #4
 80035a8:	4619      	mov	r1, r3
 80035aa:	4610      	mov	r0, r2
 80035ac:	f000 f9c0 	bl	8003930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800360a:	b480      	push	{r7}
 800360c:	b083      	sub	sp, #12
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
	...

08003620 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b01      	cmp	r3, #1
 8003632:	d001      	beq.n	8003638 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e04e      	b.n	80036d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2202      	movs	r2, #2
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68da      	ldr	r2, [r3, #12]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0201 	orr.w	r2, r2, #1
 800364e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a23      	ldr	r2, [pc, #140]	; (80036e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d022      	beq.n	80036a0 <HAL_TIM_Base_Start_IT+0x80>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003662:	d01d      	beq.n	80036a0 <HAL_TIM_Base_Start_IT+0x80>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a1f      	ldr	r2, [pc, #124]	; (80036e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d018      	beq.n	80036a0 <HAL_TIM_Base_Start_IT+0x80>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a1e      	ldr	r2, [pc, #120]	; (80036ec <HAL_TIM_Base_Start_IT+0xcc>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d013      	beq.n	80036a0 <HAL_TIM_Base_Start_IT+0x80>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a1c      	ldr	r2, [pc, #112]	; (80036f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d00e      	beq.n	80036a0 <HAL_TIM_Base_Start_IT+0x80>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a1b      	ldr	r2, [pc, #108]	; (80036f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d009      	beq.n	80036a0 <HAL_TIM_Base_Start_IT+0x80>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a19      	ldr	r2, [pc, #100]	; (80036f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d004      	beq.n	80036a0 <HAL_TIM_Base_Start_IT+0x80>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a18      	ldr	r2, [pc, #96]	; (80036fc <HAL_TIM_Base_Start_IT+0xdc>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d111      	bne.n	80036c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 0307 	and.w	r3, r3, #7
 80036aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2b06      	cmp	r3, #6
 80036b0:	d010      	beq.n	80036d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f042 0201 	orr.w	r2, r2, #1
 80036c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036c2:	e007      	b.n	80036d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f042 0201 	orr.w	r2, r2, #1
 80036d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	40010000 	.word	0x40010000
 80036e8:	40000400 	.word	0x40000400
 80036ec:	40000800 	.word	0x40000800
 80036f0:	40000c00 	.word	0x40000c00
 80036f4:	40010400 	.word	0x40010400
 80036f8:	40014000 	.word	0x40014000
 80036fc:	40001800 	.word	0x40001800

08003700 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d020      	beq.n	8003764 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d01b      	beq.n	8003764 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f06f 0202 	mvn.w	r2, #2
 8003734:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f8d2 	bl	80038f4 <HAL_TIM_IC_CaptureCallback>
 8003750:	e005      	b.n	800375e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f8c4 	bl	80038e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f8d5 	bl	8003908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f003 0304 	and.w	r3, r3, #4
 800376a:	2b00      	cmp	r3, #0
 800376c:	d020      	beq.n	80037b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b00      	cmp	r3, #0
 8003776:	d01b      	beq.n	80037b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f06f 0204 	mvn.w	r2, #4
 8003780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2202      	movs	r2, #2
 8003786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f8ac 	bl	80038f4 <HAL_TIM_IC_CaptureCallback>
 800379c:	e005      	b.n	80037aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f89e 	bl	80038e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f8af 	bl	8003908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d020      	beq.n	80037fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f003 0308 	and.w	r3, r3, #8
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d01b      	beq.n	80037fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f06f 0208 	mvn.w	r2, #8
 80037cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2204      	movs	r2, #4
 80037d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f886 	bl	80038f4 <HAL_TIM_IC_CaptureCallback>
 80037e8:	e005      	b.n	80037f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f878 	bl	80038e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 f889 	bl	8003908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	f003 0310 	and.w	r3, r3, #16
 8003802:	2b00      	cmp	r3, #0
 8003804:	d020      	beq.n	8003848 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f003 0310 	and.w	r3, r3, #16
 800380c:	2b00      	cmp	r3, #0
 800380e:	d01b      	beq.n	8003848 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f06f 0210 	mvn.w	r2, #16
 8003818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2208      	movs	r2, #8
 800381e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f860 	bl	80038f4 <HAL_TIM_IC_CaptureCallback>
 8003834:	e005      	b.n	8003842 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f852 	bl	80038e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f863 	bl	8003908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00c      	beq.n	800386c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b00      	cmp	r3, #0
 800385a:	d007      	beq.n	800386c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f06f 0201 	mvn.w	r2, #1
 8003864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7fd ffda 	bl	8001820 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00c      	beq.n	8003890 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800387c:	2b00      	cmp	r3, #0
 800387e:	d007      	beq.n	8003890 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f906 	bl	8003a9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00c      	beq.n	80038b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d007      	beq.n	80038b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f834 	bl	800391c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	f003 0320 	and.w	r3, r3, #32
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00c      	beq.n	80038d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f003 0320 	and.w	r3, r3, #32
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d007      	beq.n	80038d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f06f 0220 	mvn.w	r2, #32
 80038d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f8d8 	bl	8003a88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038d8:	bf00      	nop
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a46      	ldr	r2, [pc, #280]	; (8003a5c <TIM_Base_SetConfig+0x12c>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d013      	beq.n	8003970 <TIM_Base_SetConfig+0x40>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800394e:	d00f      	beq.n	8003970 <TIM_Base_SetConfig+0x40>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a43      	ldr	r2, [pc, #268]	; (8003a60 <TIM_Base_SetConfig+0x130>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d00b      	beq.n	8003970 <TIM_Base_SetConfig+0x40>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a42      	ldr	r2, [pc, #264]	; (8003a64 <TIM_Base_SetConfig+0x134>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d007      	beq.n	8003970 <TIM_Base_SetConfig+0x40>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a41      	ldr	r2, [pc, #260]	; (8003a68 <TIM_Base_SetConfig+0x138>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d003      	beq.n	8003970 <TIM_Base_SetConfig+0x40>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a40      	ldr	r2, [pc, #256]	; (8003a6c <TIM_Base_SetConfig+0x13c>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d108      	bne.n	8003982 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003976:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	4313      	orrs	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a35      	ldr	r2, [pc, #212]	; (8003a5c <TIM_Base_SetConfig+0x12c>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d02b      	beq.n	80039e2 <TIM_Base_SetConfig+0xb2>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003990:	d027      	beq.n	80039e2 <TIM_Base_SetConfig+0xb2>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a32      	ldr	r2, [pc, #200]	; (8003a60 <TIM_Base_SetConfig+0x130>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d023      	beq.n	80039e2 <TIM_Base_SetConfig+0xb2>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a31      	ldr	r2, [pc, #196]	; (8003a64 <TIM_Base_SetConfig+0x134>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d01f      	beq.n	80039e2 <TIM_Base_SetConfig+0xb2>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a30      	ldr	r2, [pc, #192]	; (8003a68 <TIM_Base_SetConfig+0x138>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d01b      	beq.n	80039e2 <TIM_Base_SetConfig+0xb2>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a2f      	ldr	r2, [pc, #188]	; (8003a6c <TIM_Base_SetConfig+0x13c>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d017      	beq.n	80039e2 <TIM_Base_SetConfig+0xb2>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a2e      	ldr	r2, [pc, #184]	; (8003a70 <TIM_Base_SetConfig+0x140>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d013      	beq.n	80039e2 <TIM_Base_SetConfig+0xb2>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a2d      	ldr	r2, [pc, #180]	; (8003a74 <TIM_Base_SetConfig+0x144>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d00f      	beq.n	80039e2 <TIM_Base_SetConfig+0xb2>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a2c      	ldr	r2, [pc, #176]	; (8003a78 <TIM_Base_SetConfig+0x148>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d00b      	beq.n	80039e2 <TIM_Base_SetConfig+0xb2>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a2b      	ldr	r2, [pc, #172]	; (8003a7c <TIM_Base_SetConfig+0x14c>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d007      	beq.n	80039e2 <TIM_Base_SetConfig+0xb2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a2a      	ldr	r2, [pc, #168]	; (8003a80 <TIM_Base_SetConfig+0x150>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d003      	beq.n	80039e2 <TIM_Base_SetConfig+0xb2>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a29      	ldr	r2, [pc, #164]	; (8003a84 <TIM_Base_SetConfig+0x154>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d108      	bne.n	80039f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	689a      	ldr	r2, [r3, #8]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a10      	ldr	r2, [pc, #64]	; (8003a5c <TIM_Base_SetConfig+0x12c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d003      	beq.n	8003a28 <TIM_Base_SetConfig+0xf8>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a12      	ldr	r2, [pc, #72]	; (8003a6c <TIM_Base_SetConfig+0x13c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d103      	bne.n	8003a30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	691a      	ldr	r2, [r3, #16]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d105      	bne.n	8003a4e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	f023 0201 	bic.w	r2, r3, #1
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	611a      	str	r2, [r3, #16]
  }
}
 8003a4e:	bf00      	nop
 8003a50:	3714      	adds	r7, #20
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	40010000 	.word	0x40010000
 8003a60:	40000400 	.word	0x40000400
 8003a64:	40000800 	.word	0x40000800
 8003a68:	40000c00 	.word	0x40000c00
 8003a6c:	40010400 	.word	0x40010400
 8003a70:	40014000 	.word	0x40014000
 8003a74:	40014400 	.word	0x40014400
 8003a78:	40014800 	.word	0x40014800
 8003a7c:	40001800 	.word	0x40001800
 8003a80:	40001c00 	.word	0x40001c00
 8003a84:	40002000 	.word	0x40002000

08003a88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e042      	b.n	8003b48 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d106      	bne.n	8003adc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7fd ff8a 	bl	80019f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2224      	movs	r2, #36	; 0x24
 8003ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68da      	ldr	r2, [r3, #12]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003af2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 f973 	bl	8003de0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	691a      	ldr	r2, [r3, #16]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	695a      	ldr	r2, [r3, #20]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68da      	ldr	r2, [r3, #12]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2220      	movs	r2, #32
 8003b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3708      	adds	r7, #8
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b08a      	sub	sp, #40	; 0x28
 8003b54:	af02      	add	r7, sp, #8
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	603b      	str	r3, [r7, #0]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b20      	cmp	r3, #32
 8003b6e:	d175      	bne.n	8003c5c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d002      	beq.n	8003b7c <HAL_UART_Transmit+0x2c>
 8003b76:	88fb      	ldrh	r3, [r7, #6]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e06e      	b.n	8003c5e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2221      	movs	r2, #33	; 0x21
 8003b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b8e:	f7fe f943 	bl	8001e18 <HAL_GetTick>
 8003b92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	88fa      	ldrh	r2, [r7, #6]
 8003b98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	88fa      	ldrh	r2, [r7, #6]
 8003b9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ba8:	d108      	bne.n	8003bbc <HAL_UART_Transmit+0x6c>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d104      	bne.n	8003bbc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	61bb      	str	r3, [r7, #24]
 8003bba:	e003      	b.n	8003bc4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003bc4:	e02e      	b.n	8003c24 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	2180      	movs	r1, #128	; 0x80
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f000 f848 	bl	8003c66 <UART_WaitOnFlagUntilTimeout>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d005      	beq.n	8003be8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2220      	movs	r2, #32
 8003be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e03a      	b.n	8003c5e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10b      	bne.n	8003c06 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	881b      	ldrh	r3, [r3, #0]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bfc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	3302      	adds	r3, #2
 8003c02:	61bb      	str	r3, [r7, #24]
 8003c04:	e007      	b.n	8003c16 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	781a      	ldrb	r2, [r3, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	3301      	adds	r3, #1
 8003c14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1cb      	bne.n	8003bc6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	2200      	movs	r2, #0
 8003c36:	2140      	movs	r1, #64	; 0x40
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 f814 	bl	8003c66 <UART_WaitOnFlagUntilTimeout>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d005      	beq.n	8003c50 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2220      	movs	r2, #32
 8003c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e006      	b.n	8003c5e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2220      	movs	r2, #32
 8003c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	e000      	b.n	8003c5e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003c5c:	2302      	movs	r3, #2
  }
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3720      	adds	r7, #32
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b086      	sub	sp, #24
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	60f8      	str	r0, [r7, #12]
 8003c6e:	60b9      	str	r1, [r7, #8]
 8003c70:	603b      	str	r3, [r7, #0]
 8003c72:	4613      	mov	r3, r2
 8003c74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c76:	e03b      	b.n	8003cf0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c78:	6a3b      	ldr	r3, [r7, #32]
 8003c7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c7e:	d037      	beq.n	8003cf0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c80:	f7fe f8ca 	bl	8001e18 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	6a3a      	ldr	r2, [r7, #32]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d302      	bcc.n	8003c96 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e03a      	b.n	8003d10 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d023      	beq.n	8003cf0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	2b80      	cmp	r3, #128	; 0x80
 8003cac:	d020      	beq.n	8003cf0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	2b40      	cmp	r3, #64	; 0x40
 8003cb2:	d01d      	beq.n	8003cf0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0308 	and.w	r3, r3, #8
 8003cbe:	2b08      	cmp	r3, #8
 8003cc0:	d116      	bne.n	8003cf0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	617b      	str	r3, [r7, #20]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	617b      	str	r3, [r7, #20]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	617b      	str	r3, [r7, #20]
 8003cd6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f000 f81d 	bl	8003d18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2208      	movs	r2, #8
 8003ce2:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e00f      	b.n	8003d10 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	bf0c      	ite	eq
 8003d00:	2301      	moveq	r3, #1
 8003d02:	2300      	movne	r3, #0
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	461a      	mov	r2, r3
 8003d08:	79fb      	ldrb	r3, [r7, #7]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d0b4      	beq.n	8003c78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3718      	adds	r7, #24
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b095      	sub	sp, #84	; 0x54
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	330c      	adds	r3, #12
 8003d26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d2a:	e853 3f00 	ldrex	r3, [r3]
 8003d2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	330c      	adds	r3, #12
 8003d3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d40:	643a      	str	r2, [r7, #64]	; 0x40
 8003d42:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d48:	e841 2300 	strex	r3, r2, [r1]
 8003d4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1e5      	bne.n	8003d20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	3314      	adds	r3, #20
 8003d5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5c:	6a3b      	ldr	r3, [r7, #32]
 8003d5e:	e853 3f00 	ldrex	r3, [r3]
 8003d62:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	f023 0301 	bic.w	r3, r3, #1
 8003d6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	3314      	adds	r3, #20
 8003d72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d7c:	e841 2300 	strex	r3, r2, [r1]
 8003d80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1e5      	bne.n	8003d54 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d119      	bne.n	8003dc4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	330c      	adds	r3, #12
 8003d96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	e853 3f00 	ldrex	r3, [r3]
 8003d9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	f023 0310 	bic.w	r3, r3, #16
 8003da6:	647b      	str	r3, [r7, #68]	; 0x44
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	330c      	adds	r3, #12
 8003dae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003db0:	61ba      	str	r2, [r7, #24]
 8003db2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db4:	6979      	ldr	r1, [r7, #20]
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	e841 2300 	strex	r3, r2, [r1]
 8003dbc:	613b      	str	r3, [r7, #16]
   return(result);
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1e5      	bne.n	8003d90 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003dd2:	bf00      	nop
 8003dd4:	3754      	adds	r7, #84	; 0x54
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
	...

08003de0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003de0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003de4:	b0c0      	sub	sp, #256	; 0x100
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dfc:	68d9      	ldr	r1, [r3, #12]
 8003dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	ea40 0301 	orr.w	r3, r0, r1
 8003e08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e0e:	689a      	ldr	r2, [r3, #8]
 8003e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	431a      	orrs	r2, r3
 8003e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003e38:	f021 010c 	bic.w	r1, r1, #12
 8003e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e46:	430b      	orrs	r3, r1
 8003e48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e5a:	6999      	ldr	r1, [r3, #24]
 8003e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	ea40 0301 	orr.w	r3, r0, r1
 8003e66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	4b8f      	ldr	r3, [pc, #572]	; (80040ac <UART_SetConfig+0x2cc>)
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d005      	beq.n	8003e80 <UART_SetConfig+0xa0>
 8003e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	4b8d      	ldr	r3, [pc, #564]	; (80040b0 <UART_SetConfig+0x2d0>)
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d104      	bne.n	8003e8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e80:	f7ff fb2e 	bl	80034e0 <HAL_RCC_GetPCLK2Freq>
 8003e84:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003e88:	e003      	b.n	8003e92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e8a:	f7ff fb15 	bl	80034b8 <HAL_RCC_GetPCLK1Freq>
 8003e8e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e96:	69db      	ldr	r3, [r3, #28]
 8003e98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e9c:	f040 810c 	bne.w	80040b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ea0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003eaa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003eae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003eb2:	4622      	mov	r2, r4
 8003eb4:	462b      	mov	r3, r5
 8003eb6:	1891      	adds	r1, r2, r2
 8003eb8:	65b9      	str	r1, [r7, #88]	; 0x58
 8003eba:	415b      	adcs	r3, r3
 8003ebc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ebe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003ec2:	4621      	mov	r1, r4
 8003ec4:	eb12 0801 	adds.w	r8, r2, r1
 8003ec8:	4629      	mov	r1, r5
 8003eca:	eb43 0901 	adc.w	r9, r3, r1
 8003ece:	f04f 0200 	mov.w	r2, #0
 8003ed2:	f04f 0300 	mov.w	r3, #0
 8003ed6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003eda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ede:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ee2:	4690      	mov	r8, r2
 8003ee4:	4699      	mov	r9, r3
 8003ee6:	4623      	mov	r3, r4
 8003ee8:	eb18 0303 	adds.w	r3, r8, r3
 8003eec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ef0:	462b      	mov	r3, r5
 8003ef2:	eb49 0303 	adc.w	r3, r9, r3
 8003ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f06:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003f0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003f0e:	460b      	mov	r3, r1
 8003f10:	18db      	adds	r3, r3, r3
 8003f12:	653b      	str	r3, [r7, #80]	; 0x50
 8003f14:	4613      	mov	r3, r2
 8003f16:	eb42 0303 	adc.w	r3, r2, r3
 8003f1a:	657b      	str	r3, [r7, #84]	; 0x54
 8003f1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003f20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003f24:	f7fc fe40 	bl	8000ba8 <__aeabi_uldivmod>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	4b61      	ldr	r3, [pc, #388]	; (80040b4 <UART_SetConfig+0x2d4>)
 8003f2e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f32:	095b      	lsrs	r3, r3, #5
 8003f34:	011c      	lsls	r4, r3, #4
 8003f36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f40:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003f44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003f48:	4642      	mov	r2, r8
 8003f4a:	464b      	mov	r3, r9
 8003f4c:	1891      	adds	r1, r2, r2
 8003f4e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003f50:	415b      	adcs	r3, r3
 8003f52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003f58:	4641      	mov	r1, r8
 8003f5a:	eb12 0a01 	adds.w	sl, r2, r1
 8003f5e:	4649      	mov	r1, r9
 8003f60:	eb43 0b01 	adc.w	fp, r3, r1
 8003f64:	f04f 0200 	mov.w	r2, #0
 8003f68:	f04f 0300 	mov.w	r3, #0
 8003f6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f78:	4692      	mov	sl, r2
 8003f7a:	469b      	mov	fp, r3
 8003f7c:	4643      	mov	r3, r8
 8003f7e:	eb1a 0303 	adds.w	r3, sl, r3
 8003f82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f86:	464b      	mov	r3, r9
 8003f88:	eb4b 0303 	adc.w	r3, fp, r3
 8003f8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f9c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003fa0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	18db      	adds	r3, r3, r3
 8003fa8:	643b      	str	r3, [r7, #64]	; 0x40
 8003faa:	4613      	mov	r3, r2
 8003fac:	eb42 0303 	adc.w	r3, r2, r3
 8003fb0:	647b      	str	r3, [r7, #68]	; 0x44
 8003fb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003fb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003fba:	f7fc fdf5 	bl	8000ba8 <__aeabi_uldivmod>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	4611      	mov	r1, r2
 8003fc4:	4b3b      	ldr	r3, [pc, #236]	; (80040b4 <UART_SetConfig+0x2d4>)
 8003fc6:	fba3 2301 	umull	r2, r3, r3, r1
 8003fca:	095b      	lsrs	r3, r3, #5
 8003fcc:	2264      	movs	r2, #100	; 0x64
 8003fce:	fb02 f303 	mul.w	r3, r2, r3
 8003fd2:	1acb      	subs	r3, r1, r3
 8003fd4:	00db      	lsls	r3, r3, #3
 8003fd6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003fda:	4b36      	ldr	r3, [pc, #216]	; (80040b4 <UART_SetConfig+0x2d4>)
 8003fdc:	fba3 2302 	umull	r2, r3, r3, r2
 8003fe0:	095b      	lsrs	r3, r3, #5
 8003fe2:	005b      	lsls	r3, r3, #1
 8003fe4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003fe8:	441c      	add	r4, r3
 8003fea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ff4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003ff8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003ffc:	4642      	mov	r2, r8
 8003ffe:	464b      	mov	r3, r9
 8004000:	1891      	adds	r1, r2, r2
 8004002:	63b9      	str	r1, [r7, #56]	; 0x38
 8004004:	415b      	adcs	r3, r3
 8004006:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004008:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800400c:	4641      	mov	r1, r8
 800400e:	1851      	adds	r1, r2, r1
 8004010:	6339      	str	r1, [r7, #48]	; 0x30
 8004012:	4649      	mov	r1, r9
 8004014:	414b      	adcs	r3, r1
 8004016:	637b      	str	r3, [r7, #52]	; 0x34
 8004018:	f04f 0200 	mov.w	r2, #0
 800401c:	f04f 0300 	mov.w	r3, #0
 8004020:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004024:	4659      	mov	r1, fp
 8004026:	00cb      	lsls	r3, r1, #3
 8004028:	4651      	mov	r1, sl
 800402a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800402e:	4651      	mov	r1, sl
 8004030:	00ca      	lsls	r2, r1, #3
 8004032:	4610      	mov	r0, r2
 8004034:	4619      	mov	r1, r3
 8004036:	4603      	mov	r3, r0
 8004038:	4642      	mov	r2, r8
 800403a:	189b      	adds	r3, r3, r2
 800403c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004040:	464b      	mov	r3, r9
 8004042:	460a      	mov	r2, r1
 8004044:	eb42 0303 	adc.w	r3, r2, r3
 8004048:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800404c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004058:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800405c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004060:	460b      	mov	r3, r1
 8004062:	18db      	adds	r3, r3, r3
 8004064:	62bb      	str	r3, [r7, #40]	; 0x28
 8004066:	4613      	mov	r3, r2
 8004068:	eb42 0303 	adc.w	r3, r2, r3
 800406c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800406e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004072:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004076:	f7fc fd97 	bl	8000ba8 <__aeabi_uldivmod>
 800407a:	4602      	mov	r2, r0
 800407c:	460b      	mov	r3, r1
 800407e:	4b0d      	ldr	r3, [pc, #52]	; (80040b4 <UART_SetConfig+0x2d4>)
 8004080:	fba3 1302 	umull	r1, r3, r3, r2
 8004084:	095b      	lsrs	r3, r3, #5
 8004086:	2164      	movs	r1, #100	; 0x64
 8004088:	fb01 f303 	mul.w	r3, r1, r3
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	3332      	adds	r3, #50	; 0x32
 8004092:	4a08      	ldr	r2, [pc, #32]	; (80040b4 <UART_SetConfig+0x2d4>)
 8004094:	fba2 2303 	umull	r2, r3, r2, r3
 8004098:	095b      	lsrs	r3, r3, #5
 800409a:	f003 0207 	and.w	r2, r3, #7
 800409e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4422      	add	r2, r4
 80040a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040a8:	e106      	b.n	80042b8 <UART_SetConfig+0x4d8>
 80040aa:	bf00      	nop
 80040ac:	40011000 	.word	0x40011000
 80040b0:	40011400 	.word	0x40011400
 80040b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040bc:	2200      	movs	r2, #0
 80040be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80040c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80040c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80040ca:	4642      	mov	r2, r8
 80040cc:	464b      	mov	r3, r9
 80040ce:	1891      	adds	r1, r2, r2
 80040d0:	6239      	str	r1, [r7, #32]
 80040d2:	415b      	adcs	r3, r3
 80040d4:	627b      	str	r3, [r7, #36]	; 0x24
 80040d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040da:	4641      	mov	r1, r8
 80040dc:	1854      	adds	r4, r2, r1
 80040de:	4649      	mov	r1, r9
 80040e0:	eb43 0501 	adc.w	r5, r3, r1
 80040e4:	f04f 0200 	mov.w	r2, #0
 80040e8:	f04f 0300 	mov.w	r3, #0
 80040ec:	00eb      	lsls	r3, r5, #3
 80040ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040f2:	00e2      	lsls	r2, r4, #3
 80040f4:	4614      	mov	r4, r2
 80040f6:	461d      	mov	r5, r3
 80040f8:	4643      	mov	r3, r8
 80040fa:	18e3      	adds	r3, r4, r3
 80040fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004100:	464b      	mov	r3, r9
 8004102:	eb45 0303 	adc.w	r3, r5, r3
 8004106:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800410a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004116:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800411a:	f04f 0200 	mov.w	r2, #0
 800411e:	f04f 0300 	mov.w	r3, #0
 8004122:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004126:	4629      	mov	r1, r5
 8004128:	008b      	lsls	r3, r1, #2
 800412a:	4621      	mov	r1, r4
 800412c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004130:	4621      	mov	r1, r4
 8004132:	008a      	lsls	r2, r1, #2
 8004134:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004138:	f7fc fd36 	bl	8000ba8 <__aeabi_uldivmod>
 800413c:	4602      	mov	r2, r0
 800413e:	460b      	mov	r3, r1
 8004140:	4b60      	ldr	r3, [pc, #384]	; (80042c4 <UART_SetConfig+0x4e4>)
 8004142:	fba3 2302 	umull	r2, r3, r3, r2
 8004146:	095b      	lsrs	r3, r3, #5
 8004148:	011c      	lsls	r4, r3, #4
 800414a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800414e:	2200      	movs	r2, #0
 8004150:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004154:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004158:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800415c:	4642      	mov	r2, r8
 800415e:	464b      	mov	r3, r9
 8004160:	1891      	adds	r1, r2, r2
 8004162:	61b9      	str	r1, [r7, #24]
 8004164:	415b      	adcs	r3, r3
 8004166:	61fb      	str	r3, [r7, #28]
 8004168:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800416c:	4641      	mov	r1, r8
 800416e:	1851      	adds	r1, r2, r1
 8004170:	6139      	str	r1, [r7, #16]
 8004172:	4649      	mov	r1, r9
 8004174:	414b      	adcs	r3, r1
 8004176:	617b      	str	r3, [r7, #20]
 8004178:	f04f 0200 	mov.w	r2, #0
 800417c:	f04f 0300 	mov.w	r3, #0
 8004180:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004184:	4659      	mov	r1, fp
 8004186:	00cb      	lsls	r3, r1, #3
 8004188:	4651      	mov	r1, sl
 800418a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800418e:	4651      	mov	r1, sl
 8004190:	00ca      	lsls	r2, r1, #3
 8004192:	4610      	mov	r0, r2
 8004194:	4619      	mov	r1, r3
 8004196:	4603      	mov	r3, r0
 8004198:	4642      	mov	r2, r8
 800419a:	189b      	adds	r3, r3, r2
 800419c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041a0:	464b      	mov	r3, r9
 80041a2:	460a      	mov	r2, r1
 80041a4:	eb42 0303 	adc.w	r3, r2, r3
 80041a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80041ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80041b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80041b8:	f04f 0200 	mov.w	r2, #0
 80041bc:	f04f 0300 	mov.w	r3, #0
 80041c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80041c4:	4649      	mov	r1, r9
 80041c6:	008b      	lsls	r3, r1, #2
 80041c8:	4641      	mov	r1, r8
 80041ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041ce:	4641      	mov	r1, r8
 80041d0:	008a      	lsls	r2, r1, #2
 80041d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80041d6:	f7fc fce7 	bl	8000ba8 <__aeabi_uldivmod>
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	4611      	mov	r1, r2
 80041e0:	4b38      	ldr	r3, [pc, #224]	; (80042c4 <UART_SetConfig+0x4e4>)
 80041e2:	fba3 2301 	umull	r2, r3, r3, r1
 80041e6:	095b      	lsrs	r3, r3, #5
 80041e8:	2264      	movs	r2, #100	; 0x64
 80041ea:	fb02 f303 	mul.w	r3, r2, r3
 80041ee:	1acb      	subs	r3, r1, r3
 80041f0:	011b      	lsls	r3, r3, #4
 80041f2:	3332      	adds	r3, #50	; 0x32
 80041f4:	4a33      	ldr	r2, [pc, #204]	; (80042c4 <UART_SetConfig+0x4e4>)
 80041f6:	fba2 2303 	umull	r2, r3, r2, r3
 80041fa:	095b      	lsrs	r3, r3, #5
 80041fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004200:	441c      	add	r4, r3
 8004202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004206:	2200      	movs	r2, #0
 8004208:	673b      	str	r3, [r7, #112]	; 0x70
 800420a:	677a      	str	r2, [r7, #116]	; 0x74
 800420c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004210:	4642      	mov	r2, r8
 8004212:	464b      	mov	r3, r9
 8004214:	1891      	adds	r1, r2, r2
 8004216:	60b9      	str	r1, [r7, #8]
 8004218:	415b      	adcs	r3, r3
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004220:	4641      	mov	r1, r8
 8004222:	1851      	adds	r1, r2, r1
 8004224:	6039      	str	r1, [r7, #0]
 8004226:	4649      	mov	r1, r9
 8004228:	414b      	adcs	r3, r1
 800422a:	607b      	str	r3, [r7, #4]
 800422c:	f04f 0200 	mov.w	r2, #0
 8004230:	f04f 0300 	mov.w	r3, #0
 8004234:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004238:	4659      	mov	r1, fp
 800423a:	00cb      	lsls	r3, r1, #3
 800423c:	4651      	mov	r1, sl
 800423e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004242:	4651      	mov	r1, sl
 8004244:	00ca      	lsls	r2, r1, #3
 8004246:	4610      	mov	r0, r2
 8004248:	4619      	mov	r1, r3
 800424a:	4603      	mov	r3, r0
 800424c:	4642      	mov	r2, r8
 800424e:	189b      	adds	r3, r3, r2
 8004250:	66bb      	str	r3, [r7, #104]	; 0x68
 8004252:	464b      	mov	r3, r9
 8004254:	460a      	mov	r2, r1
 8004256:	eb42 0303 	adc.w	r3, r2, r3
 800425a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800425c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	663b      	str	r3, [r7, #96]	; 0x60
 8004266:	667a      	str	r2, [r7, #100]	; 0x64
 8004268:	f04f 0200 	mov.w	r2, #0
 800426c:	f04f 0300 	mov.w	r3, #0
 8004270:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004274:	4649      	mov	r1, r9
 8004276:	008b      	lsls	r3, r1, #2
 8004278:	4641      	mov	r1, r8
 800427a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800427e:	4641      	mov	r1, r8
 8004280:	008a      	lsls	r2, r1, #2
 8004282:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004286:	f7fc fc8f 	bl	8000ba8 <__aeabi_uldivmod>
 800428a:	4602      	mov	r2, r0
 800428c:	460b      	mov	r3, r1
 800428e:	4b0d      	ldr	r3, [pc, #52]	; (80042c4 <UART_SetConfig+0x4e4>)
 8004290:	fba3 1302 	umull	r1, r3, r3, r2
 8004294:	095b      	lsrs	r3, r3, #5
 8004296:	2164      	movs	r1, #100	; 0x64
 8004298:	fb01 f303 	mul.w	r3, r1, r3
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	011b      	lsls	r3, r3, #4
 80042a0:	3332      	adds	r3, #50	; 0x32
 80042a2:	4a08      	ldr	r2, [pc, #32]	; (80042c4 <UART_SetConfig+0x4e4>)
 80042a4:	fba2 2303 	umull	r2, r3, r2, r3
 80042a8:	095b      	lsrs	r3, r3, #5
 80042aa:	f003 020f 	and.w	r2, r3, #15
 80042ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4422      	add	r2, r4
 80042b6:	609a      	str	r2, [r3, #8]
}
 80042b8:	bf00      	nop
 80042ba:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80042be:	46bd      	mov	sp, r7
 80042c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042c4:	51eb851f 	.word	0x51eb851f

080042c8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	4603      	mov	r3, r0
 80042d0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80042d2:	2300      	movs	r3, #0
 80042d4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80042d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042da:	2b84      	cmp	r3, #132	; 0x84
 80042dc:	d005      	beq.n	80042ea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80042de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4413      	add	r3, r2
 80042e6:	3303      	adds	r3, #3
 80042e8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80042ea:	68fb      	ldr	r3, [r7, #12]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3714      	adds	r7, #20
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80042fc:	f000 faf6 	bl	80048ec <vTaskStartScheduler>
  
  return osOK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	bd80      	pop	{r7, pc}

08004306 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004306:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004308:	b089      	sub	sp, #36	; 0x24
 800430a:	af04      	add	r7, sp, #16
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d020      	beq.n	800435a <osThreadCreate+0x54>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d01c      	beq.n	800435a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685c      	ldr	r4, [r3, #4]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691e      	ldr	r6, [r3, #16]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff ffc8 	bl	80042c8 <makeFreeRtosPriority>
 8004338:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004342:	9202      	str	r2, [sp, #8]
 8004344:	9301      	str	r3, [sp, #4]
 8004346:	9100      	str	r1, [sp, #0]
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	4632      	mov	r2, r6
 800434c:	4629      	mov	r1, r5
 800434e:	4620      	mov	r0, r4
 8004350:	f000 f8ed 	bl	800452e <xTaskCreateStatic>
 8004354:	4603      	mov	r3, r0
 8004356:	60fb      	str	r3, [r7, #12]
 8004358:	e01c      	b.n	8004394 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685c      	ldr	r4, [r3, #4]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004366:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800436e:	4618      	mov	r0, r3
 8004370:	f7ff ffaa 	bl	80042c8 <makeFreeRtosPriority>
 8004374:	4602      	mov	r2, r0
 8004376:	f107 030c 	add.w	r3, r7, #12
 800437a:	9301      	str	r3, [sp, #4]
 800437c:	9200      	str	r2, [sp, #0]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	4632      	mov	r2, r6
 8004382:	4629      	mov	r1, r5
 8004384:	4620      	mov	r0, r4
 8004386:	f000 f92f 	bl	80045e8 <xTaskCreate>
 800438a:	4603      	mov	r3, r0
 800438c:	2b01      	cmp	r3, #1
 800438e:	d001      	beq.n	8004394 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004390:	2300      	movs	r3, #0
 8004392:	e000      	b.n	8004396 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004394:	68fb      	ldr	r3, [r7, #12]
}
 8004396:	4618      	mov	r0, r3
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800439e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b084      	sub	sp, #16
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d001      	beq.n	80043b4 <osDelay+0x16>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	e000      	b.n	80043b6 <osDelay+0x18>
 80043b4:	2301      	movs	r3, #1
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 fa64 	bl	8004884 <vTaskDelay>
  
  return osOK;
 80043bc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80043c6:	b480      	push	{r7}
 80043c8:	b083      	sub	sp, #12
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f103 0208 	add.w	r2, r3, #8
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043de:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f103 0208 	add.w	r2, r3, #8
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f103 0208 	add.w	r2, r3, #8
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80043fa:	bf00      	nop
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004406:	b480      	push	{r7}
 8004408:	b083      	sub	sp, #12
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	689a      	ldr	r2, [r3, #8]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	683a      	ldr	r2, [r7, #0]
 8004444:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	601a      	str	r2, [r3, #0]
}
 800445c:	bf00      	nop
 800445e:	3714      	adds	r7, #20
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800447e:	d103      	bne.n	8004488 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	60fb      	str	r3, [r7, #12]
 8004486:	e00c      	b.n	80044a2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	3308      	adds	r3, #8
 800448c:	60fb      	str	r3, [r7, #12]
 800448e:	e002      	b.n	8004496 <vListInsert+0x2e>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	60fb      	str	r3, [r7, #12]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d2f6      	bcs.n	8004490 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	683a      	ldr	r2, [r7, #0]
 80044b0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	683a      	ldr	r2, [r7, #0]
 80044bc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	1c5a      	adds	r2, r3, #1
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	601a      	str	r2, [r3, #0]
}
 80044ce:	bf00      	nop
 80044d0:	3714      	adds	r7, #20
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80044da:	b480      	push	{r7}
 80044dc:	b085      	sub	sp, #20
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	6892      	ldr	r2, [r2, #8]
 80044f0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	6852      	ldr	r2, [r2, #4]
 80044fa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	429a      	cmp	r2, r3
 8004504:	d103      	bne.n	800450e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	689a      	ldr	r2, [r3, #8]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	1e5a      	subs	r2, r3, #1
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
}
 8004522:	4618      	mov	r0, r3
 8004524:	3714      	adds	r7, #20
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800452e:	b580      	push	{r7, lr}
 8004530:	b08e      	sub	sp, #56	; 0x38
 8004532:	af04      	add	r7, sp, #16
 8004534:	60f8      	str	r0, [r7, #12]
 8004536:	60b9      	str	r1, [r7, #8]
 8004538:	607a      	str	r2, [r7, #4]
 800453a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800453c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10a      	bne.n	8004558 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004546:	f383 8811 	msr	BASEPRI, r3
 800454a:	f3bf 8f6f 	isb	sy
 800454e:	f3bf 8f4f 	dsb	sy
 8004552:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004554:	bf00      	nop
 8004556:	e7fe      	b.n	8004556 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10a      	bne.n	8004574 <xTaskCreateStatic+0x46>
	__asm volatile
 800455e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004562:	f383 8811 	msr	BASEPRI, r3
 8004566:	f3bf 8f6f 	isb	sy
 800456a:	f3bf 8f4f 	dsb	sy
 800456e:	61fb      	str	r3, [r7, #28]
}
 8004570:	bf00      	nop
 8004572:	e7fe      	b.n	8004572 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004574:	23a0      	movs	r3, #160	; 0xa0
 8004576:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	2ba0      	cmp	r3, #160	; 0xa0
 800457c:	d00a      	beq.n	8004594 <xTaskCreateStatic+0x66>
	__asm volatile
 800457e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004582:	f383 8811 	msr	BASEPRI, r3
 8004586:	f3bf 8f6f 	isb	sy
 800458a:	f3bf 8f4f 	dsb	sy
 800458e:	61bb      	str	r3, [r7, #24]
}
 8004590:	bf00      	nop
 8004592:	e7fe      	b.n	8004592 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004594:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004598:	2b00      	cmp	r3, #0
 800459a:	d01e      	beq.n	80045da <xTaskCreateStatic+0xac>
 800459c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d01b      	beq.n	80045da <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80045a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045aa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	2202      	movs	r2, #2
 80045b0:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80045b4:	2300      	movs	r3, #0
 80045b6:	9303      	str	r3, [sp, #12]
 80045b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ba:	9302      	str	r3, [sp, #8]
 80045bc:	f107 0314 	add.w	r3, r7, #20
 80045c0:	9301      	str	r3, [sp, #4]
 80045c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c4:	9300      	str	r3, [sp, #0]
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	68b9      	ldr	r1, [r7, #8]
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f000 f851 	bl	8004674 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80045d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80045d4:	f000 f8ec 	bl	80047b0 <prvAddNewTaskToReadyList>
 80045d8:	e001      	b.n	80045de <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80045da:	2300      	movs	r3, #0
 80045dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80045de:	697b      	ldr	r3, [r7, #20]
	}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3728      	adds	r7, #40	; 0x28
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b08c      	sub	sp, #48	; 0x30
 80045ec:	af04      	add	r7, sp, #16
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	603b      	str	r3, [r7, #0]
 80045f4:	4613      	mov	r3, r2
 80045f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80045f8:	88fb      	ldrh	r3, [r7, #6]
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	4618      	mov	r0, r3
 80045fe:	f000 fef3 	bl	80053e8 <pvPortMalloc>
 8004602:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00e      	beq.n	8004628 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800460a:	20a0      	movs	r0, #160	; 0xa0
 800460c:	f000 feec 	bl	80053e8 <pvPortMalloc>
 8004610:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d003      	beq.n	8004620 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	631a      	str	r2, [r3, #48]	; 0x30
 800461e:	e005      	b.n	800462c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004620:	6978      	ldr	r0, [r7, #20]
 8004622:	f000 ffad 	bl	8005580 <vPortFree>
 8004626:	e001      	b.n	800462c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004628:	2300      	movs	r3, #0
 800462a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d017      	beq.n	8004662 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800463a:	88fa      	ldrh	r2, [r7, #6]
 800463c:	2300      	movs	r3, #0
 800463e:	9303      	str	r3, [sp, #12]
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	9302      	str	r3, [sp, #8]
 8004644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004646:	9301      	str	r3, [sp, #4]
 8004648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	68b9      	ldr	r1, [r7, #8]
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f000 f80f 	bl	8004674 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004656:	69f8      	ldr	r0, [r7, #28]
 8004658:	f000 f8aa 	bl	80047b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800465c:	2301      	movs	r3, #1
 800465e:	61bb      	str	r3, [r7, #24]
 8004660:	e002      	b.n	8004668 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004662:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004666:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004668:	69bb      	ldr	r3, [r7, #24]
	}
 800466a:	4618      	mov	r0, r3
 800466c:	3720      	adds	r7, #32
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
	...

08004674 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b088      	sub	sp, #32
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
 8004680:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800468c:	3b01      	subs	r3, #1
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4413      	add	r3, r2
 8004692:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	f023 0307 	bic.w	r3, r3, #7
 800469a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	f003 0307 	and.w	r3, r3, #7
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00a      	beq.n	80046bc <prvInitialiseNewTask+0x48>
	__asm volatile
 80046a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046aa:	f383 8811 	msr	BASEPRI, r3
 80046ae:	f3bf 8f6f 	isb	sy
 80046b2:	f3bf 8f4f 	dsb	sy
 80046b6:	617b      	str	r3, [r7, #20]
}
 80046b8:	bf00      	nop
 80046ba:	e7fe      	b.n	80046ba <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d01f      	beq.n	8004702 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80046c2:	2300      	movs	r3, #0
 80046c4:	61fb      	str	r3, [r7, #28]
 80046c6:	e012      	b.n	80046ee <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	4413      	add	r3, r2
 80046ce:	7819      	ldrb	r1, [r3, #0]
 80046d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	4413      	add	r3, r2
 80046d6:	3334      	adds	r3, #52	; 0x34
 80046d8:	460a      	mov	r2, r1
 80046da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	4413      	add	r3, r2
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d006      	beq.n	80046f6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	3301      	adds	r3, #1
 80046ec:	61fb      	str	r3, [r7, #28]
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	2b0f      	cmp	r3, #15
 80046f2:	d9e9      	bls.n	80046c8 <prvInitialiseNewTask+0x54>
 80046f4:	e000      	b.n	80046f8 <prvInitialiseNewTask+0x84>
			{
				break;
 80046f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80046f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004700:	e003      	b.n	800470a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004704:	2200      	movs	r2, #0
 8004706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800470a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470c:	2b06      	cmp	r3, #6
 800470e:	d901      	bls.n	8004714 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004710:	2306      	movs	r3, #6
 8004712:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004716:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004718:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800471a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800471e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004722:	2200      	movs	r2, #0
 8004724:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004728:	3304      	adds	r3, #4
 800472a:	4618      	mov	r0, r3
 800472c:	f7ff fe6b 	bl	8004406 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004732:	3318      	adds	r3, #24
 8004734:	4618      	mov	r0, r3
 8004736:	f7ff fe66 	bl	8004406 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800473a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800473e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004742:	f1c3 0207 	rsb	r2, r3, #7
 8004746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004748:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800474a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800474e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004752:	2200      	movs	r2, #0
 8004754:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475a:	2200      	movs	r2, #0
 800475c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004762:	334c      	adds	r3, #76	; 0x4c
 8004764:	224c      	movs	r2, #76	; 0x4c
 8004766:	2100      	movs	r1, #0
 8004768:	4618      	mov	r0, r3
 800476a:	f001 fd92 	bl	8006292 <memset>
 800476e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004770:	4a0c      	ldr	r2, [pc, #48]	; (80047a4 <prvInitialiseNewTask+0x130>)
 8004772:	651a      	str	r2, [r3, #80]	; 0x50
 8004774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004776:	4a0c      	ldr	r2, [pc, #48]	; (80047a8 <prvInitialiseNewTask+0x134>)
 8004778:	655a      	str	r2, [r3, #84]	; 0x54
 800477a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477c:	4a0b      	ldr	r2, [pc, #44]	; (80047ac <prvInitialiseNewTask+0x138>)
 800477e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004780:	683a      	ldr	r2, [r7, #0]
 8004782:	68f9      	ldr	r1, [r7, #12]
 8004784:	69b8      	ldr	r0, [r7, #24]
 8004786:	f000 fc1f 	bl	8004fc8 <pxPortInitialiseStack>
 800478a:	4602      	mov	r2, r0
 800478c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004792:	2b00      	cmp	r3, #0
 8004794:	d002      	beq.n	800479c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800479a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800479c:	bf00      	nop
 800479e:	3720      	adds	r7, #32
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	20004388 	.word	0x20004388
 80047a8:	200043f0 	.word	0x200043f0
 80047ac:	20004458 	.word	0x20004458

080047b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80047b8:	f000 fd34 	bl	8005224 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80047bc:	4b2a      	ldr	r3, [pc, #168]	; (8004868 <prvAddNewTaskToReadyList+0xb8>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	3301      	adds	r3, #1
 80047c2:	4a29      	ldr	r2, [pc, #164]	; (8004868 <prvAddNewTaskToReadyList+0xb8>)
 80047c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80047c6:	4b29      	ldr	r3, [pc, #164]	; (800486c <prvAddNewTaskToReadyList+0xbc>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d109      	bne.n	80047e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80047ce:	4a27      	ldr	r2, [pc, #156]	; (800486c <prvAddNewTaskToReadyList+0xbc>)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80047d4:	4b24      	ldr	r3, [pc, #144]	; (8004868 <prvAddNewTaskToReadyList+0xb8>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d110      	bne.n	80047fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80047dc:	f000 facc 	bl	8004d78 <prvInitialiseTaskLists>
 80047e0:	e00d      	b.n	80047fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80047e2:	4b23      	ldr	r3, [pc, #140]	; (8004870 <prvAddNewTaskToReadyList+0xc0>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d109      	bne.n	80047fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80047ea:	4b20      	ldr	r3, [pc, #128]	; (800486c <prvAddNewTaskToReadyList+0xbc>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d802      	bhi.n	80047fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80047f8:	4a1c      	ldr	r2, [pc, #112]	; (800486c <prvAddNewTaskToReadyList+0xbc>)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80047fe:	4b1d      	ldr	r3, [pc, #116]	; (8004874 <prvAddNewTaskToReadyList+0xc4>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	3301      	adds	r3, #1
 8004804:	4a1b      	ldr	r2, [pc, #108]	; (8004874 <prvAddNewTaskToReadyList+0xc4>)
 8004806:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480c:	2201      	movs	r2, #1
 800480e:	409a      	lsls	r2, r3
 8004810:	4b19      	ldr	r3, [pc, #100]	; (8004878 <prvAddNewTaskToReadyList+0xc8>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4313      	orrs	r3, r2
 8004816:	4a18      	ldr	r2, [pc, #96]	; (8004878 <prvAddNewTaskToReadyList+0xc8>)
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800481e:	4613      	mov	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4413      	add	r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	4a15      	ldr	r2, [pc, #84]	; (800487c <prvAddNewTaskToReadyList+0xcc>)
 8004828:	441a      	add	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	3304      	adds	r3, #4
 800482e:	4619      	mov	r1, r3
 8004830:	4610      	mov	r0, r2
 8004832:	f7ff fdf5 	bl	8004420 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004836:	f000 fd25 	bl	8005284 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800483a:	4b0d      	ldr	r3, [pc, #52]	; (8004870 <prvAddNewTaskToReadyList+0xc0>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00e      	beq.n	8004860 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004842:	4b0a      	ldr	r3, [pc, #40]	; (800486c <prvAddNewTaskToReadyList+0xbc>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484c:	429a      	cmp	r2, r3
 800484e:	d207      	bcs.n	8004860 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004850:	4b0b      	ldr	r3, [pc, #44]	; (8004880 <prvAddNewTaskToReadyList+0xd0>)
 8004852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	f3bf 8f4f 	dsb	sy
 800485c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004860:	bf00      	nop
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	20000734 	.word	0x20000734
 800486c:	20000634 	.word	0x20000634
 8004870:	20000740 	.word	0x20000740
 8004874:	20000750 	.word	0x20000750
 8004878:	2000073c 	.word	0x2000073c
 800487c:	20000638 	.word	0x20000638
 8004880:	e000ed04 	.word	0xe000ed04

08004884 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800488c:	2300      	movs	r3, #0
 800488e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d017      	beq.n	80048c6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004896:	4b13      	ldr	r3, [pc, #76]	; (80048e4 <vTaskDelay+0x60>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00a      	beq.n	80048b4 <vTaskDelay+0x30>
	__asm volatile
 800489e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a2:	f383 8811 	msr	BASEPRI, r3
 80048a6:	f3bf 8f6f 	isb	sy
 80048aa:	f3bf 8f4f 	dsb	sy
 80048ae:	60bb      	str	r3, [r7, #8]
}
 80048b0:	bf00      	nop
 80048b2:	e7fe      	b.n	80048b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80048b4:	f000 f884 	bl	80049c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80048b8:	2100      	movs	r1, #0
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 fb1e 	bl	8004efc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80048c0:	f000 f88c 	bl	80049dc <xTaskResumeAll>
 80048c4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d107      	bne.n	80048dc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80048cc:	4b06      	ldr	r3, [pc, #24]	; (80048e8 <vTaskDelay+0x64>)
 80048ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048d2:	601a      	str	r2, [r3, #0]
 80048d4:	f3bf 8f4f 	dsb	sy
 80048d8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80048dc:	bf00      	nop
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	2000075c 	.word	0x2000075c
 80048e8:	e000ed04 	.word	0xe000ed04

080048ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b08a      	sub	sp, #40	; 0x28
 80048f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80048f2:	2300      	movs	r3, #0
 80048f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80048f6:	2300      	movs	r3, #0
 80048f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80048fa:	463a      	mov	r2, r7
 80048fc:	1d39      	adds	r1, r7, #4
 80048fe:	f107 0308 	add.w	r3, r7, #8
 8004902:	4618      	mov	r0, r3
 8004904:	f7fc fc5c 	bl	80011c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004908:	6839      	ldr	r1, [r7, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	9202      	str	r2, [sp, #8]
 8004910:	9301      	str	r3, [sp, #4]
 8004912:	2300      	movs	r3, #0
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	2300      	movs	r3, #0
 8004918:	460a      	mov	r2, r1
 800491a:	4921      	ldr	r1, [pc, #132]	; (80049a0 <vTaskStartScheduler+0xb4>)
 800491c:	4821      	ldr	r0, [pc, #132]	; (80049a4 <vTaskStartScheduler+0xb8>)
 800491e:	f7ff fe06 	bl	800452e <xTaskCreateStatic>
 8004922:	4603      	mov	r3, r0
 8004924:	4a20      	ldr	r2, [pc, #128]	; (80049a8 <vTaskStartScheduler+0xbc>)
 8004926:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004928:	4b1f      	ldr	r3, [pc, #124]	; (80049a8 <vTaskStartScheduler+0xbc>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d002      	beq.n	8004936 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004930:	2301      	movs	r3, #1
 8004932:	617b      	str	r3, [r7, #20]
 8004934:	e001      	b.n	800493a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004936:	2300      	movs	r3, #0
 8004938:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d11b      	bne.n	8004978 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004944:	f383 8811 	msr	BASEPRI, r3
 8004948:	f3bf 8f6f 	isb	sy
 800494c:	f3bf 8f4f 	dsb	sy
 8004950:	613b      	str	r3, [r7, #16]
}
 8004952:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004954:	4b15      	ldr	r3, [pc, #84]	; (80049ac <vTaskStartScheduler+0xc0>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	334c      	adds	r3, #76	; 0x4c
 800495a:	4a15      	ldr	r2, [pc, #84]	; (80049b0 <vTaskStartScheduler+0xc4>)
 800495c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800495e:	4b15      	ldr	r3, [pc, #84]	; (80049b4 <vTaskStartScheduler+0xc8>)
 8004960:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004964:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004966:	4b14      	ldr	r3, [pc, #80]	; (80049b8 <vTaskStartScheduler+0xcc>)
 8004968:	2201      	movs	r2, #1
 800496a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800496c:	4b13      	ldr	r3, [pc, #76]	; (80049bc <vTaskStartScheduler+0xd0>)
 800496e:	2200      	movs	r2, #0
 8004970:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004972:	f000 fbb5 	bl	80050e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004976:	e00e      	b.n	8004996 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800497e:	d10a      	bne.n	8004996 <vTaskStartScheduler+0xaa>
	__asm volatile
 8004980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004984:	f383 8811 	msr	BASEPRI, r3
 8004988:	f3bf 8f6f 	isb	sy
 800498c:	f3bf 8f4f 	dsb	sy
 8004990:	60fb      	str	r3, [r7, #12]
}
 8004992:	bf00      	nop
 8004994:	e7fe      	b.n	8004994 <vTaskStartScheduler+0xa8>
}
 8004996:	bf00      	nop
 8004998:	3718      	adds	r7, #24
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	08008270 	.word	0x08008270
 80049a4:	08004d49 	.word	0x08004d49
 80049a8:	20000758 	.word	0x20000758
 80049ac:	20000634 	.word	0x20000634
 80049b0:	20000068 	.word	0x20000068
 80049b4:	20000754 	.word	0x20000754
 80049b8:	20000740 	.word	0x20000740
 80049bc:	20000738 	.word	0x20000738

080049c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80049c0:	b480      	push	{r7}
 80049c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80049c4:	4b04      	ldr	r3, [pc, #16]	; (80049d8 <vTaskSuspendAll+0x18>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	3301      	adds	r3, #1
 80049ca:	4a03      	ldr	r2, [pc, #12]	; (80049d8 <vTaskSuspendAll+0x18>)
 80049cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80049ce:	bf00      	nop
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr
 80049d8:	2000075c 	.word	0x2000075c

080049dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80049e2:	2300      	movs	r3, #0
 80049e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80049e6:	2300      	movs	r3, #0
 80049e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80049ea:	4b41      	ldr	r3, [pc, #260]	; (8004af0 <xTaskResumeAll+0x114>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10a      	bne.n	8004a08 <xTaskResumeAll+0x2c>
	__asm volatile
 80049f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f6:	f383 8811 	msr	BASEPRI, r3
 80049fa:	f3bf 8f6f 	isb	sy
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	603b      	str	r3, [r7, #0]
}
 8004a04:	bf00      	nop
 8004a06:	e7fe      	b.n	8004a06 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a08:	f000 fc0c 	bl	8005224 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a0c:	4b38      	ldr	r3, [pc, #224]	; (8004af0 <xTaskResumeAll+0x114>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	3b01      	subs	r3, #1
 8004a12:	4a37      	ldr	r2, [pc, #220]	; (8004af0 <xTaskResumeAll+0x114>)
 8004a14:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a16:	4b36      	ldr	r3, [pc, #216]	; (8004af0 <xTaskResumeAll+0x114>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d161      	bne.n	8004ae2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a1e:	4b35      	ldr	r3, [pc, #212]	; (8004af4 <xTaskResumeAll+0x118>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d05d      	beq.n	8004ae2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a26:	e02e      	b.n	8004a86 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a28:	4b33      	ldr	r3, [pc, #204]	; (8004af8 <xTaskResumeAll+0x11c>)
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	3318      	adds	r3, #24
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7ff fd50 	bl	80044da <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	3304      	adds	r3, #4
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7ff fd4b 	bl	80044da <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a48:	2201      	movs	r2, #1
 8004a4a:	409a      	lsls	r2, r3
 8004a4c:	4b2b      	ldr	r3, [pc, #172]	; (8004afc <xTaskResumeAll+0x120>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	4a2a      	ldr	r2, [pc, #168]	; (8004afc <xTaskResumeAll+0x120>)
 8004a54:	6013      	str	r3, [r2, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4413      	add	r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4a27      	ldr	r2, [pc, #156]	; (8004b00 <xTaskResumeAll+0x124>)
 8004a64:	441a      	add	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	3304      	adds	r3, #4
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	4610      	mov	r0, r2
 8004a6e:	f7ff fcd7 	bl	8004420 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a76:	4b23      	ldr	r3, [pc, #140]	; (8004b04 <xTaskResumeAll+0x128>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d302      	bcc.n	8004a86 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004a80:	4b21      	ldr	r3, [pc, #132]	; (8004b08 <xTaskResumeAll+0x12c>)
 8004a82:	2201      	movs	r2, #1
 8004a84:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a86:	4b1c      	ldr	r3, [pc, #112]	; (8004af8 <xTaskResumeAll+0x11c>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1cc      	bne.n	8004a28 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d001      	beq.n	8004a98 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004a94:	f000 fa12 	bl	8004ebc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004a98:	4b1c      	ldr	r3, [pc, #112]	; (8004b0c <xTaskResumeAll+0x130>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d010      	beq.n	8004ac6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004aa4:	f000 f836 	bl	8004b14 <xTaskIncrementTick>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d002      	beq.n	8004ab4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004aae:	4b16      	ldr	r3, [pc, #88]	; (8004b08 <xTaskResumeAll+0x12c>)
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1f1      	bne.n	8004aa4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004ac0:	4b12      	ldr	r3, [pc, #72]	; (8004b0c <xTaskResumeAll+0x130>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004ac6:	4b10      	ldr	r3, [pc, #64]	; (8004b08 <xTaskResumeAll+0x12c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d009      	beq.n	8004ae2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004ad2:	4b0f      	ldr	r3, [pc, #60]	; (8004b10 <xTaskResumeAll+0x134>)
 8004ad4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ad8:	601a      	str	r2, [r3, #0]
 8004ada:	f3bf 8f4f 	dsb	sy
 8004ade:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ae2:	f000 fbcf 	bl	8005284 <vPortExitCritical>

	return xAlreadyYielded;
 8004ae6:	68bb      	ldr	r3, [r7, #8]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	2000075c 	.word	0x2000075c
 8004af4:	20000734 	.word	0x20000734
 8004af8:	200006f4 	.word	0x200006f4
 8004afc:	2000073c 	.word	0x2000073c
 8004b00:	20000638 	.word	0x20000638
 8004b04:	20000634 	.word	0x20000634
 8004b08:	20000748 	.word	0x20000748
 8004b0c:	20000744 	.word	0x20000744
 8004b10:	e000ed04 	.word	0xe000ed04

08004b14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b1e:	4b4e      	ldr	r3, [pc, #312]	; (8004c58 <xTaskIncrementTick+0x144>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f040 808e 	bne.w	8004c44 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b28:	4b4c      	ldr	r3, [pc, #304]	; (8004c5c <xTaskIncrementTick+0x148>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004b30:	4a4a      	ldr	r2, [pc, #296]	; (8004c5c <xTaskIncrementTick+0x148>)
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d120      	bne.n	8004b7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004b3c:	4b48      	ldr	r3, [pc, #288]	; (8004c60 <xTaskIncrementTick+0x14c>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00a      	beq.n	8004b5c <xTaskIncrementTick+0x48>
	__asm volatile
 8004b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4a:	f383 8811 	msr	BASEPRI, r3
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	f3bf 8f4f 	dsb	sy
 8004b56:	603b      	str	r3, [r7, #0]
}
 8004b58:	bf00      	nop
 8004b5a:	e7fe      	b.n	8004b5a <xTaskIncrementTick+0x46>
 8004b5c:	4b40      	ldr	r3, [pc, #256]	; (8004c60 <xTaskIncrementTick+0x14c>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	60fb      	str	r3, [r7, #12]
 8004b62:	4b40      	ldr	r3, [pc, #256]	; (8004c64 <xTaskIncrementTick+0x150>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a3e      	ldr	r2, [pc, #248]	; (8004c60 <xTaskIncrementTick+0x14c>)
 8004b68:	6013      	str	r3, [r2, #0]
 8004b6a:	4a3e      	ldr	r2, [pc, #248]	; (8004c64 <xTaskIncrementTick+0x150>)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6013      	str	r3, [r2, #0]
 8004b70:	4b3d      	ldr	r3, [pc, #244]	; (8004c68 <xTaskIncrementTick+0x154>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	3301      	adds	r3, #1
 8004b76:	4a3c      	ldr	r2, [pc, #240]	; (8004c68 <xTaskIncrementTick+0x154>)
 8004b78:	6013      	str	r3, [r2, #0]
 8004b7a:	f000 f99f 	bl	8004ebc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004b7e:	4b3b      	ldr	r3, [pc, #236]	; (8004c6c <xTaskIncrementTick+0x158>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d348      	bcc.n	8004c1a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b88:	4b35      	ldr	r3, [pc, #212]	; (8004c60 <xTaskIncrementTick+0x14c>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d104      	bne.n	8004b9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b92:	4b36      	ldr	r3, [pc, #216]	; (8004c6c <xTaskIncrementTick+0x158>)
 8004b94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b98:	601a      	str	r2, [r3, #0]
					break;
 8004b9a:	e03e      	b.n	8004c1a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b9c:	4b30      	ldr	r3, [pc, #192]	; (8004c60 <xTaskIncrementTick+0x14c>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d203      	bcs.n	8004bbc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004bb4:	4a2d      	ldr	r2, [pc, #180]	; (8004c6c <xTaskIncrementTick+0x158>)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004bba:	e02e      	b.n	8004c1a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	3304      	adds	r3, #4
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7ff fc8a 	bl	80044da <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d004      	beq.n	8004bd8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	3318      	adds	r3, #24
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7ff fc81 	bl	80044da <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bdc:	2201      	movs	r2, #1
 8004bde:	409a      	lsls	r2, r3
 8004be0:	4b23      	ldr	r3, [pc, #140]	; (8004c70 <xTaskIncrementTick+0x15c>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	4a22      	ldr	r2, [pc, #136]	; (8004c70 <xTaskIncrementTick+0x15c>)
 8004be8:	6013      	str	r3, [r2, #0]
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bee:	4613      	mov	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4a1f      	ldr	r2, [pc, #124]	; (8004c74 <xTaskIncrementTick+0x160>)
 8004bf8:	441a      	add	r2, r3
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	4619      	mov	r1, r3
 8004c00:	4610      	mov	r0, r2
 8004c02:	f7ff fc0d 	bl	8004420 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c0a:	4b1b      	ldr	r3, [pc, #108]	; (8004c78 <xTaskIncrementTick+0x164>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d3b9      	bcc.n	8004b88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004c14:	2301      	movs	r3, #1
 8004c16:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c18:	e7b6      	b.n	8004b88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004c1a:	4b17      	ldr	r3, [pc, #92]	; (8004c78 <xTaskIncrementTick+0x164>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c20:	4914      	ldr	r1, [pc, #80]	; (8004c74 <xTaskIncrementTick+0x160>)
 8004c22:	4613      	mov	r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	4413      	add	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	440b      	add	r3, r1
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d901      	bls.n	8004c36 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004c32:	2301      	movs	r3, #1
 8004c34:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004c36:	4b11      	ldr	r3, [pc, #68]	; (8004c7c <xTaskIncrementTick+0x168>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d007      	beq.n	8004c4e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	617b      	str	r3, [r7, #20]
 8004c42:	e004      	b.n	8004c4e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004c44:	4b0e      	ldr	r3, [pc, #56]	; (8004c80 <xTaskIncrementTick+0x16c>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	3301      	adds	r3, #1
 8004c4a:	4a0d      	ldr	r2, [pc, #52]	; (8004c80 <xTaskIncrementTick+0x16c>)
 8004c4c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004c4e:	697b      	ldr	r3, [r7, #20]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3718      	adds	r7, #24
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	2000075c 	.word	0x2000075c
 8004c5c:	20000738 	.word	0x20000738
 8004c60:	200006ec 	.word	0x200006ec
 8004c64:	200006f0 	.word	0x200006f0
 8004c68:	2000074c 	.word	0x2000074c
 8004c6c:	20000754 	.word	0x20000754
 8004c70:	2000073c 	.word	0x2000073c
 8004c74:	20000638 	.word	0x20000638
 8004c78:	20000634 	.word	0x20000634
 8004c7c:	20000748 	.word	0x20000748
 8004c80:	20000744 	.word	0x20000744

08004c84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004c84:	b480      	push	{r7}
 8004c86:	b087      	sub	sp, #28
 8004c88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004c8a:	4b29      	ldr	r3, [pc, #164]	; (8004d30 <vTaskSwitchContext+0xac>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d003      	beq.n	8004c9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004c92:	4b28      	ldr	r3, [pc, #160]	; (8004d34 <vTaskSwitchContext+0xb0>)
 8004c94:	2201      	movs	r2, #1
 8004c96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004c98:	e044      	b.n	8004d24 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004c9a:	4b26      	ldr	r3, [pc, #152]	; (8004d34 <vTaskSwitchContext+0xb0>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ca0:	4b25      	ldr	r3, [pc, #148]	; (8004d38 <vTaskSwitchContext+0xb4>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	fab3 f383 	clz	r3, r3
 8004cac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004cae:	7afb      	ldrb	r3, [r7, #11]
 8004cb0:	f1c3 031f 	rsb	r3, r3, #31
 8004cb4:	617b      	str	r3, [r7, #20]
 8004cb6:	4921      	ldr	r1, [pc, #132]	; (8004d3c <vTaskSwitchContext+0xb8>)
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	4413      	add	r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	440b      	add	r3, r1
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10a      	bne.n	8004ce0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cce:	f383 8811 	msr	BASEPRI, r3
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	f3bf 8f4f 	dsb	sy
 8004cda:	607b      	str	r3, [r7, #4]
}
 8004cdc:	bf00      	nop
 8004cde:	e7fe      	b.n	8004cde <vTaskSwitchContext+0x5a>
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4413      	add	r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	4a14      	ldr	r2, [pc, #80]	; (8004d3c <vTaskSwitchContext+0xb8>)
 8004cec:	4413      	add	r3, r2
 8004cee:	613b      	str	r3, [r7, #16]
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	605a      	str	r2, [r3, #4]
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	3308      	adds	r3, #8
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d104      	bne.n	8004d10 <vTaskSwitchContext+0x8c>
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	605a      	str	r2, [r3, #4]
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	4a0a      	ldr	r2, [pc, #40]	; (8004d40 <vTaskSwitchContext+0xbc>)
 8004d18:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004d1a:	4b09      	ldr	r3, [pc, #36]	; (8004d40 <vTaskSwitchContext+0xbc>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	334c      	adds	r3, #76	; 0x4c
 8004d20:	4a08      	ldr	r2, [pc, #32]	; (8004d44 <vTaskSwitchContext+0xc0>)
 8004d22:	6013      	str	r3, [r2, #0]
}
 8004d24:	bf00      	nop
 8004d26:	371c      	adds	r7, #28
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr
 8004d30:	2000075c 	.word	0x2000075c
 8004d34:	20000748 	.word	0x20000748
 8004d38:	2000073c 	.word	0x2000073c
 8004d3c:	20000638 	.word	0x20000638
 8004d40:	20000634 	.word	0x20000634
 8004d44:	20000068 	.word	0x20000068

08004d48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004d50:	f000 f852 	bl	8004df8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d54:	4b06      	ldr	r3, [pc, #24]	; (8004d70 <prvIdleTask+0x28>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d9f9      	bls.n	8004d50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004d5c:	4b05      	ldr	r3, [pc, #20]	; (8004d74 <prvIdleTask+0x2c>)
 8004d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	f3bf 8f4f 	dsb	sy
 8004d68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004d6c:	e7f0      	b.n	8004d50 <prvIdleTask+0x8>
 8004d6e:	bf00      	nop
 8004d70:	20000638 	.word	0x20000638
 8004d74:	e000ed04 	.word	0xe000ed04

08004d78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d7e:	2300      	movs	r3, #0
 8004d80:	607b      	str	r3, [r7, #4]
 8004d82:	e00c      	b.n	8004d9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	4613      	mov	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	4a12      	ldr	r2, [pc, #72]	; (8004dd8 <prvInitialiseTaskLists+0x60>)
 8004d90:	4413      	add	r3, r2
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7ff fb17 	bl	80043c6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	607b      	str	r3, [r7, #4]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b06      	cmp	r3, #6
 8004da2:	d9ef      	bls.n	8004d84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004da4:	480d      	ldr	r0, [pc, #52]	; (8004ddc <prvInitialiseTaskLists+0x64>)
 8004da6:	f7ff fb0e 	bl	80043c6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004daa:	480d      	ldr	r0, [pc, #52]	; (8004de0 <prvInitialiseTaskLists+0x68>)
 8004dac:	f7ff fb0b 	bl	80043c6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004db0:	480c      	ldr	r0, [pc, #48]	; (8004de4 <prvInitialiseTaskLists+0x6c>)
 8004db2:	f7ff fb08 	bl	80043c6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004db6:	480c      	ldr	r0, [pc, #48]	; (8004de8 <prvInitialiseTaskLists+0x70>)
 8004db8:	f7ff fb05 	bl	80043c6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004dbc:	480b      	ldr	r0, [pc, #44]	; (8004dec <prvInitialiseTaskLists+0x74>)
 8004dbe:	f7ff fb02 	bl	80043c6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004dc2:	4b0b      	ldr	r3, [pc, #44]	; (8004df0 <prvInitialiseTaskLists+0x78>)
 8004dc4:	4a05      	ldr	r2, [pc, #20]	; (8004ddc <prvInitialiseTaskLists+0x64>)
 8004dc6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004dc8:	4b0a      	ldr	r3, [pc, #40]	; (8004df4 <prvInitialiseTaskLists+0x7c>)
 8004dca:	4a05      	ldr	r2, [pc, #20]	; (8004de0 <prvInitialiseTaskLists+0x68>)
 8004dcc:	601a      	str	r2, [r3, #0]
}
 8004dce:	bf00      	nop
 8004dd0:	3708      	adds	r7, #8
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	20000638 	.word	0x20000638
 8004ddc:	200006c4 	.word	0x200006c4
 8004de0:	200006d8 	.word	0x200006d8
 8004de4:	200006f4 	.word	0x200006f4
 8004de8:	20000708 	.word	0x20000708
 8004dec:	20000720 	.word	0x20000720
 8004df0:	200006ec 	.word	0x200006ec
 8004df4:	200006f0 	.word	0x200006f0

08004df8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004dfe:	e019      	b.n	8004e34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e00:	f000 fa10 	bl	8005224 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e04:	4b10      	ldr	r3, [pc, #64]	; (8004e48 <prvCheckTasksWaitingTermination+0x50>)
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	3304      	adds	r3, #4
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7ff fb62 	bl	80044da <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e16:	4b0d      	ldr	r3, [pc, #52]	; (8004e4c <prvCheckTasksWaitingTermination+0x54>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	4a0b      	ldr	r2, [pc, #44]	; (8004e4c <prvCheckTasksWaitingTermination+0x54>)
 8004e1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e20:	4b0b      	ldr	r3, [pc, #44]	; (8004e50 <prvCheckTasksWaitingTermination+0x58>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	3b01      	subs	r3, #1
 8004e26:	4a0a      	ldr	r2, [pc, #40]	; (8004e50 <prvCheckTasksWaitingTermination+0x58>)
 8004e28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004e2a:	f000 fa2b 	bl	8005284 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f810 	bl	8004e54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e34:	4b06      	ldr	r3, [pc, #24]	; (8004e50 <prvCheckTasksWaitingTermination+0x58>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1e1      	bne.n	8004e00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004e3c:	bf00      	nop
 8004e3e:	bf00      	nop
 8004e40:	3708      	adds	r7, #8
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	20000708 	.word	0x20000708
 8004e4c:	20000734 	.word	0x20000734
 8004e50:	2000071c 	.word	0x2000071c

08004e54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	334c      	adds	r3, #76	; 0x4c
 8004e60:	4618      	mov	r0, r3
 8004e62:	f001 fa33 	bl	80062cc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d108      	bne.n	8004e82 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e74:	4618      	mov	r0, r3
 8004e76:	f000 fb83 	bl	8005580 <vPortFree>
				vPortFree( pxTCB );
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 fb80 	bl	8005580 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004e80:	e018      	b.n	8004eb4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d103      	bne.n	8004e94 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 fb77 	bl	8005580 <vPortFree>
	}
 8004e92:	e00f      	b.n	8004eb4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d00a      	beq.n	8004eb4 <prvDeleteTCB+0x60>
	__asm volatile
 8004e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	60fb      	str	r3, [r7, #12]
}
 8004eb0:	bf00      	nop
 8004eb2:	e7fe      	b.n	8004eb2 <prvDeleteTCB+0x5e>
	}
 8004eb4:	bf00      	nop
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ec2:	4b0c      	ldr	r3, [pc, #48]	; (8004ef4 <prvResetNextTaskUnblockTime+0x38>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d104      	bne.n	8004ed6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ecc:	4b0a      	ldr	r3, [pc, #40]	; (8004ef8 <prvResetNextTaskUnblockTime+0x3c>)
 8004ece:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ed2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004ed4:	e008      	b.n	8004ee8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ed6:	4b07      	ldr	r3, [pc, #28]	; (8004ef4 <prvResetNextTaskUnblockTime+0x38>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	4a04      	ldr	r2, [pc, #16]	; (8004ef8 <prvResetNextTaskUnblockTime+0x3c>)
 8004ee6:	6013      	str	r3, [r2, #0]
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr
 8004ef4:	200006ec 	.word	0x200006ec
 8004ef8:	20000754 	.word	0x20000754

08004efc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f06:	4b29      	ldr	r3, [pc, #164]	; (8004fac <prvAddCurrentTaskToDelayedList+0xb0>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f0c:	4b28      	ldr	r3, [pc, #160]	; (8004fb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	3304      	adds	r3, #4
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7ff fae1 	bl	80044da <uxListRemove>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10b      	bne.n	8004f36 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004f1e:	4b24      	ldr	r3, [pc, #144]	; (8004fb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f24:	2201      	movs	r2, #1
 8004f26:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2a:	43da      	mvns	r2, r3
 8004f2c:	4b21      	ldr	r3, [pc, #132]	; (8004fb4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4013      	ands	r3, r2
 8004f32:	4a20      	ldr	r2, [pc, #128]	; (8004fb4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f34:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f3c:	d10a      	bne.n	8004f54 <prvAddCurrentTaskToDelayedList+0x58>
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d007      	beq.n	8004f54 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f44:	4b1a      	ldr	r3, [pc, #104]	; (8004fb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	3304      	adds	r3, #4
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	481a      	ldr	r0, [pc, #104]	; (8004fb8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004f4e:	f7ff fa67 	bl	8004420 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004f52:	e026      	b.n	8004fa2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4413      	add	r3, r2
 8004f5a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f5c:	4b14      	ldr	r3, [pc, #80]	; (8004fb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d209      	bcs.n	8004f80 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f6c:	4b13      	ldr	r3, [pc, #76]	; (8004fbc <prvAddCurrentTaskToDelayedList+0xc0>)
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	4b0f      	ldr	r3, [pc, #60]	; (8004fb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	3304      	adds	r3, #4
 8004f76:	4619      	mov	r1, r3
 8004f78:	4610      	mov	r0, r2
 8004f7a:	f7ff fa75 	bl	8004468 <vListInsert>
}
 8004f7e:	e010      	b.n	8004fa2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f80:	4b0f      	ldr	r3, [pc, #60]	; (8004fc0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	4b0a      	ldr	r3, [pc, #40]	; (8004fb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	3304      	adds	r3, #4
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	4610      	mov	r0, r2
 8004f8e:	f7ff fa6b 	bl	8004468 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004f92:	4b0c      	ldr	r3, [pc, #48]	; (8004fc4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d202      	bcs.n	8004fa2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004f9c:	4a09      	ldr	r2, [pc, #36]	; (8004fc4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	6013      	str	r3, [r2, #0]
}
 8004fa2:	bf00      	nop
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	20000738 	.word	0x20000738
 8004fb0:	20000634 	.word	0x20000634
 8004fb4:	2000073c 	.word	0x2000073c
 8004fb8:	20000720 	.word	0x20000720
 8004fbc:	200006f0 	.word	0x200006f0
 8004fc0:	200006ec 	.word	0x200006ec
 8004fc4:	20000754 	.word	0x20000754

08004fc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	3b04      	subs	r3, #4
 8004fd8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004fe0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	3b04      	subs	r3, #4
 8004fe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	f023 0201 	bic.w	r2, r3, #1
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	3b04      	subs	r3, #4
 8004ff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ff8:	4a0c      	ldr	r2, [pc, #48]	; (800502c <pxPortInitialiseStack+0x64>)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	3b14      	subs	r3, #20
 8005002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	3b04      	subs	r3, #4
 800500e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f06f 0202 	mvn.w	r2, #2
 8005016:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	3b20      	subs	r3, #32
 800501c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800501e:	68fb      	ldr	r3, [r7, #12]
}
 8005020:	4618      	mov	r0, r3
 8005022:	3714      	adds	r7, #20
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr
 800502c:	08005031 	.word	0x08005031

08005030 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005036:	2300      	movs	r3, #0
 8005038:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800503a:	4b12      	ldr	r3, [pc, #72]	; (8005084 <prvTaskExitError+0x54>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005042:	d00a      	beq.n	800505a <prvTaskExitError+0x2a>
	__asm volatile
 8005044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005048:	f383 8811 	msr	BASEPRI, r3
 800504c:	f3bf 8f6f 	isb	sy
 8005050:	f3bf 8f4f 	dsb	sy
 8005054:	60fb      	str	r3, [r7, #12]
}
 8005056:	bf00      	nop
 8005058:	e7fe      	b.n	8005058 <prvTaskExitError+0x28>
	__asm volatile
 800505a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505e:	f383 8811 	msr	BASEPRI, r3
 8005062:	f3bf 8f6f 	isb	sy
 8005066:	f3bf 8f4f 	dsb	sy
 800506a:	60bb      	str	r3, [r7, #8]
}
 800506c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800506e:	bf00      	nop
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d0fc      	beq.n	8005070 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005076:	bf00      	nop
 8005078:	bf00      	nop
 800507a:	3714      	adds	r7, #20
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	2000000c 	.word	0x2000000c
	...

08005090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005090:	4b07      	ldr	r3, [pc, #28]	; (80050b0 <pxCurrentTCBConst2>)
 8005092:	6819      	ldr	r1, [r3, #0]
 8005094:	6808      	ldr	r0, [r1, #0]
 8005096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800509a:	f380 8809 	msr	PSP, r0
 800509e:	f3bf 8f6f 	isb	sy
 80050a2:	f04f 0000 	mov.w	r0, #0
 80050a6:	f380 8811 	msr	BASEPRI, r0
 80050aa:	4770      	bx	lr
 80050ac:	f3af 8000 	nop.w

080050b0 <pxCurrentTCBConst2>:
 80050b0:	20000634 	.word	0x20000634
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80050b4:	bf00      	nop
 80050b6:	bf00      	nop

080050b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80050b8:	4808      	ldr	r0, [pc, #32]	; (80050dc <prvPortStartFirstTask+0x24>)
 80050ba:	6800      	ldr	r0, [r0, #0]
 80050bc:	6800      	ldr	r0, [r0, #0]
 80050be:	f380 8808 	msr	MSP, r0
 80050c2:	f04f 0000 	mov.w	r0, #0
 80050c6:	f380 8814 	msr	CONTROL, r0
 80050ca:	b662      	cpsie	i
 80050cc:	b661      	cpsie	f
 80050ce:	f3bf 8f4f 	dsb	sy
 80050d2:	f3bf 8f6f 	isb	sy
 80050d6:	df00      	svc	0
 80050d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80050da:	bf00      	nop
 80050dc:	e000ed08 	.word	0xe000ed08

080050e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80050e6:	4b46      	ldr	r3, [pc, #280]	; (8005200 <xPortStartScheduler+0x120>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a46      	ldr	r2, [pc, #280]	; (8005204 <xPortStartScheduler+0x124>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d10a      	bne.n	8005106 <xPortStartScheduler+0x26>
	__asm volatile
 80050f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f4:	f383 8811 	msr	BASEPRI, r3
 80050f8:	f3bf 8f6f 	isb	sy
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	613b      	str	r3, [r7, #16]
}
 8005102:	bf00      	nop
 8005104:	e7fe      	b.n	8005104 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005106:	4b3e      	ldr	r3, [pc, #248]	; (8005200 <xPortStartScheduler+0x120>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a3f      	ldr	r2, [pc, #252]	; (8005208 <xPortStartScheduler+0x128>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d10a      	bne.n	8005126 <xPortStartScheduler+0x46>
	__asm volatile
 8005110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005114:	f383 8811 	msr	BASEPRI, r3
 8005118:	f3bf 8f6f 	isb	sy
 800511c:	f3bf 8f4f 	dsb	sy
 8005120:	60fb      	str	r3, [r7, #12]
}
 8005122:	bf00      	nop
 8005124:	e7fe      	b.n	8005124 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005126:	4b39      	ldr	r3, [pc, #228]	; (800520c <xPortStartScheduler+0x12c>)
 8005128:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	b2db      	uxtb	r3, r3
 8005130:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	22ff      	movs	r2, #255	; 0xff
 8005136:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	b2db      	uxtb	r3, r3
 800513e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005140:	78fb      	ldrb	r3, [r7, #3]
 8005142:	b2db      	uxtb	r3, r3
 8005144:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005148:	b2da      	uxtb	r2, r3
 800514a:	4b31      	ldr	r3, [pc, #196]	; (8005210 <xPortStartScheduler+0x130>)
 800514c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800514e:	4b31      	ldr	r3, [pc, #196]	; (8005214 <xPortStartScheduler+0x134>)
 8005150:	2207      	movs	r2, #7
 8005152:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005154:	e009      	b.n	800516a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005156:	4b2f      	ldr	r3, [pc, #188]	; (8005214 <xPortStartScheduler+0x134>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	3b01      	subs	r3, #1
 800515c:	4a2d      	ldr	r2, [pc, #180]	; (8005214 <xPortStartScheduler+0x134>)
 800515e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005160:	78fb      	ldrb	r3, [r7, #3]
 8005162:	b2db      	uxtb	r3, r3
 8005164:	005b      	lsls	r3, r3, #1
 8005166:	b2db      	uxtb	r3, r3
 8005168:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800516a:	78fb      	ldrb	r3, [r7, #3]
 800516c:	b2db      	uxtb	r3, r3
 800516e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005172:	2b80      	cmp	r3, #128	; 0x80
 8005174:	d0ef      	beq.n	8005156 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005176:	4b27      	ldr	r3, [pc, #156]	; (8005214 <xPortStartScheduler+0x134>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f1c3 0307 	rsb	r3, r3, #7
 800517e:	2b04      	cmp	r3, #4
 8005180:	d00a      	beq.n	8005198 <xPortStartScheduler+0xb8>
	__asm volatile
 8005182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005186:	f383 8811 	msr	BASEPRI, r3
 800518a:	f3bf 8f6f 	isb	sy
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	60bb      	str	r3, [r7, #8]
}
 8005194:	bf00      	nop
 8005196:	e7fe      	b.n	8005196 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005198:	4b1e      	ldr	r3, [pc, #120]	; (8005214 <xPortStartScheduler+0x134>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	021b      	lsls	r3, r3, #8
 800519e:	4a1d      	ldr	r2, [pc, #116]	; (8005214 <xPortStartScheduler+0x134>)
 80051a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80051a2:	4b1c      	ldr	r3, [pc, #112]	; (8005214 <xPortStartScheduler+0x134>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051aa:	4a1a      	ldr	r2, [pc, #104]	; (8005214 <xPortStartScheduler+0x134>)
 80051ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	b2da      	uxtb	r2, r3
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80051b6:	4b18      	ldr	r3, [pc, #96]	; (8005218 <xPortStartScheduler+0x138>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a17      	ldr	r2, [pc, #92]	; (8005218 <xPortStartScheduler+0x138>)
 80051bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80051c2:	4b15      	ldr	r3, [pc, #84]	; (8005218 <xPortStartScheduler+0x138>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a14      	ldr	r2, [pc, #80]	; (8005218 <xPortStartScheduler+0x138>)
 80051c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80051cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80051ce:	f000 f8dd 	bl	800538c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80051d2:	4b12      	ldr	r3, [pc, #72]	; (800521c <xPortStartScheduler+0x13c>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80051d8:	f000 f8fc 	bl	80053d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80051dc:	4b10      	ldr	r3, [pc, #64]	; (8005220 <xPortStartScheduler+0x140>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a0f      	ldr	r2, [pc, #60]	; (8005220 <xPortStartScheduler+0x140>)
 80051e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80051e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80051e8:	f7ff ff66 	bl	80050b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80051ec:	f7ff fd4a 	bl	8004c84 <vTaskSwitchContext>
	prvTaskExitError();
 80051f0:	f7ff ff1e 	bl	8005030 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3718      	adds	r7, #24
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	e000ed00 	.word	0xe000ed00
 8005204:	410fc271 	.word	0x410fc271
 8005208:	410fc270 	.word	0x410fc270
 800520c:	e000e400 	.word	0xe000e400
 8005210:	20000760 	.word	0x20000760
 8005214:	20000764 	.word	0x20000764
 8005218:	e000ed20 	.word	0xe000ed20
 800521c:	2000000c 	.word	0x2000000c
 8005220:	e000ef34 	.word	0xe000ef34

08005224 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
	__asm volatile
 800522a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522e:	f383 8811 	msr	BASEPRI, r3
 8005232:	f3bf 8f6f 	isb	sy
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	607b      	str	r3, [r7, #4]
}
 800523c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800523e:	4b0f      	ldr	r3, [pc, #60]	; (800527c <vPortEnterCritical+0x58>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	3301      	adds	r3, #1
 8005244:	4a0d      	ldr	r2, [pc, #52]	; (800527c <vPortEnterCritical+0x58>)
 8005246:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005248:	4b0c      	ldr	r3, [pc, #48]	; (800527c <vPortEnterCritical+0x58>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d10f      	bne.n	8005270 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005250:	4b0b      	ldr	r3, [pc, #44]	; (8005280 <vPortEnterCritical+0x5c>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	b2db      	uxtb	r3, r3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00a      	beq.n	8005270 <vPortEnterCritical+0x4c>
	__asm volatile
 800525a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525e:	f383 8811 	msr	BASEPRI, r3
 8005262:	f3bf 8f6f 	isb	sy
 8005266:	f3bf 8f4f 	dsb	sy
 800526a:	603b      	str	r3, [r7, #0]
}
 800526c:	bf00      	nop
 800526e:	e7fe      	b.n	800526e <vPortEnterCritical+0x4a>
	}
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr
 800527c:	2000000c 	.word	0x2000000c
 8005280:	e000ed04 	.word	0xe000ed04

08005284 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800528a:	4b12      	ldr	r3, [pc, #72]	; (80052d4 <vPortExitCritical+0x50>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10a      	bne.n	80052a8 <vPortExitCritical+0x24>
	__asm volatile
 8005292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005296:	f383 8811 	msr	BASEPRI, r3
 800529a:	f3bf 8f6f 	isb	sy
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	607b      	str	r3, [r7, #4]
}
 80052a4:	bf00      	nop
 80052a6:	e7fe      	b.n	80052a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80052a8:	4b0a      	ldr	r3, [pc, #40]	; (80052d4 <vPortExitCritical+0x50>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	3b01      	subs	r3, #1
 80052ae:	4a09      	ldr	r2, [pc, #36]	; (80052d4 <vPortExitCritical+0x50>)
 80052b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80052b2:	4b08      	ldr	r3, [pc, #32]	; (80052d4 <vPortExitCritical+0x50>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d105      	bne.n	80052c6 <vPortExitCritical+0x42>
 80052ba:	2300      	movs	r3, #0
 80052bc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80052c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80052c6:	bf00      	nop
 80052c8:	370c      	adds	r7, #12
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	2000000c 	.word	0x2000000c
	...

080052e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80052e0:	f3ef 8009 	mrs	r0, PSP
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	4b15      	ldr	r3, [pc, #84]	; (8005340 <pxCurrentTCBConst>)
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	f01e 0f10 	tst.w	lr, #16
 80052f0:	bf08      	it	eq
 80052f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80052f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052fa:	6010      	str	r0, [r2, #0]
 80052fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005300:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005304:	f380 8811 	msr	BASEPRI, r0
 8005308:	f3bf 8f4f 	dsb	sy
 800530c:	f3bf 8f6f 	isb	sy
 8005310:	f7ff fcb8 	bl	8004c84 <vTaskSwitchContext>
 8005314:	f04f 0000 	mov.w	r0, #0
 8005318:	f380 8811 	msr	BASEPRI, r0
 800531c:	bc09      	pop	{r0, r3}
 800531e:	6819      	ldr	r1, [r3, #0]
 8005320:	6808      	ldr	r0, [r1, #0]
 8005322:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005326:	f01e 0f10 	tst.w	lr, #16
 800532a:	bf08      	it	eq
 800532c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005330:	f380 8809 	msr	PSP, r0
 8005334:	f3bf 8f6f 	isb	sy
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	f3af 8000 	nop.w

08005340 <pxCurrentTCBConst>:
 8005340:	20000634 	.word	0x20000634
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005344:	bf00      	nop
 8005346:	bf00      	nop

08005348 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
	__asm volatile
 800534e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	607b      	str	r3, [r7, #4]
}
 8005360:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005362:	f7ff fbd7 	bl	8004b14 <xTaskIncrementTick>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d003      	beq.n	8005374 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800536c:	4b06      	ldr	r3, [pc, #24]	; (8005388 <SysTick_Handler+0x40>)
 800536e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005372:	601a      	str	r2, [r3, #0]
 8005374:	2300      	movs	r3, #0
 8005376:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	f383 8811 	msr	BASEPRI, r3
}
 800537e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005380:	bf00      	nop
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	e000ed04 	.word	0xe000ed04

0800538c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800538c:	b480      	push	{r7}
 800538e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005390:	4b0b      	ldr	r3, [pc, #44]	; (80053c0 <vPortSetupTimerInterrupt+0x34>)
 8005392:	2200      	movs	r2, #0
 8005394:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005396:	4b0b      	ldr	r3, [pc, #44]	; (80053c4 <vPortSetupTimerInterrupt+0x38>)
 8005398:	2200      	movs	r2, #0
 800539a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800539c:	4b0a      	ldr	r3, [pc, #40]	; (80053c8 <vPortSetupTimerInterrupt+0x3c>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a0a      	ldr	r2, [pc, #40]	; (80053cc <vPortSetupTimerInterrupt+0x40>)
 80053a2:	fba2 2303 	umull	r2, r3, r2, r3
 80053a6:	099b      	lsrs	r3, r3, #6
 80053a8:	4a09      	ldr	r2, [pc, #36]	; (80053d0 <vPortSetupTimerInterrupt+0x44>)
 80053aa:	3b01      	subs	r3, #1
 80053ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80053ae:	4b04      	ldr	r3, [pc, #16]	; (80053c0 <vPortSetupTimerInterrupt+0x34>)
 80053b0:	2207      	movs	r2, #7
 80053b2:	601a      	str	r2, [r3, #0]
}
 80053b4:	bf00      	nop
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	e000e010 	.word	0xe000e010
 80053c4:	e000e018 	.word	0xe000e018
 80053c8:	20000000 	.word	0x20000000
 80053cc:	10624dd3 	.word	0x10624dd3
 80053d0:	e000e014 	.word	0xe000e014

080053d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80053d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80053e4 <vPortEnableVFP+0x10>
 80053d8:	6801      	ldr	r1, [r0, #0]
 80053da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80053de:	6001      	str	r1, [r0, #0]
 80053e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80053e2:	bf00      	nop
 80053e4:	e000ed88 	.word	0xe000ed88

080053e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b08a      	sub	sp, #40	; 0x28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80053f0:	2300      	movs	r3, #0
 80053f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80053f4:	f7ff fae4 	bl	80049c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80053f8:	4b5b      	ldr	r3, [pc, #364]	; (8005568 <pvPortMalloc+0x180>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d101      	bne.n	8005404 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005400:	f000 f920 	bl	8005644 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005404:	4b59      	ldr	r3, [pc, #356]	; (800556c <pvPortMalloc+0x184>)
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4013      	ands	r3, r2
 800540c:	2b00      	cmp	r3, #0
 800540e:	f040 8093 	bne.w	8005538 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d01d      	beq.n	8005454 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005418:	2208      	movs	r2, #8
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4413      	add	r3, r2
 800541e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f003 0307 	and.w	r3, r3, #7
 8005426:	2b00      	cmp	r3, #0
 8005428:	d014      	beq.n	8005454 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f023 0307 	bic.w	r3, r3, #7
 8005430:	3308      	adds	r3, #8
 8005432:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f003 0307 	and.w	r3, r3, #7
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00a      	beq.n	8005454 <pvPortMalloc+0x6c>
	__asm volatile
 800543e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005442:	f383 8811 	msr	BASEPRI, r3
 8005446:	f3bf 8f6f 	isb	sy
 800544a:	f3bf 8f4f 	dsb	sy
 800544e:	617b      	str	r3, [r7, #20]
}
 8005450:	bf00      	nop
 8005452:	e7fe      	b.n	8005452 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d06e      	beq.n	8005538 <pvPortMalloc+0x150>
 800545a:	4b45      	ldr	r3, [pc, #276]	; (8005570 <pvPortMalloc+0x188>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	429a      	cmp	r2, r3
 8005462:	d869      	bhi.n	8005538 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005464:	4b43      	ldr	r3, [pc, #268]	; (8005574 <pvPortMalloc+0x18c>)
 8005466:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005468:	4b42      	ldr	r3, [pc, #264]	; (8005574 <pvPortMalloc+0x18c>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800546e:	e004      	b.n	800547a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005472:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	429a      	cmp	r2, r3
 8005482:	d903      	bls.n	800548c <pvPortMalloc+0xa4>
 8005484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1f1      	bne.n	8005470 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800548c:	4b36      	ldr	r3, [pc, #216]	; (8005568 <pvPortMalloc+0x180>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005492:	429a      	cmp	r2, r3
 8005494:	d050      	beq.n	8005538 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2208      	movs	r2, #8
 800549c:	4413      	add	r3, r2
 800549e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	6a3b      	ldr	r3, [r7, #32]
 80054a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	1ad2      	subs	r2, r2, r3
 80054b0:	2308      	movs	r3, #8
 80054b2:	005b      	lsls	r3, r3, #1
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d91f      	bls.n	80054f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80054b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4413      	add	r3, r2
 80054be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	f003 0307 	and.w	r3, r3, #7
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00a      	beq.n	80054e0 <pvPortMalloc+0xf8>
	__asm volatile
 80054ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ce:	f383 8811 	msr	BASEPRI, r3
 80054d2:	f3bf 8f6f 	isb	sy
 80054d6:	f3bf 8f4f 	dsb	sy
 80054da:	613b      	str	r3, [r7, #16]
}
 80054dc:	bf00      	nop
 80054de:	e7fe      	b.n	80054de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	1ad2      	subs	r2, r2, r3
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80054ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80054f2:	69b8      	ldr	r0, [r7, #24]
 80054f4:	f000 f908 	bl	8005708 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80054f8:	4b1d      	ldr	r3, [pc, #116]	; (8005570 <pvPortMalloc+0x188>)
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	4a1b      	ldr	r2, [pc, #108]	; (8005570 <pvPortMalloc+0x188>)
 8005504:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005506:	4b1a      	ldr	r3, [pc, #104]	; (8005570 <pvPortMalloc+0x188>)
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	4b1b      	ldr	r3, [pc, #108]	; (8005578 <pvPortMalloc+0x190>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	429a      	cmp	r2, r3
 8005510:	d203      	bcs.n	800551a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005512:	4b17      	ldr	r3, [pc, #92]	; (8005570 <pvPortMalloc+0x188>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a18      	ldr	r2, [pc, #96]	; (8005578 <pvPortMalloc+0x190>)
 8005518:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	4b13      	ldr	r3, [pc, #76]	; (800556c <pvPortMalloc+0x184>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	431a      	orrs	r2, r3
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552a:	2200      	movs	r2, #0
 800552c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800552e:	4b13      	ldr	r3, [pc, #76]	; (800557c <pvPortMalloc+0x194>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	3301      	adds	r3, #1
 8005534:	4a11      	ldr	r2, [pc, #68]	; (800557c <pvPortMalloc+0x194>)
 8005536:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005538:	f7ff fa50 	bl	80049dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	f003 0307 	and.w	r3, r3, #7
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00a      	beq.n	800555c <pvPortMalloc+0x174>
	__asm volatile
 8005546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554a:	f383 8811 	msr	BASEPRI, r3
 800554e:	f3bf 8f6f 	isb	sy
 8005552:	f3bf 8f4f 	dsb	sy
 8005556:	60fb      	str	r3, [r7, #12]
}
 8005558:	bf00      	nop
 800555a:	e7fe      	b.n	800555a <pvPortMalloc+0x172>
	return pvReturn;
 800555c:	69fb      	ldr	r3, [r7, #28]
}
 800555e:	4618      	mov	r0, r3
 8005560:	3728      	adds	r7, #40	; 0x28
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	20004370 	.word	0x20004370
 800556c:	20004384 	.word	0x20004384
 8005570:	20004374 	.word	0x20004374
 8005574:	20004368 	.word	0x20004368
 8005578:	20004378 	.word	0x20004378
 800557c:	2000437c 	.word	0x2000437c

08005580 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d04d      	beq.n	800562e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005592:	2308      	movs	r3, #8
 8005594:	425b      	negs	r3, r3
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	4413      	add	r3, r2
 800559a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	4b24      	ldr	r3, [pc, #144]	; (8005638 <vPortFree+0xb8>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4013      	ands	r3, r2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10a      	bne.n	80055c4 <vPortFree+0x44>
	__asm volatile
 80055ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b2:	f383 8811 	msr	BASEPRI, r3
 80055b6:	f3bf 8f6f 	isb	sy
 80055ba:	f3bf 8f4f 	dsb	sy
 80055be:	60fb      	str	r3, [r7, #12]
}
 80055c0:	bf00      	nop
 80055c2:	e7fe      	b.n	80055c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00a      	beq.n	80055e2 <vPortFree+0x62>
	__asm volatile
 80055cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d0:	f383 8811 	msr	BASEPRI, r3
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	60bb      	str	r3, [r7, #8]
}
 80055de:	bf00      	nop
 80055e0:	e7fe      	b.n	80055e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	4b14      	ldr	r3, [pc, #80]	; (8005638 <vPortFree+0xb8>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4013      	ands	r3, r2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d01e      	beq.n	800562e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d11a      	bne.n	800562e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	4b0e      	ldr	r3, [pc, #56]	; (8005638 <vPortFree+0xb8>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	43db      	mvns	r3, r3
 8005602:	401a      	ands	r2, r3
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005608:	f7ff f9da 	bl	80049c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	685a      	ldr	r2, [r3, #4]
 8005610:	4b0a      	ldr	r3, [pc, #40]	; (800563c <vPortFree+0xbc>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4413      	add	r3, r2
 8005616:	4a09      	ldr	r2, [pc, #36]	; (800563c <vPortFree+0xbc>)
 8005618:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800561a:	6938      	ldr	r0, [r7, #16]
 800561c:	f000 f874 	bl	8005708 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005620:	4b07      	ldr	r3, [pc, #28]	; (8005640 <vPortFree+0xc0>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3301      	adds	r3, #1
 8005626:	4a06      	ldr	r2, [pc, #24]	; (8005640 <vPortFree+0xc0>)
 8005628:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800562a:	f7ff f9d7 	bl	80049dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800562e:	bf00      	nop
 8005630:	3718      	adds	r7, #24
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	20004384 	.word	0x20004384
 800563c:	20004374 	.word	0x20004374
 8005640:	20004380 	.word	0x20004380

08005644 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800564a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800564e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005650:	4b27      	ldr	r3, [pc, #156]	; (80056f0 <prvHeapInit+0xac>)
 8005652:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f003 0307 	and.w	r3, r3, #7
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00c      	beq.n	8005678 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	3307      	adds	r3, #7
 8005662:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f023 0307 	bic.w	r3, r3, #7
 800566a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	4a1f      	ldr	r2, [pc, #124]	; (80056f0 <prvHeapInit+0xac>)
 8005674:	4413      	add	r3, r2
 8005676:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800567c:	4a1d      	ldr	r2, [pc, #116]	; (80056f4 <prvHeapInit+0xb0>)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005682:	4b1c      	ldr	r3, [pc, #112]	; (80056f4 <prvHeapInit+0xb0>)
 8005684:	2200      	movs	r2, #0
 8005686:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	4413      	add	r3, r2
 800568e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005690:	2208      	movs	r2, #8
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	1a9b      	subs	r3, r3, r2
 8005696:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f023 0307 	bic.w	r3, r3, #7
 800569e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4a15      	ldr	r2, [pc, #84]	; (80056f8 <prvHeapInit+0xb4>)
 80056a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80056a6:	4b14      	ldr	r3, [pc, #80]	; (80056f8 <prvHeapInit+0xb4>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2200      	movs	r2, #0
 80056ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80056ae:	4b12      	ldr	r3, [pc, #72]	; (80056f8 <prvHeapInit+0xb4>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2200      	movs	r2, #0
 80056b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	1ad2      	subs	r2, r2, r3
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80056c4:	4b0c      	ldr	r3, [pc, #48]	; (80056f8 <prvHeapInit+0xb4>)
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	4a0a      	ldr	r2, [pc, #40]	; (80056fc <prvHeapInit+0xb8>)
 80056d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	4a09      	ldr	r2, [pc, #36]	; (8005700 <prvHeapInit+0xbc>)
 80056da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80056dc:	4b09      	ldr	r3, [pc, #36]	; (8005704 <prvHeapInit+0xc0>)
 80056de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80056e2:	601a      	str	r2, [r3, #0]
}
 80056e4:	bf00      	nop
 80056e6:	3714      	adds	r7, #20
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr
 80056f0:	20000768 	.word	0x20000768
 80056f4:	20004368 	.word	0x20004368
 80056f8:	20004370 	.word	0x20004370
 80056fc:	20004378 	.word	0x20004378
 8005700:	20004374 	.word	0x20004374
 8005704:	20004384 	.word	0x20004384

08005708 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005710:	4b28      	ldr	r3, [pc, #160]	; (80057b4 <prvInsertBlockIntoFreeList+0xac>)
 8005712:	60fb      	str	r3, [r7, #12]
 8005714:	e002      	b.n	800571c <prvInsertBlockIntoFreeList+0x14>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	60fb      	str	r3, [r7, #12]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	429a      	cmp	r2, r3
 8005724:	d8f7      	bhi.n	8005716 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	68ba      	ldr	r2, [r7, #8]
 8005730:	4413      	add	r3, r2
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	429a      	cmp	r2, r3
 8005736:	d108      	bne.n	800574a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	441a      	add	r2, r3
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	68ba      	ldr	r2, [r7, #8]
 8005754:	441a      	add	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	429a      	cmp	r2, r3
 800575c:	d118      	bne.n	8005790 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	4b15      	ldr	r3, [pc, #84]	; (80057b8 <prvInsertBlockIntoFreeList+0xb0>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	429a      	cmp	r2, r3
 8005768:	d00d      	beq.n	8005786 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	441a      	add	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	601a      	str	r2, [r3, #0]
 8005784:	e008      	b.n	8005798 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005786:	4b0c      	ldr	r3, [pc, #48]	; (80057b8 <prvInsertBlockIntoFreeList+0xb0>)
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	601a      	str	r2, [r3, #0]
 800578e:	e003      	b.n	8005798 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	429a      	cmp	r2, r3
 800579e:	d002      	beq.n	80057a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057a6:	bf00      	nop
 80057a8:	3714      	adds	r7, #20
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	20004368 	.word	0x20004368
 80057b8:	20004370 	.word	0x20004370

080057bc <__cvt>:
 80057bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057c0:	ec55 4b10 	vmov	r4, r5, d0
 80057c4:	2d00      	cmp	r5, #0
 80057c6:	460e      	mov	r6, r1
 80057c8:	4619      	mov	r1, r3
 80057ca:	462b      	mov	r3, r5
 80057cc:	bfbb      	ittet	lt
 80057ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80057d2:	461d      	movlt	r5, r3
 80057d4:	2300      	movge	r3, #0
 80057d6:	232d      	movlt	r3, #45	; 0x2d
 80057d8:	700b      	strb	r3, [r1, #0]
 80057da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80057e0:	4691      	mov	r9, r2
 80057e2:	f023 0820 	bic.w	r8, r3, #32
 80057e6:	bfbc      	itt	lt
 80057e8:	4622      	movlt	r2, r4
 80057ea:	4614      	movlt	r4, r2
 80057ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80057f0:	d005      	beq.n	80057fe <__cvt+0x42>
 80057f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80057f6:	d100      	bne.n	80057fa <__cvt+0x3e>
 80057f8:	3601      	adds	r6, #1
 80057fa:	2102      	movs	r1, #2
 80057fc:	e000      	b.n	8005800 <__cvt+0x44>
 80057fe:	2103      	movs	r1, #3
 8005800:	ab03      	add	r3, sp, #12
 8005802:	9301      	str	r3, [sp, #4]
 8005804:	ab02      	add	r3, sp, #8
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	ec45 4b10 	vmov	d0, r4, r5
 800580c:	4653      	mov	r3, sl
 800580e:	4632      	mov	r2, r6
 8005810:	f000 feae 	bl	8006570 <_dtoa_r>
 8005814:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005818:	4607      	mov	r7, r0
 800581a:	d102      	bne.n	8005822 <__cvt+0x66>
 800581c:	f019 0f01 	tst.w	r9, #1
 8005820:	d022      	beq.n	8005868 <__cvt+0xac>
 8005822:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005826:	eb07 0906 	add.w	r9, r7, r6
 800582a:	d110      	bne.n	800584e <__cvt+0x92>
 800582c:	783b      	ldrb	r3, [r7, #0]
 800582e:	2b30      	cmp	r3, #48	; 0x30
 8005830:	d10a      	bne.n	8005848 <__cvt+0x8c>
 8005832:	2200      	movs	r2, #0
 8005834:	2300      	movs	r3, #0
 8005836:	4620      	mov	r0, r4
 8005838:	4629      	mov	r1, r5
 800583a:	f7fb f945 	bl	8000ac8 <__aeabi_dcmpeq>
 800583e:	b918      	cbnz	r0, 8005848 <__cvt+0x8c>
 8005840:	f1c6 0601 	rsb	r6, r6, #1
 8005844:	f8ca 6000 	str.w	r6, [sl]
 8005848:	f8da 3000 	ldr.w	r3, [sl]
 800584c:	4499      	add	r9, r3
 800584e:	2200      	movs	r2, #0
 8005850:	2300      	movs	r3, #0
 8005852:	4620      	mov	r0, r4
 8005854:	4629      	mov	r1, r5
 8005856:	f7fb f937 	bl	8000ac8 <__aeabi_dcmpeq>
 800585a:	b108      	cbz	r0, 8005860 <__cvt+0xa4>
 800585c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005860:	2230      	movs	r2, #48	; 0x30
 8005862:	9b03      	ldr	r3, [sp, #12]
 8005864:	454b      	cmp	r3, r9
 8005866:	d307      	bcc.n	8005878 <__cvt+0xbc>
 8005868:	9b03      	ldr	r3, [sp, #12]
 800586a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800586c:	1bdb      	subs	r3, r3, r7
 800586e:	4638      	mov	r0, r7
 8005870:	6013      	str	r3, [r2, #0]
 8005872:	b004      	add	sp, #16
 8005874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005878:	1c59      	adds	r1, r3, #1
 800587a:	9103      	str	r1, [sp, #12]
 800587c:	701a      	strb	r2, [r3, #0]
 800587e:	e7f0      	b.n	8005862 <__cvt+0xa6>

08005880 <__exponent>:
 8005880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005882:	4603      	mov	r3, r0
 8005884:	2900      	cmp	r1, #0
 8005886:	bfb8      	it	lt
 8005888:	4249      	neglt	r1, r1
 800588a:	f803 2b02 	strb.w	r2, [r3], #2
 800588e:	bfb4      	ite	lt
 8005890:	222d      	movlt	r2, #45	; 0x2d
 8005892:	222b      	movge	r2, #43	; 0x2b
 8005894:	2909      	cmp	r1, #9
 8005896:	7042      	strb	r2, [r0, #1]
 8005898:	dd2a      	ble.n	80058f0 <__exponent+0x70>
 800589a:	f10d 0207 	add.w	r2, sp, #7
 800589e:	4617      	mov	r7, r2
 80058a0:	260a      	movs	r6, #10
 80058a2:	4694      	mov	ip, r2
 80058a4:	fb91 f5f6 	sdiv	r5, r1, r6
 80058a8:	fb06 1415 	mls	r4, r6, r5, r1
 80058ac:	3430      	adds	r4, #48	; 0x30
 80058ae:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80058b2:	460c      	mov	r4, r1
 80058b4:	2c63      	cmp	r4, #99	; 0x63
 80058b6:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80058ba:	4629      	mov	r1, r5
 80058bc:	dcf1      	bgt.n	80058a2 <__exponent+0x22>
 80058be:	3130      	adds	r1, #48	; 0x30
 80058c0:	f1ac 0402 	sub.w	r4, ip, #2
 80058c4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80058c8:	1c41      	adds	r1, r0, #1
 80058ca:	4622      	mov	r2, r4
 80058cc:	42ba      	cmp	r2, r7
 80058ce:	d30a      	bcc.n	80058e6 <__exponent+0x66>
 80058d0:	f10d 0209 	add.w	r2, sp, #9
 80058d4:	eba2 020c 	sub.w	r2, r2, ip
 80058d8:	42bc      	cmp	r4, r7
 80058da:	bf88      	it	hi
 80058dc:	2200      	movhi	r2, #0
 80058de:	4413      	add	r3, r2
 80058e0:	1a18      	subs	r0, r3, r0
 80058e2:	b003      	add	sp, #12
 80058e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058e6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80058ea:	f801 5f01 	strb.w	r5, [r1, #1]!
 80058ee:	e7ed      	b.n	80058cc <__exponent+0x4c>
 80058f0:	2330      	movs	r3, #48	; 0x30
 80058f2:	3130      	adds	r1, #48	; 0x30
 80058f4:	7083      	strb	r3, [r0, #2]
 80058f6:	70c1      	strb	r1, [r0, #3]
 80058f8:	1d03      	adds	r3, r0, #4
 80058fa:	e7f1      	b.n	80058e0 <__exponent+0x60>

080058fc <_printf_float>:
 80058fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005900:	ed2d 8b02 	vpush	{d8}
 8005904:	b08d      	sub	sp, #52	; 0x34
 8005906:	460c      	mov	r4, r1
 8005908:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800590c:	4616      	mov	r6, r2
 800590e:	461f      	mov	r7, r3
 8005910:	4605      	mov	r5, r0
 8005912:	f000 fcc7 	bl	80062a4 <_localeconv_r>
 8005916:	f8d0 a000 	ldr.w	sl, [r0]
 800591a:	4650      	mov	r0, sl
 800591c:	f7fa fca8 	bl	8000270 <strlen>
 8005920:	2300      	movs	r3, #0
 8005922:	930a      	str	r3, [sp, #40]	; 0x28
 8005924:	6823      	ldr	r3, [r4, #0]
 8005926:	9305      	str	r3, [sp, #20]
 8005928:	f8d8 3000 	ldr.w	r3, [r8]
 800592c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005930:	3307      	adds	r3, #7
 8005932:	f023 0307 	bic.w	r3, r3, #7
 8005936:	f103 0208 	add.w	r2, r3, #8
 800593a:	f8c8 2000 	str.w	r2, [r8]
 800593e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005942:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005946:	9307      	str	r3, [sp, #28]
 8005948:	f8cd 8018 	str.w	r8, [sp, #24]
 800594c:	ee08 0a10 	vmov	s16, r0
 8005950:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005954:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005958:	4b9e      	ldr	r3, [pc, #632]	; (8005bd4 <_printf_float+0x2d8>)
 800595a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800595e:	f7fb f8e5 	bl	8000b2c <__aeabi_dcmpun>
 8005962:	bb88      	cbnz	r0, 80059c8 <_printf_float+0xcc>
 8005964:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005968:	4b9a      	ldr	r3, [pc, #616]	; (8005bd4 <_printf_float+0x2d8>)
 800596a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800596e:	f7fb f8bf 	bl	8000af0 <__aeabi_dcmple>
 8005972:	bb48      	cbnz	r0, 80059c8 <_printf_float+0xcc>
 8005974:	2200      	movs	r2, #0
 8005976:	2300      	movs	r3, #0
 8005978:	4640      	mov	r0, r8
 800597a:	4649      	mov	r1, r9
 800597c:	f7fb f8ae 	bl	8000adc <__aeabi_dcmplt>
 8005980:	b110      	cbz	r0, 8005988 <_printf_float+0x8c>
 8005982:	232d      	movs	r3, #45	; 0x2d
 8005984:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005988:	4a93      	ldr	r2, [pc, #588]	; (8005bd8 <_printf_float+0x2dc>)
 800598a:	4b94      	ldr	r3, [pc, #592]	; (8005bdc <_printf_float+0x2e0>)
 800598c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005990:	bf94      	ite	ls
 8005992:	4690      	movls	r8, r2
 8005994:	4698      	movhi	r8, r3
 8005996:	2303      	movs	r3, #3
 8005998:	6123      	str	r3, [r4, #16]
 800599a:	9b05      	ldr	r3, [sp, #20]
 800599c:	f023 0304 	bic.w	r3, r3, #4
 80059a0:	6023      	str	r3, [r4, #0]
 80059a2:	f04f 0900 	mov.w	r9, #0
 80059a6:	9700      	str	r7, [sp, #0]
 80059a8:	4633      	mov	r3, r6
 80059aa:	aa0b      	add	r2, sp, #44	; 0x2c
 80059ac:	4621      	mov	r1, r4
 80059ae:	4628      	mov	r0, r5
 80059b0:	f000 f9da 	bl	8005d68 <_printf_common>
 80059b4:	3001      	adds	r0, #1
 80059b6:	f040 8090 	bne.w	8005ada <_printf_float+0x1de>
 80059ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059be:	b00d      	add	sp, #52	; 0x34
 80059c0:	ecbd 8b02 	vpop	{d8}
 80059c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059c8:	4642      	mov	r2, r8
 80059ca:	464b      	mov	r3, r9
 80059cc:	4640      	mov	r0, r8
 80059ce:	4649      	mov	r1, r9
 80059d0:	f7fb f8ac 	bl	8000b2c <__aeabi_dcmpun>
 80059d4:	b140      	cbz	r0, 80059e8 <_printf_float+0xec>
 80059d6:	464b      	mov	r3, r9
 80059d8:	2b00      	cmp	r3, #0
 80059da:	bfbc      	itt	lt
 80059dc:	232d      	movlt	r3, #45	; 0x2d
 80059de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80059e2:	4a7f      	ldr	r2, [pc, #508]	; (8005be0 <_printf_float+0x2e4>)
 80059e4:	4b7f      	ldr	r3, [pc, #508]	; (8005be4 <_printf_float+0x2e8>)
 80059e6:	e7d1      	b.n	800598c <_printf_float+0x90>
 80059e8:	6863      	ldr	r3, [r4, #4]
 80059ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80059ee:	9206      	str	r2, [sp, #24]
 80059f0:	1c5a      	adds	r2, r3, #1
 80059f2:	d13f      	bne.n	8005a74 <_printf_float+0x178>
 80059f4:	2306      	movs	r3, #6
 80059f6:	6063      	str	r3, [r4, #4]
 80059f8:	9b05      	ldr	r3, [sp, #20]
 80059fa:	6861      	ldr	r1, [r4, #4]
 80059fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005a00:	2300      	movs	r3, #0
 8005a02:	9303      	str	r3, [sp, #12]
 8005a04:	ab0a      	add	r3, sp, #40	; 0x28
 8005a06:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005a0a:	ab09      	add	r3, sp, #36	; 0x24
 8005a0c:	ec49 8b10 	vmov	d0, r8, r9
 8005a10:	9300      	str	r3, [sp, #0]
 8005a12:	6022      	str	r2, [r4, #0]
 8005a14:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005a18:	4628      	mov	r0, r5
 8005a1a:	f7ff fecf 	bl	80057bc <__cvt>
 8005a1e:	9b06      	ldr	r3, [sp, #24]
 8005a20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a22:	2b47      	cmp	r3, #71	; 0x47
 8005a24:	4680      	mov	r8, r0
 8005a26:	d108      	bne.n	8005a3a <_printf_float+0x13e>
 8005a28:	1cc8      	adds	r0, r1, #3
 8005a2a:	db02      	blt.n	8005a32 <_printf_float+0x136>
 8005a2c:	6863      	ldr	r3, [r4, #4]
 8005a2e:	4299      	cmp	r1, r3
 8005a30:	dd41      	ble.n	8005ab6 <_printf_float+0x1ba>
 8005a32:	f1ab 0302 	sub.w	r3, fp, #2
 8005a36:	fa5f fb83 	uxtb.w	fp, r3
 8005a3a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005a3e:	d820      	bhi.n	8005a82 <_printf_float+0x186>
 8005a40:	3901      	subs	r1, #1
 8005a42:	465a      	mov	r2, fp
 8005a44:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005a48:	9109      	str	r1, [sp, #36]	; 0x24
 8005a4a:	f7ff ff19 	bl	8005880 <__exponent>
 8005a4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a50:	1813      	adds	r3, r2, r0
 8005a52:	2a01      	cmp	r2, #1
 8005a54:	4681      	mov	r9, r0
 8005a56:	6123      	str	r3, [r4, #16]
 8005a58:	dc02      	bgt.n	8005a60 <_printf_float+0x164>
 8005a5a:	6822      	ldr	r2, [r4, #0]
 8005a5c:	07d2      	lsls	r2, r2, #31
 8005a5e:	d501      	bpl.n	8005a64 <_printf_float+0x168>
 8005a60:	3301      	adds	r3, #1
 8005a62:	6123      	str	r3, [r4, #16]
 8005a64:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d09c      	beq.n	80059a6 <_printf_float+0xaa>
 8005a6c:	232d      	movs	r3, #45	; 0x2d
 8005a6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a72:	e798      	b.n	80059a6 <_printf_float+0xaa>
 8005a74:	9a06      	ldr	r2, [sp, #24]
 8005a76:	2a47      	cmp	r2, #71	; 0x47
 8005a78:	d1be      	bne.n	80059f8 <_printf_float+0xfc>
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1bc      	bne.n	80059f8 <_printf_float+0xfc>
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e7b9      	b.n	80059f6 <_printf_float+0xfa>
 8005a82:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005a86:	d118      	bne.n	8005aba <_printf_float+0x1be>
 8005a88:	2900      	cmp	r1, #0
 8005a8a:	6863      	ldr	r3, [r4, #4]
 8005a8c:	dd0b      	ble.n	8005aa6 <_printf_float+0x1aa>
 8005a8e:	6121      	str	r1, [r4, #16]
 8005a90:	b913      	cbnz	r3, 8005a98 <_printf_float+0x19c>
 8005a92:	6822      	ldr	r2, [r4, #0]
 8005a94:	07d0      	lsls	r0, r2, #31
 8005a96:	d502      	bpl.n	8005a9e <_printf_float+0x1a2>
 8005a98:	3301      	adds	r3, #1
 8005a9a:	440b      	add	r3, r1
 8005a9c:	6123      	str	r3, [r4, #16]
 8005a9e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005aa0:	f04f 0900 	mov.w	r9, #0
 8005aa4:	e7de      	b.n	8005a64 <_printf_float+0x168>
 8005aa6:	b913      	cbnz	r3, 8005aae <_printf_float+0x1b2>
 8005aa8:	6822      	ldr	r2, [r4, #0]
 8005aaa:	07d2      	lsls	r2, r2, #31
 8005aac:	d501      	bpl.n	8005ab2 <_printf_float+0x1b6>
 8005aae:	3302      	adds	r3, #2
 8005ab0:	e7f4      	b.n	8005a9c <_printf_float+0x1a0>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e7f2      	b.n	8005a9c <_printf_float+0x1a0>
 8005ab6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005aba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005abc:	4299      	cmp	r1, r3
 8005abe:	db05      	blt.n	8005acc <_printf_float+0x1d0>
 8005ac0:	6823      	ldr	r3, [r4, #0]
 8005ac2:	6121      	str	r1, [r4, #16]
 8005ac4:	07d8      	lsls	r0, r3, #31
 8005ac6:	d5ea      	bpl.n	8005a9e <_printf_float+0x1a2>
 8005ac8:	1c4b      	adds	r3, r1, #1
 8005aca:	e7e7      	b.n	8005a9c <_printf_float+0x1a0>
 8005acc:	2900      	cmp	r1, #0
 8005ace:	bfd4      	ite	le
 8005ad0:	f1c1 0202 	rsble	r2, r1, #2
 8005ad4:	2201      	movgt	r2, #1
 8005ad6:	4413      	add	r3, r2
 8005ad8:	e7e0      	b.n	8005a9c <_printf_float+0x1a0>
 8005ada:	6823      	ldr	r3, [r4, #0]
 8005adc:	055a      	lsls	r2, r3, #21
 8005ade:	d407      	bmi.n	8005af0 <_printf_float+0x1f4>
 8005ae0:	6923      	ldr	r3, [r4, #16]
 8005ae2:	4642      	mov	r2, r8
 8005ae4:	4631      	mov	r1, r6
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	47b8      	blx	r7
 8005aea:	3001      	adds	r0, #1
 8005aec:	d12c      	bne.n	8005b48 <_printf_float+0x24c>
 8005aee:	e764      	b.n	80059ba <_printf_float+0xbe>
 8005af0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005af4:	f240 80e0 	bls.w	8005cb8 <_printf_float+0x3bc>
 8005af8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005afc:	2200      	movs	r2, #0
 8005afe:	2300      	movs	r3, #0
 8005b00:	f7fa ffe2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b04:	2800      	cmp	r0, #0
 8005b06:	d034      	beq.n	8005b72 <_printf_float+0x276>
 8005b08:	4a37      	ldr	r2, [pc, #220]	; (8005be8 <_printf_float+0x2ec>)
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	4631      	mov	r1, r6
 8005b0e:	4628      	mov	r0, r5
 8005b10:	47b8      	blx	r7
 8005b12:	3001      	adds	r0, #1
 8005b14:	f43f af51 	beq.w	80059ba <_printf_float+0xbe>
 8005b18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	db02      	blt.n	8005b26 <_printf_float+0x22a>
 8005b20:	6823      	ldr	r3, [r4, #0]
 8005b22:	07d8      	lsls	r0, r3, #31
 8005b24:	d510      	bpl.n	8005b48 <_printf_float+0x24c>
 8005b26:	ee18 3a10 	vmov	r3, s16
 8005b2a:	4652      	mov	r2, sl
 8005b2c:	4631      	mov	r1, r6
 8005b2e:	4628      	mov	r0, r5
 8005b30:	47b8      	blx	r7
 8005b32:	3001      	adds	r0, #1
 8005b34:	f43f af41 	beq.w	80059ba <_printf_float+0xbe>
 8005b38:	f04f 0800 	mov.w	r8, #0
 8005b3c:	f104 091a 	add.w	r9, r4, #26
 8005b40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b42:	3b01      	subs	r3, #1
 8005b44:	4543      	cmp	r3, r8
 8005b46:	dc09      	bgt.n	8005b5c <_printf_float+0x260>
 8005b48:	6823      	ldr	r3, [r4, #0]
 8005b4a:	079b      	lsls	r3, r3, #30
 8005b4c:	f100 8107 	bmi.w	8005d5e <_printf_float+0x462>
 8005b50:	68e0      	ldr	r0, [r4, #12]
 8005b52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b54:	4298      	cmp	r0, r3
 8005b56:	bfb8      	it	lt
 8005b58:	4618      	movlt	r0, r3
 8005b5a:	e730      	b.n	80059be <_printf_float+0xc2>
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	464a      	mov	r2, r9
 8005b60:	4631      	mov	r1, r6
 8005b62:	4628      	mov	r0, r5
 8005b64:	47b8      	blx	r7
 8005b66:	3001      	adds	r0, #1
 8005b68:	f43f af27 	beq.w	80059ba <_printf_float+0xbe>
 8005b6c:	f108 0801 	add.w	r8, r8, #1
 8005b70:	e7e6      	b.n	8005b40 <_printf_float+0x244>
 8005b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	dc39      	bgt.n	8005bec <_printf_float+0x2f0>
 8005b78:	4a1b      	ldr	r2, [pc, #108]	; (8005be8 <_printf_float+0x2ec>)
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	4631      	mov	r1, r6
 8005b7e:	4628      	mov	r0, r5
 8005b80:	47b8      	blx	r7
 8005b82:	3001      	adds	r0, #1
 8005b84:	f43f af19 	beq.w	80059ba <_printf_float+0xbe>
 8005b88:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	d102      	bne.n	8005b96 <_printf_float+0x29a>
 8005b90:	6823      	ldr	r3, [r4, #0]
 8005b92:	07d9      	lsls	r1, r3, #31
 8005b94:	d5d8      	bpl.n	8005b48 <_printf_float+0x24c>
 8005b96:	ee18 3a10 	vmov	r3, s16
 8005b9a:	4652      	mov	r2, sl
 8005b9c:	4631      	mov	r1, r6
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	47b8      	blx	r7
 8005ba2:	3001      	adds	r0, #1
 8005ba4:	f43f af09 	beq.w	80059ba <_printf_float+0xbe>
 8005ba8:	f04f 0900 	mov.w	r9, #0
 8005bac:	f104 0a1a 	add.w	sl, r4, #26
 8005bb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bb2:	425b      	negs	r3, r3
 8005bb4:	454b      	cmp	r3, r9
 8005bb6:	dc01      	bgt.n	8005bbc <_printf_float+0x2c0>
 8005bb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bba:	e792      	b.n	8005ae2 <_printf_float+0x1e6>
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	4652      	mov	r2, sl
 8005bc0:	4631      	mov	r1, r6
 8005bc2:	4628      	mov	r0, r5
 8005bc4:	47b8      	blx	r7
 8005bc6:	3001      	adds	r0, #1
 8005bc8:	f43f aef7 	beq.w	80059ba <_printf_float+0xbe>
 8005bcc:	f109 0901 	add.w	r9, r9, #1
 8005bd0:	e7ee      	b.n	8005bb0 <_printf_float+0x2b4>
 8005bd2:	bf00      	nop
 8005bd4:	7fefffff 	.word	0x7fefffff
 8005bd8:	08008290 	.word	0x08008290
 8005bdc:	08008294 	.word	0x08008294
 8005be0:	08008298 	.word	0x08008298
 8005be4:	0800829c 	.word	0x0800829c
 8005be8:	080082a0 	.word	0x080082a0
 8005bec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	bfa8      	it	ge
 8005bf4:	461a      	movge	r2, r3
 8005bf6:	2a00      	cmp	r2, #0
 8005bf8:	4691      	mov	r9, r2
 8005bfa:	dc37      	bgt.n	8005c6c <_printf_float+0x370>
 8005bfc:	f04f 0b00 	mov.w	fp, #0
 8005c00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c04:	f104 021a 	add.w	r2, r4, #26
 8005c08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c0a:	9305      	str	r3, [sp, #20]
 8005c0c:	eba3 0309 	sub.w	r3, r3, r9
 8005c10:	455b      	cmp	r3, fp
 8005c12:	dc33      	bgt.n	8005c7c <_printf_float+0x380>
 8005c14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	db3b      	blt.n	8005c94 <_printf_float+0x398>
 8005c1c:	6823      	ldr	r3, [r4, #0]
 8005c1e:	07da      	lsls	r2, r3, #31
 8005c20:	d438      	bmi.n	8005c94 <_printf_float+0x398>
 8005c22:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005c26:	eba2 0903 	sub.w	r9, r2, r3
 8005c2a:	9b05      	ldr	r3, [sp, #20]
 8005c2c:	1ad2      	subs	r2, r2, r3
 8005c2e:	4591      	cmp	r9, r2
 8005c30:	bfa8      	it	ge
 8005c32:	4691      	movge	r9, r2
 8005c34:	f1b9 0f00 	cmp.w	r9, #0
 8005c38:	dc35      	bgt.n	8005ca6 <_printf_float+0x3aa>
 8005c3a:	f04f 0800 	mov.w	r8, #0
 8005c3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c42:	f104 0a1a 	add.w	sl, r4, #26
 8005c46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c4a:	1a9b      	subs	r3, r3, r2
 8005c4c:	eba3 0309 	sub.w	r3, r3, r9
 8005c50:	4543      	cmp	r3, r8
 8005c52:	f77f af79 	ble.w	8005b48 <_printf_float+0x24c>
 8005c56:	2301      	movs	r3, #1
 8005c58:	4652      	mov	r2, sl
 8005c5a:	4631      	mov	r1, r6
 8005c5c:	4628      	mov	r0, r5
 8005c5e:	47b8      	blx	r7
 8005c60:	3001      	adds	r0, #1
 8005c62:	f43f aeaa 	beq.w	80059ba <_printf_float+0xbe>
 8005c66:	f108 0801 	add.w	r8, r8, #1
 8005c6a:	e7ec      	b.n	8005c46 <_printf_float+0x34a>
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	4631      	mov	r1, r6
 8005c70:	4642      	mov	r2, r8
 8005c72:	4628      	mov	r0, r5
 8005c74:	47b8      	blx	r7
 8005c76:	3001      	adds	r0, #1
 8005c78:	d1c0      	bne.n	8005bfc <_printf_float+0x300>
 8005c7a:	e69e      	b.n	80059ba <_printf_float+0xbe>
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	4631      	mov	r1, r6
 8005c80:	4628      	mov	r0, r5
 8005c82:	9205      	str	r2, [sp, #20]
 8005c84:	47b8      	blx	r7
 8005c86:	3001      	adds	r0, #1
 8005c88:	f43f ae97 	beq.w	80059ba <_printf_float+0xbe>
 8005c8c:	9a05      	ldr	r2, [sp, #20]
 8005c8e:	f10b 0b01 	add.w	fp, fp, #1
 8005c92:	e7b9      	b.n	8005c08 <_printf_float+0x30c>
 8005c94:	ee18 3a10 	vmov	r3, s16
 8005c98:	4652      	mov	r2, sl
 8005c9a:	4631      	mov	r1, r6
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	47b8      	blx	r7
 8005ca0:	3001      	adds	r0, #1
 8005ca2:	d1be      	bne.n	8005c22 <_printf_float+0x326>
 8005ca4:	e689      	b.n	80059ba <_printf_float+0xbe>
 8005ca6:	9a05      	ldr	r2, [sp, #20]
 8005ca8:	464b      	mov	r3, r9
 8005caa:	4442      	add	r2, r8
 8005cac:	4631      	mov	r1, r6
 8005cae:	4628      	mov	r0, r5
 8005cb0:	47b8      	blx	r7
 8005cb2:	3001      	adds	r0, #1
 8005cb4:	d1c1      	bne.n	8005c3a <_printf_float+0x33e>
 8005cb6:	e680      	b.n	80059ba <_printf_float+0xbe>
 8005cb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cba:	2a01      	cmp	r2, #1
 8005cbc:	dc01      	bgt.n	8005cc2 <_printf_float+0x3c6>
 8005cbe:	07db      	lsls	r3, r3, #31
 8005cc0:	d53a      	bpl.n	8005d38 <_printf_float+0x43c>
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	4642      	mov	r2, r8
 8005cc6:	4631      	mov	r1, r6
 8005cc8:	4628      	mov	r0, r5
 8005cca:	47b8      	blx	r7
 8005ccc:	3001      	adds	r0, #1
 8005cce:	f43f ae74 	beq.w	80059ba <_printf_float+0xbe>
 8005cd2:	ee18 3a10 	vmov	r3, s16
 8005cd6:	4652      	mov	r2, sl
 8005cd8:	4631      	mov	r1, r6
 8005cda:	4628      	mov	r0, r5
 8005cdc:	47b8      	blx	r7
 8005cde:	3001      	adds	r0, #1
 8005ce0:	f43f ae6b 	beq.w	80059ba <_printf_float+0xbe>
 8005ce4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ce8:	2200      	movs	r2, #0
 8005cea:	2300      	movs	r3, #0
 8005cec:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005cf0:	f7fa feea 	bl	8000ac8 <__aeabi_dcmpeq>
 8005cf4:	b9d8      	cbnz	r0, 8005d2e <_printf_float+0x432>
 8005cf6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8005cfa:	f108 0201 	add.w	r2, r8, #1
 8005cfe:	4631      	mov	r1, r6
 8005d00:	4628      	mov	r0, r5
 8005d02:	47b8      	blx	r7
 8005d04:	3001      	adds	r0, #1
 8005d06:	d10e      	bne.n	8005d26 <_printf_float+0x42a>
 8005d08:	e657      	b.n	80059ba <_printf_float+0xbe>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	4652      	mov	r2, sl
 8005d0e:	4631      	mov	r1, r6
 8005d10:	4628      	mov	r0, r5
 8005d12:	47b8      	blx	r7
 8005d14:	3001      	adds	r0, #1
 8005d16:	f43f ae50 	beq.w	80059ba <_printf_float+0xbe>
 8005d1a:	f108 0801 	add.w	r8, r8, #1
 8005d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d20:	3b01      	subs	r3, #1
 8005d22:	4543      	cmp	r3, r8
 8005d24:	dcf1      	bgt.n	8005d0a <_printf_float+0x40e>
 8005d26:	464b      	mov	r3, r9
 8005d28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005d2c:	e6da      	b.n	8005ae4 <_printf_float+0x1e8>
 8005d2e:	f04f 0800 	mov.w	r8, #0
 8005d32:	f104 0a1a 	add.w	sl, r4, #26
 8005d36:	e7f2      	b.n	8005d1e <_printf_float+0x422>
 8005d38:	2301      	movs	r3, #1
 8005d3a:	4642      	mov	r2, r8
 8005d3c:	e7df      	b.n	8005cfe <_printf_float+0x402>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	464a      	mov	r2, r9
 8005d42:	4631      	mov	r1, r6
 8005d44:	4628      	mov	r0, r5
 8005d46:	47b8      	blx	r7
 8005d48:	3001      	adds	r0, #1
 8005d4a:	f43f ae36 	beq.w	80059ba <_printf_float+0xbe>
 8005d4e:	f108 0801 	add.w	r8, r8, #1
 8005d52:	68e3      	ldr	r3, [r4, #12]
 8005d54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d56:	1a5b      	subs	r3, r3, r1
 8005d58:	4543      	cmp	r3, r8
 8005d5a:	dcf0      	bgt.n	8005d3e <_printf_float+0x442>
 8005d5c:	e6f8      	b.n	8005b50 <_printf_float+0x254>
 8005d5e:	f04f 0800 	mov.w	r8, #0
 8005d62:	f104 0919 	add.w	r9, r4, #25
 8005d66:	e7f4      	b.n	8005d52 <_printf_float+0x456>

08005d68 <_printf_common>:
 8005d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d6c:	4616      	mov	r6, r2
 8005d6e:	4699      	mov	r9, r3
 8005d70:	688a      	ldr	r2, [r1, #8]
 8005d72:	690b      	ldr	r3, [r1, #16]
 8005d74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	bfb8      	it	lt
 8005d7c:	4613      	movlt	r3, r2
 8005d7e:	6033      	str	r3, [r6, #0]
 8005d80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d84:	4607      	mov	r7, r0
 8005d86:	460c      	mov	r4, r1
 8005d88:	b10a      	cbz	r2, 8005d8e <_printf_common+0x26>
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	6033      	str	r3, [r6, #0]
 8005d8e:	6823      	ldr	r3, [r4, #0]
 8005d90:	0699      	lsls	r1, r3, #26
 8005d92:	bf42      	ittt	mi
 8005d94:	6833      	ldrmi	r3, [r6, #0]
 8005d96:	3302      	addmi	r3, #2
 8005d98:	6033      	strmi	r3, [r6, #0]
 8005d9a:	6825      	ldr	r5, [r4, #0]
 8005d9c:	f015 0506 	ands.w	r5, r5, #6
 8005da0:	d106      	bne.n	8005db0 <_printf_common+0x48>
 8005da2:	f104 0a19 	add.w	sl, r4, #25
 8005da6:	68e3      	ldr	r3, [r4, #12]
 8005da8:	6832      	ldr	r2, [r6, #0]
 8005daa:	1a9b      	subs	r3, r3, r2
 8005dac:	42ab      	cmp	r3, r5
 8005dae:	dc26      	bgt.n	8005dfe <_printf_common+0x96>
 8005db0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005db4:	1e13      	subs	r3, r2, #0
 8005db6:	6822      	ldr	r2, [r4, #0]
 8005db8:	bf18      	it	ne
 8005dba:	2301      	movne	r3, #1
 8005dbc:	0692      	lsls	r2, r2, #26
 8005dbe:	d42b      	bmi.n	8005e18 <_printf_common+0xb0>
 8005dc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005dc4:	4649      	mov	r1, r9
 8005dc6:	4638      	mov	r0, r7
 8005dc8:	47c0      	blx	r8
 8005dca:	3001      	adds	r0, #1
 8005dcc:	d01e      	beq.n	8005e0c <_printf_common+0xa4>
 8005dce:	6823      	ldr	r3, [r4, #0]
 8005dd0:	6922      	ldr	r2, [r4, #16]
 8005dd2:	f003 0306 	and.w	r3, r3, #6
 8005dd6:	2b04      	cmp	r3, #4
 8005dd8:	bf02      	ittt	eq
 8005dda:	68e5      	ldreq	r5, [r4, #12]
 8005ddc:	6833      	ldreq	r3, [r6, #0]
 8005dde:	1aed      	subeq	r5, r5, r3
 8005de0:	68a3      	ldr	r3, [r4, #8]
 8005de2:	bf0c      	ite	eq
 8005de4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005de8:	2500      	movne	r5, #0
 8005dea:	4293      	cmp	r3, r2
 8005dec:	bfc4      	itt	gt
 8005dee:	1a9b      	subgt	r3, r3, r2
 8005df0:	18ed      	addgt	r5, r5, r3
 8005df2:	2600      	movs	r6, #0
 8005df4:	341a      	adds	r4, #26
 8005df6:	42b5      	cmp	r5, r6
 8005df8:	d11a      	bne.n	8005e30 <_printf_common+0xc8>
 8005dfa:	2000      	movs	r0, #0
 8005dfc:	e008      	b.n	8005e10 <_printf_common+0xa8>
 8005dfe:	2301      	movs	r3, #1
 8005e00:	4652      	mov	r2, sl
 8005e02:	4649      	mov	r1, r9
 8005e04:	4638      	mov	r0, r7
 8005e06:	47c0      	blx	r8
 8005e08:	3001      	adds	r0, #1
 8005e0a:	d103      	bne.n	8005e14 <_printf_common+0xac>
 8005e0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e14:	3501      	adds	r5, #1
 8005e16:	e7c6      	b.n	8005da6 <_printf_common+0x3e>
 8005e18:	18e1      	adds	r1, r4, r3
 8005e1a:	1c5a      	adds	r2, r3, #1
 8005e1c:	2030      	movs	r0, #48	; 0x30
 8005e1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e22:	4422      	add	r2, r4
 8005e24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e2c:	3302      	adds	r3, #2
 8005e2e:	e7c7      	b.n	8005dc0 <_printf_common+0x58>
 8005e30:	2301      	movs	r3, #1
 8005e32:	4622      	mov	r2, r4
 8005e34:	4649      	mov	r1, r9
 8005e36:	4638      	mov	r0, r7
 8005e38:	47c0      	blx	r8
 8005e3a:	3001      	adds	r0, #1
 8005e3c:	d0e6      	beq.n	8005e0c <_printf_common+0xa4>
 8005e3e:	3601      	adds	r6, #1
 8005e40:	e7d9      	b.n	8005df6 <_printf_common+0x8e>
	...

08005e44 <_printf_i>:
 8005e44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e48:	7e0f      	ldrb	r7, [r1, #24]
 8005e4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e4c:	2f78      	cmp	r7, #120	; 0x78
 8005e4e:	4691      	mov	r9, r2
 8005e50:	4680      	mov	r8, r0
 8005e52:	460c      	mov	r4, r1
 8005e54:	469a      	mov	sl, r3
 8005e56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e5a:	d807      	bhi.n	8005e6c <_printf_i+0x28>
 8005e5c:	2f62      	cmp	r7, #98	; 0x62
 8005e5e:	d80a      	bhi.n	8005e76 <_printf_i+0x32>
 8005e60:	2f00      	cmp	r7, #0
 8005e62:	f000 80d4 	beq.w	800600e <_printf_i+0x1ca>
 8005e66:	2f58      	cmp	r7, #88	; 0x58
 8005e68:	f000 80c0 	beq.w	8005fec <_printf_i+0x1a8>
 8005e6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e74:	e03a      	b.n	8005eec <_printf_i+0xa8>
 8005e76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e7a:	2b15      	cmp	r3, #21
 8005e7c:	d8f6      	bhi.n	8005e6c <_printf_i+0x28>
 8005e7e:	a101      	add	r1, pc, #4	; (adr r1, 8005e84 <_printf_i+0x40>)
 8005e80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e84:	08005edd 	.word	0x08005edd
 8005e88:	08005ef1 	.word	0x08005ef1
 8005e8c:	08005e6d 	.word	0x08005e6d
 8005e90:	08005e6d 	.word	0x08005e6d
 8005e94:	08005e6d 	.word	0x08005e6d
 8005e98:	08005e6d 	.word	0x08005e6d
 8005e9c:	08005ef1 	.word	0x08005ef1
 8005ea0:	08005e6d 	.word	0x08005e6d
 8005ea4:	08005e6d 	.word	0x08005e6d
 8005ea8:	08005e6d 	.word	0x08005e6d
 8005eac:	08005e6d 	.word	0x08005e6d
 8005eb0:	08005ff5 	.word	0x08005ff5
 8005eb4:	08005f1d 	.word	0x08005f1d
 8005eb8:	08005faf 	.word	0x08005faf
 8005ebc:	08005e6d 	.word	0x08005e6d
 8005ec0:	08005e6d 	.word	0x08005e6d
 8005ec4:	08006017 	.word	0x08006017
 8005ec8:	08005e6d 	.word	0x08005e6d
 8005ecc:	08005f1d 	.word	0x08005f1d
 8005ed0:	08005e6d 	.word	0x08005e6d
 8005ed4:	08005e6d 	.word	0x08005e6d
 8005ed8:	08005fb7 	.word	0x08005fb7
 8005edc:	682b      	ldr	r3, [r5, #0]
 8005ede:	1d1a      	adds	r2, r3, #4
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	602a      	str	r2, [r5, #0]
 8005ee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ee8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005eec:	2301      	movs	r3, #1
 8005eee:	e09f      	b.n	8006030 <_printf_i+0x1ec>
 8005ef0:	6820      	ldr	r0, [r4, #0]
 8005ef2:	682b      	ldr	r3, [r5, #0]
 8005ef4:	0607      	lsls	r7, r0, #24
 8005ef6:	f103 0104 	add.w	r1, r3, #4
 8005efa:	6029      	str	r1, [r5, #0]
 8005efc:	d501      	bpl.n	8005f02 <_printf_i+0xbe>
 8005efe:	681e      	ldr	r6, [r3, #0]
 8005f00:	e003      	b.n	8005f0a <_printf_i+0xc6>
 8005f02:	0646      	lsls	r6, r0, #25
 8005f04:	d5fb      	bpl.n	8005efe <_printf_i+0xba>
 8005f06:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005f0a:	2e00      	cmp	r6, #0
 8005f0c:	da03      	bge.n	8005f16 <_printf_i+0xd2>
 8005f0e:	232d      	movs	r3, #45	; 0x2d
 8005f10:	4276      	negs	r6, r6
 8005f12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f16:	485a      	ldr	r0, [pc, #360]	; (8006080 <_printf_i+0x23c>)
 8005f18:	230a      	movs	r3, #10
 8005f1a:	e012      	b.n	8005f42 <_printf_i+0xfe>
 8005f1c:	682b      	ldr	r3, [r5, #0]
 8005f1e:	6820      	ldr	r0, [r4, #0]
 8005f20:	1d19      	adds	r1, r3, #4
 8005f22:	6029      	str	r1, [r5, #0]
 8005f24:	0605      	lsls	r5, r0, #24
 8005f26:	d501      	bpl.n	8005f2c <_printf_i+0xe8>
 8005f28:	681e      	ldr	r6, [r3, #0]
 8005f2a:	e002      	b.n	8005f32 <_printf_i+0xee>
 8005f2c:	0641      	lsls	r1, r0, #25
 8005f2e:	d5fb      	bpl.n	8005f28 <_printf_i+0xe4>
 8005f30:	881e      	ldrh	r6, [r3, #0]
 8005f32:	4853      	ldr	r0, [pc, #332]	; (8006080 <_printf_i+0x23c>)
 8005f34:	2f6f      	cmp	r7, #111	; 0x6f
 8005f36:	bf0c      	ite	eq
 8005f38:	2308      	moveq	r3, #8
 8005f3a:	230a      	movne	r3, #10
 8005f3c:	2100      	movs	r1, #0
 8005f3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f42:	6865      	ldr	r5, [r4, #4]
 8005f44:	60a5      	str	r5, [r4, #8]
 8005f46:	2d00      	cmp	r5, #0
 8005f48:	bfa2      	ittt	ge
 8005f4a:	6821      	ldrge	r1, [r4, #0]
 8005f4c:	f021 0104 	bicge.w	r1, r1, #4
 8005f50:	6021      	strge	r1, [r4, #0]
 8005f52:	b90e      	cbnz	r6, 8005f58 <_printf_i+0x114>
 8005f54:	2d00      	cmp	r5, #0
 8005f56:	d04b      	beq.n	8005ff0 <_printf_i+0x1ac>
 8005f58:	4615      	mov	r5, r2
 8005f5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f5e:	fb03 6711 	mls	r7, r3, r1, r6
 8005f62:	5dc7      	ldrb	r7, [r0, r7]
 8005f64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f68:	4637      	mov	r7, r6
 8005f6a:	42bb      	cmp	r3, r7
 8005f6c:	460e      	mov	r6, r1
 8005f6e:	d9f4      	bls.n	8005f5a <_printf_i+0x116>
 8005f70:	2b08      	cmp	r3, #8
 8005f72:	d10b      	bne.n	8005f8c <_printf_i+0x148>
 8005f74:	6823      	ldr	r3, [r4, #0]
 8005f76:	07de      	lsls	r6, r3, #31
 8005f78:	d508      	bpl.n	8005f8c <_printf_i+0x148>
 8005f7a:	6923      	ldr	r3, [r4, #16]
 8005f7c:	6861      	ldr	r1, [r4, #4]
 8005f7e:	4299      	cmp	r1, r3
 8005f80:	bfde      	ittt	le
 8005f82:	2330      	movle	r3, #48	; 0x30
 8005f84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f88:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005f8c:	1b52      	subs	r2, r2, r5
 8005f8e:	6122      	str	r2, [r4, #16]
 8005f90:	f8cd a000 	str.w	sl, [sp]
 8005f94:	464b      	mov	r3, r9
 8005f96:	aa03      	add	r2, sp, #12
 8005f98:	4621      	mov	r1, r4
 8005f9a:	4640      	mov	r0, r8
 8005f9c:	f7ff fee4 	bl	8005d68 <_printf_common>
 8005fa0:	3001      	adds	r0, #1
 8005fa2:	d14a      	bne.n	800603a <_printf_i+0x1f6>
 8005fa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fa8:	b004      	add	sp, #16
 8005faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fae:	6823      	ldr	r3, [r4, #0]
 8005fb0:	f043 0320 	orr.w	r3, r3, #32
 8005fb4:	6023      	str	r3, [r4, #0]
 8005fb6:	4833      	ldr	r0, [pc, #204]	; (8006084 <_printf_i+0x240>)
 8005fb8:	2778      	movs	r7, #120	; 0x78
 8005fba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005fbe:	6823      	ldr	r3, [r4, #0]
 8005fc0:	6829      	ldr	r1, [r5, #0]
 8005fc2:	061f      	lsls	r7, r3, #24
 8005fc4:	f851 6b04 	ldr.w	r6, [r1], #4
 8005fc8:	d402      	bmi.n	8005fd0 <_printf_i+0x18c>
 8005fca:	065f      	lsls	r7, r3, #25
 8005fcc:	bf48      	it	mi
 8005fce:	b2b6      	uxthmi	r6, r6
 8005fd0:	07df      	lsls	r7, r3, #31
 8005fd2:	bf48      	it	mi
 8005fd4:	f043 0320 	orrmi.w	r3, r3, #32
 8005fd8:	6029      	str	r1, [r5, #0]
 8005fda:	bf48      	it	mi
 8005fdc:	6023      	strmi	r3, [r4, #0]
 8005fde:	b91e      	cbnz	r6, 8005fe8 <_printf_i+0x1a4>
 8005fe0:	6823      	ldr	r3, [r4, #0]
 8005fe2:	f023 0320 	bic.w	r3, r3, #32
 8005fe6:	6023      	str	r3, [r4, #0]
 8005fe8:	2310      	movs	r3, #16
 8005fea:	e7a7      	b.n	8005f3c <_printf_i+0xf8>
 8005fec:	4824      	ldr	r0, [pc, #144]	; (8006080 <_printf_i+0x23c>)
 8005fee:	e7e4      	b.n	8005fba <_printf_i+0x176>
 8005ff0:	4615      	mov	r5, r2
 8005ff2:	e7bd      	b.n	8005f70 <_printf_i+0x12c>
 8005ff4:	682b      	ldr	r3, [r5, #0]
 8005ff6:	6826      	ldr	r6, [r4, #0]
 8005ff8:	6961      	ldr	r1, [r4, #20]
 8005ffa:	1d18      	adds	r0, r3, #4
 8005ffc:	6028      	str	r0, [r5, #0]
 8005ffe:	0635      	lsls	r5, r6, #24
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	d501      	bpl.n	8006008 <_printf_i+0x1c4>
 8006004:	6019      	str	r1, [r3, #0]
 8006006:	e002      	b.n	800600e <_printf_i+0x1ca>
 8006008:	0670      	lsls	r0, r6, #25
 800600a:	d5fb      	bpl.n	8006004 <_printf_i+0x1c0>
 800600c:	8019      	strh	r1, [r3, #0]
 800600e:	2300      	movs	r3, #0
 8006010:	6123      	str	r3, [r4, #16]
 8006012:	4615      	mov	r5, r2
 8006014:	e7bc      	b.n	8005f90 <_printf_i+0x14c>
 8006016:	682b      	ldr	r3, [r5, #0]
 8006018:	1d1a      	adds	r2, r3, #4
 800601a:	602a      	str	r2, [r5, #0]
 800601c:	681d      	ldr	r5, [r3, #0]
 800601e:	6862      	ldr	r2, [r4, #4]
 8006020:	2100      	movs	r1, #0
 8006022:	4628      	mov	r0, r5
 8006024:	f7fa f8d4 	bl	80001d0 <memchr>
 8006028:	b108      	cbz	r0, 800602e <_printf_i+0x1ea>
 800602a:	1b40      	subs	r0, r0, r5
 800602c:	6060      	str	r0, [r4, #4]
 800602e:	6863      	ldr	r3, [r4, #4]
 8006030:	6123      	str	r3, [r4, #16]
 8006032:	2300      	movs	r3, #0
 8006034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006038:	e7aa      	b.n	8005f90 <_printf_i+0x14c>
 800603a:	6923      	ldr	r3, [r4, #16]
 800603c:	462a      	mov	r2, r5
 800603e:	4649      	mov	r1, r9
 8006040:	4640      	mov	r0, r8
 8006042:	47d0      	blx	sl
 8006044:	3001      	adds	r0, #1
 8006046:	d0ad      	beq.n	8005fa4 <_printf_i+0x160>
 8006048:	6823      	ldr	r3, [r4, #0]
 800604a:	079b      	lsls	r3, r3, #30
 800604c:	d413      	bmi.n	8006076 <_printf_i+0x232>
 800604e:	68e0      	ldr	r0, [r4, #12]
 8006050:	9b03      	ldr	r3, [sp, #12]
 8006052:	4298      	cmp	r0, r3
 8006054:	bfb8      	it	lt
 8006056:	4618      	movlt	r0, r3
 8006058:	e7a6      	b.n	8005fa8 <_printf_i+0x164>
 800605a:	2301      	movs	r3, #1
 800605c:	4632      	mov	r2, r6
 800605e:	4649      	mov	r1, r9
 8006060:	4640      	mov	r0, r8
 8006062:	47d0      	blx	sl
 8006064:	3001      	adds	r0, #1
 8006066:	d09d      	beq.n	8005fa4 <_printf_i+0x160>
 8006068:	3501      	adds	r5, #1
 800606a:	68e3      	ldr	r3, [r4, #12]
 800606c:	9903      	ldr	r1, [sp, #12]
 800606e:	1a5b      	subs	r3, r3, r1
 8006070:	42ab      	cmp	r3, r5
 8006072:	dcf2      	bgt.n	800605a <_printf_i+0x216>
 8006074:	e7eb      	b.n	800604e <_printf_i+0x20a>
 8006076:	2500      	movs	r5, #0
 8006078:	f104 0619 	add.w	r6, r4, #25
 800607c:	e7f5      	b.n	800606a <_printf_i+0x226>
 800607e:	bf00      	nop
 8006080:	080082a2 	.word	0x080082a2
 8006084:	080082b3 	.word	0x080082b3

08006088 <std>:
 8006088:	2300      	movs	r3, #0
 800608a:	b510      	push	{r4, lr}
 800608c:	4604      	mov	r4, r0
 800608e:	e9c0 3300 	strd	r3, r3, [r0]
 8006092:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006096:	6083      	str	r3, [r0, #8]
 8006098:	8181      	strh	r1, [r0, #12]
 800609a:	6643      	str	r3, [r0, #100]	; 0x64
 800609c:	81c2      	strh	r2, [r0, #14]
 800609e:	6183      	str	r3, [r0, #24]
 80060a0:	4619      	mov	r1, r3
 80060a2:	2208      	movs	r2, #8
 80060a4:	305c      	adds	r0, #92	; 0x5c
 80060a6:	f000 f8f4 	bl	8006292 <memset>
 80060aa:	4b0d      	ldr	r3, [pc, #52]	; (80060e0 <std+0x58>)
 80060ac:	6263      	str	r3, [r4, #36]	; 0x24
 80060ae:	4b0d      	ldr	r3, [pc, #52]	; (80060e4 <std+0x5c>)
 80060b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80060b2:	4b0d      	ldr	r3, [pc, #52]	; (80060e8 <std+0x60>)
 80060b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80060b6:	4b0d      	ldr	r3, [pc, #52]	; (80060ec <std+0x64>)
 80060b8:	6323      	str	r3, [r4, #48]	; 0x30
 80060ba:	4b0d      	ldr	r3, [pc, #52]	; (80060f0 <std+0x68>)
 80060bc:	6224      	str	r4, [r4, #32]
 80060be:	429c      	cmp	r4, r3
 80060c0:	d006      	beq.n	80060d0 <std+0x48>
 80060c2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80060c6:	4294      	cmp	r4, r2
 80060c8:	d002      	beq.n	80060d0 <std+0x48>
 80060ca:	33d0      	adds	r3, #208	; 0xd0
 80060cc:	429c      	cmp	r4, r3
 80060ce:	d105      	bne.n	80060dc <std+0x54>
 80060d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80060d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060d8:	f000 b9ae 	b.w	8006438 <__retarget_lock_init_recursive>
 80060dc:	bd10      	pop	{r4, pc}
 80060de:	bf00      	nop
 80060e0:	0800620d 	.word	0x0800620d
 80060e4:	0800622f 	.word	0x0800622f
 80060e8:	08006267 	.word	0x08006267
 80060ec:	0800628b 	.word	0x0800628b
 80060f0:	20004388 	.word	0x20004388

080060f4 <stdio_exit_handler>:
 80060f4:	4a02      	ldr	r2, [pc, #8]	; (8006100 <stdio_exit_handler+0xc>)
 80060f6:	4903      	ldr	r1, [pc, #12]	; (8006104 <stdio_exit_handler+0x10>)
 80060f8:	4803      	ldr	r0, [pc, #12]	; (8006108 <stdio_exit_handler+0x14>)
 80060fa:	f000 b869 	b.w	80061d0 <_fwalk_sglue>
 80060fe:	bf00      	nop
 8006100:	20000010 	.word	0x20000010
 8006104:	08007b59 	.word	0x08007b59
 8006108:	2000001c 	.word	0x2000001c

0800610c <cleanup_stdio>:
 800610c:	6841      	ldr	r1, [r0, #4]
 800610e:	4b0c      	ldr	r3, [pc, #48]	; (8006140 <cleanup_stdio+0x34>)
 8006110:	4299      	cmp	r1, r3
 8006112:	b510      	push	{r4, lr}
 8006114:	4604      	mov	r4, r0
 8006116:	d001      	beq.n	800611c <cleanup_stdio+0x10>
 8006118:	f001 fd1e 	bl	8007b58 <_fflush_r>
 800611c:	68a1      	ldr	r1, [r4, #8]
 800611e:	4b09      	ldr	r3, [pc, #36]	; (8006144 <cleanup_stdio+0x38>)
 8006120:	4299      	cmp	r1, r3
 8006122:	d002      	beq.n	800612a <cleanup_stdio+0x1e>
 8006124:	4620      	mov	r0, r4
 8006126:	f001 fd17 	bl	8007b58 <_fflush_r>
 800612a:	68e1      	ldr	r1, [r4, #12]
 800612c:	4b06      	ldr	r3, [pc, #24]	; (8006148 <cleanup_stdio+0x3c>)
 800612e:	4299      	cmp	r1, r3
 8006130:	d004      	beq.n	800613c <cleanup_stdio+0x30>
 8006132:	4620      	mov	r0, r4
 8006134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006138:	f001 bd0e 	b.w	8007b58 <_fflush_r>
 800613c:	bd10      	pop	{r4, pc}
 800613e:	bf00      	nop
 8006140:	20004388 	.word	0x20004388
 8006144:	200043f0 	.word	0x200043f0
 8006148:	20004458 	.word	0x20004458

0800614c <global_stdio_init.part.0>:
 800614c:	b510      	push	{r4, lr}
 800614e:	4b0b      	ldr	r3, [pc, #44]	; (800617c <global_stdio_init.part.0+0x30>)
 8006150:	4c0b      	ldr	r4, [pc, #44]	; (8006180 <global_stdio_init.part.0+0x34>)
 8006152:	4a0c      	ldr	r2, [pc, #48]	; (8006184 <global_stdio_init.part.0+0x38>)
 8006154:	601a      	str	r2, [r3, #0]
 8006156:	4620      	mov	r0, r4
 8006158:	2200      	movs	r2, #0
 800615a:	2104      	movs	r1, #4
 800615c:	f7ff ff94 	bl	8006088 <std>
 8006160:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006164:	2201      	movs	r2, #1
 8006166:	2109      	movs	r1, #9
 8006168:	f7ff ff8e 	bl	8006088 <std>
 800616c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006170:	2202      	movs	r2, #2
 8006172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006176:	2112      	movs	r1, #18
 8006178:	f7ff bf86 	b.w	8006088 <std>
 800617c:	200044c0 	.word	0x200044c0
 8006180:	20004388 	.word	0x20004388
 8006184:	080060f5 	.word	0x080060f5

08006188 <__sfp_lock_acquire>:
 8006188:	4801      	ldr	r0, [pc, #4]	; (8006190 <__sfp_lock_acquire+0x8>)
 800618a:	f000 b956 	b.w	800643a <__retarget_lock_acquire_recursive>
 800618e:	bf00      	nop
 8006190:	200044c9 	.word	0x200044c9

08006194 <__sfp_lock_release>:
 8006194:	4801      	ldr	r0, [pc, #4]	; (800619c <__sfp_lock_release+0x8>)
 8006196:	f000 b951 	b.w	800643c <__retarget_lock_release_recursive>
 800619a:	bf00      	nop
 800619c:	200044c9 	.word	0x200044c9

080061a0 <__sinit>:
 80061a0:	b510      	push	{r4, lr}
 80061a2:	4604      	mov	r4, r0
 80061a4:	f7ff fff0 	bl	8006188 <__sfp_lock_acquire>
 80061a8:	6a23      	ldr	r3, [r4, #32]
 80061aa:	b11b      	cbz	r3, 80061b4 <__sinit+0x14>
 80061ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061b0:	f7ff bff0 	b.w	8006194 <__sfp_lock_release>
 80061b4:	4b04      	ldr	r3, [pc, #16]	; (80061c8 <__sinit+0x28>)
 80061b6:	6223      	str	r3, [r4, #32]
 80061b8:	4b04      	ldr	r3, [pc, #16]	; (80061cc <__sinit+0x2c>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1f5      	bne.n	80061ac <__sinit+0xc>
 80061c0:	f7ff ffc4 	bl	800614c <global_stdio_init.part.0>
 80061c4:	e7f2      	b.n	80061ac <__sinit+0xc>
 80061c6:	bf00      	nop
 80061c8:	0800610d 	.word	0x0800610d
 80061cc:	200044c0 	.word	0x200044c0

080061d0 <_fwalk_sglue>:
 80061d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061d4:	4607      	mov	r7, r0
 80061d6:	4688      	mov	r8, r1
 80061d8:	4614      	mov	r4, r2
 80061da:	2600      	movs	r6, #0
 80061dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061e0:	f1b9 0901 	subs.w	r9, r9, #1
 80061e4:	d505      	bpl.n	80061f2 <_fwalk_sglue+0x22>
 80061e6:	6824      	ldr	r4, [r4, #0]
 80061e8:	2c00      	cmp	r4, #0
 80061ea:	d1f7      	bne.n	80061dc <_fwalk_sglue+0xc>
 80061ec:	4630      	mov	r0, r6
 80061ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061f2:	89ab      	ldrh	r3, [r5, #12]
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d907      	bls.n	8006208 <_fwalk_sglue+0x38>
 80061f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061fc:	3301      	adds	r3, #1
 80061fe:	d003      	beq.n	8006208 <_fwalk_sglue+0x38>
 8006200:	4629      	mov	r1, r5
 8006202:	4638      	mov	r0, r7
 8006204:	47c0      	blx	r8
 8006206:	4306      	orrs	r6, r0
 8006208:	3568      	adds	r5, #104	; 0x68
 800620a:	e7e9      	b.n	80061e0 <_fwalk_sglue+0x10>

0800620c <__sread>:
 800620c:	b510      	push	{r4, lr}
 800620e:	460c      	mov	r4, r1
 8006210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006214:	f000 f8c2 	bl	800639c <_read_r>
 8006218:	2800      	cmp	r0, #0
 800621a:	bfab      	itete	ge
 800621c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800621e:	89a3      	ldrhlt	r3, [r4, #12]
 8006220:	181b      	addge	r3, r3, r0
 8006222:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006226:	bfac      	ite	ge
 8006228:	6563      	strge	r3, [r4, #84]	; 0x54
 800622a:	81a3      	strhlt	r3, [r4, #12]
 800622c:	bd10      	pop	{r4, pc}

0800622e <__swrite>:
 800622e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006232:	461f      	mov	r7, r3
 8006234:	898b      	ldrh	r3, [r1, #12]
 8006236:	05db      	lsls	r3, r3, #23
 8006238:	4605      	mov	r5, r0
 800623a:	460c      	mov	r4, r1
 800623c:	4616      	mov	r6, r2
 800623e:	d505      	bpl.n	800624c <__swrite+0x1e>
 8006240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006244:	2302      	movs	r3, #2
 8006246:	2200      	movs	r2, #0
 8006248:	f000 f896 	bl	8006378 <_lseek_r>
 800624c:	89a3      	ldrh	r3, [r4, #12]
 800624e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006252:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006256:	81a3      	strh	r3, [r4, #12]
 8006258:	4632      	mov	r2, r6
 800625a:	463b      	mov	r3, r7
 800625c:	4628      	mov	r0, r5
 800625e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006262:	f000 b8ad 	b.w	80063c0 <_write_r>

08006266 <__sseek>:
 8006266:	b510      	push	{r4, lr}
 8006268:	460c      	mov	r4, r1
 800626a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800626e:	f000 f883 	bl	8006378 <_lseek_r>
 8006272:	1c43      	adds	r3, r0, #1
 8006274:	89a3      	ldrh	r3, [r4, #12]
 8006276:	bf15      	itete	ne
 8006278:	6560      	strne	r0, [r4, #84]	; 0x54
 800627a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800627e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006282:	81a3      	strheq	r3, [r4, #12]
 8006284:	bf18      	it	ne
 8006286:	81a3      	strhne	r3, [r4, #12]
 8006288:	bd10      	pop	{r4, pc}

0800628a <__sclose>:
 800628a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800628e:	f000 b80d 	b.w	80062ac <_close_r>

08006292 <memset>:
 8006292:	4402      	add	r2, r0
 8006294:	4603      	mov	r3, r0
 8006296:	4293      	cmp	r3, r2
 8006298:	d100      	bne.n	800629c <memset+0xa>
 800629a:	4770      	bx	lr
 800629c:	f803 1b01 	strb.w	r1, [r3], #1
 80062a0:	e7f9      	b.n	8006296 <memset+0x4>
	...

080062a4 <_localeconv_r>:
 80062a4:	4800      	ldr	r0, [pc, #0]	; (80062a8 <_localeconv_r+0x4>)
 80062a6:	4770      	bx	lr
 80062a8:	2000015c 	.word	0x2000015c

080062ac <_close_r>:
 80062ac:	b538      	push	{r3, r4, r5, lr}
 80062ae:	4d06      	ldr	r5, [pc, #24]	; (80062c8 <_close_r+0x1c>)
 80062b0:	2300      	movs	r3, #0
 80062b2:	4604      	mov	r4, r0
 80062b4:	4608      	mov	r0, r1
 80062b6:	602b      	str	r3, [r5, #0]
 80062b8:	f7fb fcd1 	bl	8001c5e <_close>
 80062bc:	1c43      	adds	r3, r0, #1
 80062be:	d102      	bne.n	80062c6 <_close_r+0x1a>
 80062c0:	682b      	ldr	r3, [r5, #0]
 80062c2:	b103      	cbz	r3, 80062c6 <_close_r+0x1a>
 80062c4:	6023      	str	r3, [r4, #0]
 80062c6:	bd38      	pop	{r3, r4, r5, pc}
 80062c8:	200044c4 	.word	0x200044c4

080062cc <_reclaim_reent>:
 80062cc:	4b29      	ldr	r3, [pc, #164]	; (8006374 <_reclaim_reent+0xa8>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4283      	cmp	r3, r0
 80062d2:	b570      	push	{r4, r5, r6, lr}
 80062d4:	4604      	mov	r4, r0
 80062d6:	d04b      	beq.n	8006370 <_reclaim_reent+0xa4>
 80062d8:	69c3      	ldr	r3, [r0, #28]
 80062da:	b143      	cbz	r3, 80062ee <_reclaim_reent+0x22>
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d144      	bne.n	800636c <_reclaim_reent+0xa0>
 80062e2:	69e3      	ldr	r3, [r4, #28]
 80062e4:	6819      	ldr	r1, [r3, #0]
 80062e6:	b111      	cbz	r1, 80062ee <_reclaim_reent+0x22>
 80062e8:	4620      	mov	r0, r4
 80062ea:	f000 ff33 	bl	8007154 <_free_r>
 80062ee:	6961      	ldr	r1, [r4, #20]
 80062f0:	b111      	cbz	r1, 80062f8 <_reclaim_reent+0x2c>
 80062f2:	4620      	mov	r0, r4
 80062f4:	f000 ff2e 	bl	8007154 <_free_r>
 80062f8:	69e1      	ldr	r1, [r4, #28]
 80062fa:	b111      	cbz	r1, 8006302 <_reclaim_reent+0x36>
 80062fc:	4620      	mov	r0, r4
 80062fe:	f000 ff29 	bl	8007154 <_free_r>
 8006302:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006304:	b111      	cbz	r1, 800630c <_reclaim_reent+0x40>
 8006306:	4620      	mov	r0, r4
 8006308:	f000 ff24 	bl	8007154 <_free_r>
 800630c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800630e:	b111      	cbz	r1, 8006316 <_reclaim_reent+0x4a>
 8006310:	4620      	mov	r0, r4
 8006312:	f000 ff1f 	bl	8007154 <_free_r>
 8006316:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006318:	b111      	cbz	r1, 8006320 <_reclaim_reent+0x54>
 800631a:	4620      	mov	r0, r4
 800631c:	f000 ff1a 	bl	8007154 <_free_r>
 8006320:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006322:	b111      	cbz	r1, 800632a <_reclaim_reent+0x5e>
 8006324:	4620      	mov	r0, r4
 8006326:	f000 ff15 	bl	8007154 <_free_r>
 800632a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800632c:	b111      	cbz	r1, 8006334 <_reclaim_reent+0x68>
 800632e:	4620      	mov	r0, r4
 8006330:	f000 ff10 	bl	8007154 <_free_r>
 8006334:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006336:	b111      	cbz	r1, 800633e <_reclaim_reent+0x72>
 8006338:	4620      	mov	r0, r4
 800633a:	f000 ff0b 	bl	8007154 <_free_r>
 800633e:	6a23      	ldr	r3, [r4, #32]
 8006340:	b1b3      	cbz	r3, 8006370 <_reclaim_reent+0xa4>
 8006342:	4620      	mov	r0, r4
 8006344:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006348:	4718      	bx	r3
 800634a:	5949      	ldr	r1, [r1, r5]
 800634c:	b941      	cbnz	r1, 8006360 <_reclaim_reent+0x94>
 800634e:	3504      	adds	r5, #4
 8006350:	69e3      	ldr	r3, [r4, #28]
 8006352:	2d80      	cmp	r5, #128	; 0x80
 8006354:	68d9      	ldr	r1, [r3, #12]
 8006356:	d1f8      	bne.n	800634a <_reclaim_reent+0x7e>
 8006358:	4620      	mov	r0, r4
 800635a:	f000 fefb 	bl	8007154 <_free_r>
 800635e:	e7c0      	b.n	80062e2 <_reclaim_reent+0x16>
 8006360:	680e      	ldr	r6, [r1, #0]
 8006362:	4620      	mov	r0, r4
 8006364:	f000 fef6 	bl	8007154 <_free_r>
 8006368:	4631      	mov	r1, r6
 800636a:	e7ef      	b.n	800634c <_reclaim_reent+0x80>
 800636c:	2500      	movs	r5, #0
 800636e:	e7ef      	b.n	8006350 <_reclaim_reent+0x84>
 8006370:	bd70      	pop	{r4, r5, r6, pc}
 8006372:	bf00      	nop
 8006374:	20000068 	.word	0x20000068

08006378 <_lseek_r>:
 8006378:	b538      	push	{r3, r4, r5, lr}
 800637a:	4d07      	ldr	r5, [pc, #28]	; (8006398 <_lseek_r+0x20>)
 800637c:	4604      	mov	r4, r0
 800637e:	4608      	mov	r0, r1
 8006380:	4611      	mov	r1, r2
 8006382:	2200      	movs	r2, #0
 8006384:	602a      	str	r2, [r5, #0]
 8006386:	461a      	mov	r2, r3
 8006388:	f7fb fc90 	bl	8001cac <_lseek>
 800638c:	1c43      	adds	r3, r0, #1
 800638e:	d102      	bne.n	8006396 <_lseek_r+0x1e>
 8006390:	682b      	ldr	r3, [r5, #0]
 8006392:	b103      	cbz	r3, 8006396 <_lseek_r+0x1e>
 8006394:	6023      	str	r3, [r4, #0]
 8006396:	bd38      	pop	{r3, r4, r5, pc}
 8006398:	200044c4 	.word	0x200044c4

0800639c <_read_r>:
 800639c:	b538      	push	{r3, r4, r5, lr}
 800639e:	4d07      	ldr	r5, [pc, #28]	; (80063bc <_read_r+0x20>)
 80063a0:	4604      	mov	r4, r0
 80063a2:	4608      	mov	r0, r1
 80063a4:	4611      	mov	r1, r2
 80063a6:	2200      	movs	r2, #0
 80063a8:	602a      	str	r2, [r5, #0]
 80063aa:	461a      	mov	r2, r3
 80063ac:	f7fb fc1e 	bl	8001bec <_read>
 80063b0:	1c43      	adds	r3, r0, #1
 80063b2:	d102      	bne.n	80063ba <_read_r+0x1e>
 80063b4:	682b      	ldr	r3, [r5, #0]
 80063b6:	b103      	cbz	r3, 80063ba <_read_r+0x1e>
 80063b8:	6023      	str	r3, [r4, #0]
 80063ba:	bd38      	pop	{r3, r4, r5, pc}
 80063bc:	200044c4 	.word	0x200044c4

080063c0 <_write_r>:
 80063c0:	b538      	push	{r3, r4, r5, lr}
 80063c2:	4d07      	ldr	r5, [pc, #28]	; (80063e0 <_write_r+0x20>)
 80063c4:	4604      	mov	r4, r0
 80063c6:	4608      	mov	r0, r1
 80063c8:	4611      	mov	r1, r2
 80063ca:	2200      	movs	r2, #0
 80063cc:	602a      	str	r2, [r5, #0]
 80063ce:	461a      	mov	r2, r3
 80063d0:	f7fb fc29 	bl	8001c26 <_write>
 80063d4:	1c43      	adds	r3, r0, #1
 80063d6:	d102      	bne.n	80063de <_write_r+0x1e>
 80063d8:	682b      	ldr	r3, [r5, #0]
 80063da:	b103      	cbz	r3, 80063de <_write_r+0x1e>
 80063dc:	6023      	str	r3, [r4, #0]
 80063de:	bd38      	pop	{r3, r4, r5, pc}
 80063e0:	200044c4 	.word	0x200044c4

080063e4 <__errno>:
 80063e4:	4b01      	ldr	r3, [pc, #4]	; (80063ec <__errno+0x8>)
 80063e6:	6818      	ldr	r0, [r3, #0]
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	20000068 	.word	0x20000068

080063f0 <__libc_init_array>:
 80063f0:	b570      	push	{r4, r5, r6, lr}
 80063f2:	4d0d      	ldr	r5, [pc, #52]	; (8006428 <__libc_init_array+0x38>)
 80063f4:	4c0d      	ldr	r4, [pc, #52]	; (800642c <__libc_init_array+0x3c>)
 80063f6:	1b64      	subs	r4, r4, r5
 80063f8:	10a4      	asrs	r4, r4, #2
 80063fa:	2600      	movs	r6, #0
 80063fc:	42a6      	cmp	r6, r4
 80063fe:	d109      	bne.n	8006414 <__libc_init_array+0x24>
 8006400:	4d0b      	ldr	r5, [pc, #44]	; (8006430 <__libc_init_array+0x40>)
 8006402:	4c0c      	ldr	r4, [pc, #48]	; (8006434 <__libc_init_array+0x44>)
 8006404:	f001 feee 	bl	80081e4 <_init>
 8006408:	1b64      	subs	r4, r4, r5
 800640a:	10a4      	asrs	r4, r4, #2
 800640c:	2600      	movs	r6, #0
 800640e:	42a6      	cmp	r6, r4
 8006410:	d105      	bne.n	800641e <__libc_init_array+0x2e>
 8006412:	bd70      	pop	{r4, r5, r6, pc}
 8006414:	f855 3b04 	ldr.w	r3, [r5], #4
 8006418:	4798      	blx	r3
 800641a:	3601      	adds	r6, #1
 800641c:	e7ee      	b.n	80063fc <__libc_init_array+0xc>
 800641e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006422:	4798      	blx	r3
 8006424:	3601      	adds	r6, #1
 8006426:	e7f2      	b.n	800640e <__libc_init_array+0x1e>
 8006428:	0800860c 	.word	0x0800860c
 800642c:	0800860c 	.word	0x0800860c
 8006430:	0800860c 	.word	0x0800860c
 8006434:	08008610 	.word	0x08008610

08006438 <__retarget_lock_init_recursive>:
 8006438:	4770      	bx	lr

0800643a <__retarget_lock_acquire_recursive>:
 800643a:	4770      	bx	lr

0800643c <__retarget_lock_release_recursive>:
 800643c:	4770      	bx	lr

0800643e <memcpy>:
 800643e:	440a      	add	r2, r1
 8006440:	4291      	cmp	r1, r2
 8006442:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006446:	d100      	bne.n	800644a <memcpy+0xc>
 8006448:	4770      	bx	lr
 800644a:	b510      	push	{r4, lr}
 800644c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006450:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006454:	4291      	cmp	r1, r2
 8006456:	d1f9      	bne.n	800644c <memcpy+0xe>
 8006458:	bd10      	pop	{r4, pc}

0800645a <quorem>:
 800645a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800645e:	6903      	ldr	r3, [r0, #16]
 8006460:	690c      	ldr	r4, [r1, #16]
 8006462:	42a3      	cmp	r3, r4
 8006464:	4607      	mov	r7, r0
 8006466:	db7e      	blt.n	8006566 <quorem+0x10c>
 8006468:	3c01      	subs	r4, #1
 800646a:	f101 0814 	add.w	r8, r1, #20
 800646e:	f100 0514 	add.w	r5, r0, #20
 8006472:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006476:	9301      	str	r3, [sp, #4]
 8006478:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800647c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006480:	3301      	adds	r3, #1
 8006482:	429a      	cmp	r2, r3
 8006484:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006488:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800648c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006490:	d331      	bcc.n	80064f6 <quorem+0x9c>
 8006492:	f04f 0e00 	mov.w	lr, #0
 8006496:	4640      	mov	r0, r8
 8006498:	46ac      	mov	ip, r5
 800649a:	46f2      	mov	sl, lr
 800649c:	f850 2b04 	ldr.w	r2, [r0], #4
 80064a0:	b293      	uxth	r3, r2
 80064a2:	fb06 e303 	mla	r3, r6, r3, lr
 80064a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80064aa:	0c1a      	lsrs	r2, r3, #16
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	ebaa 0303 	sub.w	r3, sl, r3
 80064b2:	f8dc a000 	ldr.w	sl, [ip]
 80064b6:	fa13 f38a 	uxtah	r3, r3, sl
 80064ba:	fb06 220e 	mla	r2, r6, lr, r2
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	9b00      	ldr	r3, [sp, #0]
 80064c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80064c6:	b292      	uxth	r2, r2
 80064c8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80064cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80064d0:	f8bd 3000 	ldrh.w	r3, [sp]
 80064d4:	4581      	cmp	r9, r0
 80064d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064da:	f84c 3b04 	str.w	r3, [ip], #4
 80064de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80064e2:	d2db      	bcs.n	800649c <quorem+0x42>
 80064e4:	f855 300b 	ldr.w	r3, [r5, fp]
 80064e8:	b92b      	cbnz	r3, 80064f6 <quorem+0x9c>
 80064ea:	9b01      	ldr	r3, [sp, #4]
 80064ec:	3b04      	subs	r3, #4
 80064ee:	429d      	cmp	r5, r3
 80064f0:	461a      	mov	r2, r3
 80064f2:	d32c      	bcc.n	800654e <quorem+0xf4>
 80064f4:	613c      	str	r4, [r7, #16]
 80064f6:	4638      	mov	r0, r7
 80064f8:	f001 f9a8 	bl	800784c <__mcmp>
 80064fc:	2800      	cmp	r0, #0
 80064fe:	db22      	blt.n	8006546 <quorem+0xec>
 8006500:	3601      	adds	r6, #1
 8006502:	4629      	mov	r1, r5
 8006504:	2000      	movs	r0, #0
 8006506:	f858 2b04 	ldr.w	r2, [r8], #4
 800650a:	f8d1 c000 	ldr.w	ip, [r1]
 800650e:	b293      	uxth	r3, r2
 8006510:	1ac3      	subs	r3, r0, r3
 8006512:	0c12      	lsrs	r2, r2, #16
 8006514:	fa13 f38c 	uxtah	r3, r3, ip
 8006518:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800651c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006520:	b29b      	uxth	r3, r3
 8006522:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006526:	45c1      	cmp	r9, r8
 8006528:	f841 3b04 	str.w	r3, [r1], #4
 800652c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006530:	d2e9      	bcs.n	8006506 <quorem+0xac>
 8006532:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006536:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800653a:	b922      	cbnz	r2, 8006546 <quorem+0xec>
 800653c:	3b04      	subs	r3, #4
 800653e:	429d      	cmp	r5, r3
 8006540:	461a      	mov	r2, r3
 8006542:	d30a      	bcc.n	800655a <quorem+0x100>
 8006544:	613c      	str	r4, [r7, #16]
 8006546:	4630      	mov	r0, r6
 8006548:	b003      	add	sp, #12
 800654a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800654e:	6812      	ldr	r2, [r2, #0]
 8006550:	3b04      	subs	r3, #4
 8006552:	2a00      	cmp	r2, #0
 8006554:	d1ce      	bne.n	80064f4 <quorem+0x9a>
 8006556:	3c01      	subs	r4, #1
 8006558:	e7c9      	b.n	80064ee <quorem+0x94>
 800655a:	6812      	ldr	r2, [r2, #0]
 800655c:	3b04      	subs	r3, #4
 800655e:	2a00      	cmp	r2, #0
 8006560:	d1f0      	bne.n	8006544 <quorem+0xea>
 8006562:	3c01      	subs	r4, #1
 8006564:	e7eb      	b.n	800653e <quorem+0xe4>
 8006566:	2000      	movs	r0, #0
 8006568:	e7ee      	b.n	8006548 <quorem+0xee>
 800656a:	0000      	movs	r0, r0
 800656c:	0000      	movs	r0, r0
	...

08006570 <_dtoa_r>:
 8006570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006574:	ed2d 8b04 	vpush	{d8-d9}
 8006578:	69c5      	ldr	r5, [r0, #28]
 800657a:	b093      	sub	sp, #76	; 0x4c
 800657c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006580:	ec57 6b10 	vmov	r6, r7, d0
 8006584:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006588:	9107      	str	r1, [sp, #28]
 800658a:	4604      	mov	r4, r0
 800658c:	920a      	str	r2, [sp, #40]	; 0x28
 800658e:	930d      	str	r3, [sp, #52]	; 0x34
 8006590:	b975      	cbnz	r5, 80065b0 <_dtoa_r+0x40>
 8006592:	2010      	movs	r0, #16
 8006594:	f000 fe2a 	bl	80071ec <malloc>
 8006598:	4602      	mov	r2, r0
 800659a:	61e0      	str	r0, [r4, #28]
 800659c:	b920      	cbnz	r0, 80065a8 <_dtoa_r+0x38>
 800659e:	4bae      	ldr	r3, [pc, #696]	; (8006858 <_dtoa_r+0x2e8>)
 80065a0:	21ef      	movs	r1, #239	; 0xef
 80065a2:	48ae      	ldr	r0, [pc, #696]	; (800685c <_dtoa_r+0x2ec>)
 80065a4:	f001 fb10 	bl	8007bc8 <__assert_func>
 80065a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80065ac:	6005      	str	r5, [r0, #0]
 80065ae:	60c5      	str	r5, [r0, #12]
 80065b0:	69e3      	ldr	r3, [r4, #28]
 80065b2:	6819      	ldr	r1, [r3, #0]
 80065b4:	b151      	cbz	r1, 80065cc <_dtoa_r+0x5c>
 80065b6:	685a      	ldr	r2, [r3, #4]
 80065b8:	604a      	str	r2, [r1, #4]
 80065ba:	2301      	movs	r3, #1
 80065bc:	4093      	lsls	r3, r2
 80065be:	608b      	str	r3, [r1, #8]
 80065c0:	4620      	mov	r0, r4
 80065c2:	f000 ff07 	bl	80073d4 <_Bfree>
 80065c6:	69e3      	ldr	r3, [r4, #28]
 80065c8:	2200      	movs	r2, #0
 80065ca:	601a      	str	r2, [r3, #0]
 80065cc:	1e3b      	subs	r3, r7, #0
 80065ce:	bfbb      	ittet	lt
 80065d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80065d4:	9303      	strlt	r3, [sp, #12]
 80065d6:	2300      	movge	r3, #0
 80065d8:	2201      	movlt	r2, #1
 80065da:	bfac      	ite	ge
 80065dc:	f8c8 3000 	strge.w	r3, [r8]
 80065e0:	f8c8 2000 	strlt.w	r2, [r8]
 80065e4:	4b9e      	ldr	r3, [pc, #632]	; (8006860 <_dtoa_r+0x2f0>)
 80065e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80065ea:	ea33 0308 	bics.w	r3, r3, r8
 80065ee:	d11b      	bne.n	8006628 <_dtoa_r+0xb8>
 80065f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80065f2:	f242 730f 	movw	r3, #9999	; 0x270f
 80065f6:	6013      	str	r3, [r2, #0]
 80065f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80065fc:	4333      	orrs	r3, r6
 80065fe:	f000 8593 	beq.w	8007128 <_dtoa_r+0xbb8>
 8006602:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006604:	b963      	cbnz	r3, 8006620 <_dtoa_r+0xb0>
 8006606:	4b97      	ldr	r3, [pc, #604]	; (8006864 <_dtoa_r+0x2f4>)
 8006608:	e027      	b.n	800665a <_dtoa_r+0xea>
 800660a:	4b97      	ldr	r3, [pc, #604]	; (8006868 <_dtoa_r+0x2f8>)
 800660c:	9300      	str	r3, [sp, #0]
 800660e:	3308      	adds	r3, #8
 8006610:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006612:	6013      	str	r3, [r2, #0]
 8006614:	9800      	ldr	r0, [sp, #0]
 8006616:	b013      	add	sp, #76	; 0x4c
 8006618:	ecbd 8b04 	vpop	{d8-d9}
 800661c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006620:	4b90      	ldr	r3, [pc, #576]	; (8006864 <_dtoa_r+0x2f4>)
 8006622:	9300      	str	r3, [sp, #0]
 8006624:	3303      	adds	r3, #3
 8006626:	e7f3      	b.n	8006610 <_dtoa_r+0xa0>
 8006628:	ed9d 7b02 	vldr	d7, [sp, #8]
 800662c:	2200      	movs	r2, #0
 800662e:	ec51 0b17 	vmov	r0, r1, d7
 8006632:	eeb0 8a47 	vmov.f32	s16, s14
 8006636:	eef0 8a67 	vmov.f32	s17, s15
 800663a:	2300      	movs	r3, #0
 800663c:	f7fa fa44 	bl	8000ac8 <__aeabi_dcmpeq>
 8006640:	4681      	mov	r9, r0
 8006642:	b160      	cbz	r0, 800665e <_dtoa_r+0xee>
 8006644:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006646:	2301      	movs	r3, #1
 8006648:	6013      	str	r3, [r2, #0]
 800664a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800664c:	2b00      	cmp	r3, #0
 800664e:	f000 8568 	beq.w	8007122 <_dtoa_r+0xbb2>
 8006652:	4b86      	ldr	r3, [pc, #536]	; (800686c <_dtoa_r+0x2fc>)
 8006654:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006656:	6013      	str	r3, [r2, #0]
 8006658:	3b01      	subs	r3, #1
 800665a:	9300      	str	r3, [sp, #0]
 800665c:	e7da      	b.n	8006614 <_dtoa_r+0xa4>
 800665e:	aa10      	add	r2, sp, #64	; 0x40
 8006660:	a911      	add	r1, sp, #68	; 0x44
 8006662:	4620      	mov	r0, r4
 8006664:	eeb0 0a48 	vmov.f32	s0, s16
 8006668:	eef0 0a68 	vmov.f32	s1, s17
 800666c:	f001 f994 	bl	8007998 <__d2b>
 8006670:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006674:	4682      	mov	sl, r0
 8006676:	2d00      	cmp	r5, #0
 8006678:	d07f      	beq.n	800677a <_dtoa_r+0x20a>
 800667a:	ee18 3a90 	vmov	r3, s17
 800667e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006682:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006686:	ec51 0b18 	vmov	r0, r1, d8
 800668a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800668e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006692:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006696:	4619      	mov	r1, r3
 8006698:	2200      	movs	r2, #0
 800669a:	4b75      	ldr	r3, [pc, #468]	; (8006870 <_dtoa_r+0x300>)
 800669c:	f7f9 fdf4 	bl	8000288 <__aeabi_dsub>
 80066a0:	a367      	add	r3, pc, #412	; (adr r3, 8006840 <_dtoa_r+0x2d0>)
 80066a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a6:	f7f9 ffa7 	bl	80005f8 <__aeabi_dmul>
 80066aa:	a367      	add	r3, pc, #412	; (adr r3, 8006848 <_dtoa_r+0x2d8>)
 80066ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b0:	f7f9 fdec 	bl	800028c <__adddf3>
 80066b4:	4606      	mov	r6, r0
 80066b6:	4628      	mov	r0, r5
 80066b8:	460f      	mov	r7, r1
 80066ba:	f7f9 ff33 	bl	8000524 <__aeabi_i2d>
 80066be:	a364      	add	r3, pc, #400	; (adr r3, 8006850 <_dtoa_r+0x2e0>)
 80066c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c4:	f7f9 ff98 	bl	80005f8 <__aeabi_dmul>
 80066c8:	4602      	mov	r2, r0
 80066ca:	460b      	mov	r3, r1
 80066cc:	4630      	mov	r0, r6
 80066ce:	4639      	mov	r1, r7
 80066d0:	f7f9 fddc 	bl	800028c <__adddf3>
 80066d4:	4606      	mov	r6, r0
 80066d6:	460f      	mov	r7, r1
 80066d8:	f7fa fa3e 	bl	8000b58 <__aeabi_d2iz>
 80066dc:	2200      	movs	r2, #0
 80066de:	4683      	mov	fp, r0
 80066e0:	2300      	movs	r3, #0
 80066e2:	4630      	mov	r0, r6
 80066e4:	4639      	mov	r1, r7
 80066e6:	f7fa f9f9 	bl	8000adc <__aeabi_dcmplt>
 80066ea:	b148      	cbz	r0, 8006700 <_dtoa_r+0x190>
 80066ec:	4658      	mov	r0, fp
 80066ee:	f7f9 ff19 	bl	8000524 <__aeabi_i2d>
 80066f2:	4632      	mov	r2, r6
 80066f4:	463b      	mov	r3, r7
 80066f6:	f7fa f9e7 	bl	8000ac8 <__aeabi_dcmpeq>
 80066fa:	b908      	cbnz	r0, 8006700 <_dtoa_r+0x190>
 80066fc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006700:	f1bb 0f16 	cmp.w	fp, #22
 8006704:	d857      	bhi.n	80067b6 <_dtoa_r+0x246>
 8006706:	4b5b      	ldr	r3, [pc, #364]	; (8006874 <_dtoa_r+0x304>)
 8006708:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800670c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006710:	ec51 0b18 	vmov	r0, r1, d8
 8006714:	f7fa f9e2 	bl	8000adc <__aeabi_dcmplt>
 8006718:	2800      	cmp	r0, #0
 800671a:	d04e      	beq.n	80067ba <_dtoa_r+0x24a>
 800671c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006720:	2300      	movs	r3, #0
 8006722:	930c      	str	r3, [sp, #48]	; 0x30
 8006724:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006726:	1b5b      	subs	r3, r3, r5
 8006728:	1e5a      	subs	r2, r3, #1
 800672a:	bf45      	ittet	mi
 800672c:	f1c3 0301 	rsbmi	r3, r3, #1
 8006730:	9305      	strmi	r3, [sp, #20]
 8006732:	2300      	movpl	r3, #0
 8006734:	2300      	movmi	r3, #0
 8006736:	9206      	str	r2, [sp, #24]
 8006738:	bf54      	ite	pl
 800673a:	9305      	strpl	r3, [sp, #20]
 800673c:	9306      	strmi	r3, [sp, #24]
 800673e:	f1bb 0f00 	cmp.w	fp, #0
 8006742:	db3c      	blt.n	80067be <_dtoa_r+0x24e>
 8006744:	9b06      	ldr	r3, [sp, #24]
 8006746:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800674a:	445b      	add	r3, fp
 800674c:	9306      	str	r3, [sp, #24]
 800674e:	2300      	movs	r3, #0
 8006750:	9308      	str	r3, [sp, #32]
 8006752:	9b07      	ldr	r3, [sp, #28]
 8006754:	2b09      	cmp	r3, #9
 8006756:	d868      	bhi.n	800682a <_dtoa_r+0x2ba>
 8006758:	2b05      	cmp	r3, #5
 800675a:	bfc4      	itt	gt
 800675c:	3b04      	subgt	r3, #4
 800675e:	9307      	strgt	r3, [sp, #28]
 8006760:	9b07      	ldr	r3, [sp, #28]
 8006762:	f1a3 0302 	sub.w	r3, r3, #2
 8006766:	bfcc      	ite	gt
 8006768:	2500      	movgt	r5, #0
 800676a:	2501      	movle	r5, #1
 800676c:	2b03      	cmp	r3, #3
 800676e:	f200 8085 	bhi.w	800687c <_dtoa_r+0x30c>
 8006772:	e8df f003 	tbb	[pc, r3]
 8006776:	3b2e      	.short	0x3b2e
 8006778:	5839      	.short	0x5839
 800677a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800677e:	441d      	add	r5, r3
 8006780:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006784:	2b20      	cmp	r3, #32
 8006786:	bfc1      	itttt	gt
 8006788:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800678c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006790:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006794:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006798:	bfd6      	itet	le
 800679a:	f1c3 0320 	rsble	r3, r3, #32
 800679e:	ea48 0003 	orrgt.w	r0, r8, r3
 80067a2:	fa06 f003 	lslle.w	r0, r6, r3
 80067a6:	f7f9 fead 	bl	8000504 <__aeabi_ui2d>
 80067aa:	2201      	movs	r2, #1
 80067ac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80067b0:	3d01      	subs	r5, #1
 80067b2:	920e      	str	r2, [sp, #56]	; 0x38
 80067b4:	e76f      	b.n	8006696 <_dtoa_r+0x126>
 80067b6:	2301      	movs	r3, #1
 80067b8:	e7b3      	b.n	8006722 <_dtoa_r+0x1b2>
 80067ba:	900c      	str	r0, [sp, #48]	; 0x30
 80067bc:	e7b2      	b.n	8006724 <_dtoa_r+0x1b4>
 80067be:	9b05      	ldr	r3, [sp, #20]
 80067c0:	eba3 030b 	sub.w	r3, r3, fp
 80067c4:	9305      	str	r3, [sp, #20]
 80067c6:	f1cb 0300 	rsb	r3, fp, #0
 80067ca:	9308      	str	r3, [sp, #32]
 80067cc:	2300      	movs	r3, #0
 80067ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80067d0:	e7bf      	b.n	8006752 <_dtoa_r+0x1e2>
 80067d2:	2300      	movs	r3, #0
 80067d4:	9309      	str	r3, [sp, #36]	; 0x24
 80067d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067d8:	2b00      	cmp	r3, #0
 80067da:	dc52      	bgt.n	8006882 <_dtoa_r+0x312>
 80067dc:	2301      	movs	r3, #1
 80067de:	9301      	str	r3, [sp, #4]
 80067e0:	9304      	str	r3, [sp, #16]
 80067e2:	461a      	mov	r2, r3
 80067e4:	920a      	str	r2, [sp, #40]	; 0x28
 80067e6:	e00b      	b.n	8006800 <_dtoa_r+0x290>
 80067e8:	2301      	movs	r3, #1
 80067ea:	e7f3      	b.n	80067d4 <_dtoa_r+0x264>
 80067ec:	2300      	movs	r3, #0
 80067ee:	9309      	str	r3, [sp, #36]	; 0x24
 80067f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067f2:	445b      	add	r3, fp
 80067f4:	9301      	str	r3, [sp, #4]
 80067f6:	3301      	adds	r3, #1
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	9304      	str	r3, [sp, #16]
 80067fc:	bfb8      	it	lt
 80067fe:	2301      	movlt	r3, #1
 8006800:	69e0      	ldr	r0, [r4, #28]
 8006802:	2100      	movs	r1, #0
 8006804:	2204      	movs	r2, #4
 8006806:	f102 0614 	add.w	r6, r2, #20
 800680a:	429e      	cmp	r6, r3
 800680c:	d93d      	bls.n	800688a <_dtoa_r+0x31a>
 800680e:	6041      	str	r1, [r0, #4]
 8006810:	4620      	mov	r0, r4
 8006812:	f000 fd9f 	bl	8007354 <_Balloc>
 8006816:	9000      	str	r0, [sp, #0]
 8006818:	2800      	cmp	r0, #0
 800681a:	d139      	bne.n	8006890 <_dtoa_r+0x320>
 800681c:	4b16      	ldr	r3, [pc, #88]	; (8006878 <_dtoa_r+0x308>)
 800681e:	4602      	mov	r2, r0
 8006820:	f240 11af 	movw	r1, #431	; 0x1af
 8006824:	e6bd      	b.n	80065a2 <_dtoa_r+0x32>
 8006826:	2301      	movs	r3, #1
 8006828:	e7e1      	b.n	80067ee <_dtoa_r+0x27e>
 800682a:	2501      	movs	r5, #1
 800682c:	2300      	movs	r3, #0
 800682e:	9307      	str	r3, [sp, #28]
 8006830:	9509      	str	r5, [sp, #36]	; 0x24
 8006832:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006836:	9301      	str	r3, [sp, #4]
 8006838:	9304      	str	r3, [sp, #16]
 800683a:	2200      	movs	r2, #0
 800683c:	2312      	movs	r3, #18
 800683e:	e7d1      	b.n	80067e4 <_dtoa_r+0x274>
 8006840:	636f4361 	.word	0x636f4361
 8006844:	3fd287a7 	.word	0x3fd287a7
 8006848:	8b60c8b3 	.word	0x8b60c8b3
 800684c:	3fc68a28 	.word	0x3fc68a28
 8006850:	509f79fb 	.word	0x509f79fb
 8006854:	3fd34413 	.word	0x3fd34413
 8006858:	080082d1 	.word	0x080082d1
 800685c:	080082e8 	.word	0x080082e8
 8006860:	7ff00000 	.word	0x7ff00000
 8006864:	080082cd 	.word	0x080082cd
 8006868:	080082c4 	.word	0x080082c4
 800686c:	080082a1 	.word	0x080082a1
 8006870:	3ff80000 	.word	0x3ff80000
 8006874:	080083d8 	.word	0x080083d8
 8006878:	08008340 	.word	0x08008340
 800687c:	2301      	movs	r3, #1
 800687e:	9309      	str	r3, [sp, #36]	; 0x24
 8006880:	e7d7      	b.n	8006832 <_dtoa_r+0x2c2>
 8006882:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006884:	9301      	str	r3, [sp, #4]
 8006886:	9304      	str	r3, [sp, #16]
 8006888:	e7ba      	b.n	8006800 <_dtoa_r+0x290>
 800688a:	3101      	adds	r1, #1
 800688c:	0052      	lsls	r2, r2, #1
 800688e:	e7ba      	b.n	8006806 <_dtoa_r+0x296>
 8006890:	69e3      	ldr	r3, [r4, #28]
 8006892:	9a00      	ldr	r2, [sp, #0]
 8006894:	601a      	str	r2, [r3, #0]
 8006896:	9b04      	ldr	r3, [sp, #16]
 8006898:	2b0e      	cmp	r3, #14
 800689a:	f200 80a8 	bhi.w	80069ee <_dtoa_r+0x47e>
 800689e:	2d00      	cmp	r5, #0
 80068a0:	f000 80a5 	beq.w	80069ee <_dtoa_r+0x47e>
 80068a4:	f1bb 0f00 	cmp.w	fp, #0
 80068a8:	dd38      	ble.n	800691c <_dtoa_r+0x3ac>
 80068aa:	4bc0      	ldr	r3, [pc, #768]	; (8006bac <_dtoa_r+0x63c>)
 80068ac:	f00b 020f 	and.w	r2, fp, #15
 80068b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068b4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80068b8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80068bc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80068c0:	d019      	beq.n	80068f6 <_dtoa_r+0x386>
 80068c2:	4bbb      	ldr	r3, [pc, #748]	; (8006bb0 <_dtoa_r+0x640>)
 80068c4:	ec51 0b18 	vmov	r0, r1, d8
 80068c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80068cc:	f7f9 ffbe 	bl	800084c <__aeabi_ddiv>
 80068d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068d4:	f008 080f 	and.w	r8, r8, #15
 80068d8:	2503      	movs	r5, #3
 80068da:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006bb0 <_dtoa_r+0x640>
 80068de:	f1b8 0f00 	cmp.w	r8, #0
 80068e2:	d10a      	bne.n	80068fa <_dtoa_r+0x38a>
 80068e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068e8:	4632      	mov	r2, r6
 80068ea:	463b      	mov	r3, r7
 80068ec:	f7f9 ffae 	bl	800084c <__aeabi_ddiv>
 80068f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068f4:	e02b      	b.n	800694e <_dtoa_r+0x3de>
 80068f6:	2502      	movs	r5, #2
 80068f8:	e7ef      	b.n	80068da <_dtoa_r+0x36a>
 80068fa:	f018 0f01 	tst.w	r8, #1
 80068fe:	d008      	beq.n	8006912 <_dtoa_r+0x3a2>
 8006900:	4630      	mov	r0, r6
 8006902:	4639      	mov	r1, r7
 8006904:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006908:	f7f9 fe76 	bl	80005f8 <__aeabi_dmul>
 800690c:	3501      	adds	r5, #1
 800690e:	4606      	mov	r6, r0
 8006910:	460f      	mov	r7, r1
 8006912:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006916:	f109 0908 	add.w	r9, r9, #8
 800691a:	e7e0      	b.n	80068de <_dtoa_r+0x36e>
 800691c:	f000 809f 	beq.w	8006a5e <_dtoa_r+0x4ee>
 8006920:	f1cb 0600 	rsb	r6, fp, #0
 8006924:	4ba1      	ldr	r3, [pc, #644]	; (8006bac <_dtoa_r+0x63c>)
 8006926:	4fa2      	ldr	r7, [pc, #648]	; (8006bb0 <_dtoa_r+0x640>)
 8006928:	f006 020f 	and.w	r2, r6, #15
 800692c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006934:	ec51 0b18 	vmov	r0, r1, d8
 8006938:	f7f9 fe5e 	bl	80005f8 <__aeabi_dmul>
 800693c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006940:	1136      	asrs	r6, r6, #4
 8006942:	2300      	movs	r3, #0
 8006944:	2502      	movs	r5, #2
 8006946:	2e00      	cmp	r6, #0
 8006948:	d17e      	bne.n	8006a48 <_dtoa_r+0x4d8>
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1d0      	bne.n	80068f0 <_dtoa_r+0x380>
 800694e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006950:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006954:	2b00      	cmp	r3, #0
 8006956:	f000 8084 	beq.w	8006a62 <_dtoa_r+0x4f2>
 800695a:	4b96      	ldr	r3, [pc, #600]	; (8006bb4 <_dtoa_r+0x644>)
 800695c:	2200      	movs	r2, #0
 800695e:	4640      	mov	r0, r8
 8006960:	4649      	mov	r1, r9
 8006962:	f7fa f8bb 	bl	8000adc <__aeabi_dcmplt>
 8006966:	2800      	cmp	r0, #0
 8006968:	d07b      	beq.n	8006a62 <_dtoa_r+0x4f2>
 800696a:	9b04      	ldr	r3, [sp, #16]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d078      	beq.n	8006a62 <_dtoa_r+0x4f2>
 8006970:	9b01      	ldr	r3, [sp, #4]
 8006972:	2b00      	cmp	r3, #0
 8006974:	dd39      	ble.n	80069ea <_dtoa_r+0x47a>
 8006976:	4b90      	ldr	r3, [pc, #576]	; (8006bb8 <_dtoa_r+0x648>)
 8006978:	2200      	movs	r2, #0
 800697a:	4640      	mov	r0, r8
 800697c:	4649      	mov	r1, r9
 800697e:	f7f9 fe3b 	bl	80005f8 <__aeabi_dmul>
 8006982:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006986:	9e01      	ldr	r6, [sp, #4]
 8006988:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800698c:	3501      	adds	r5, #1
 800698e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006992:	4628      	mov	r0, r5
 8006994:	f7f9 fdc6 	bl	8000524 <__aeabi_i2d>
 8006998:	4642      	mov	r2, r8
 800699a:	464b      	mov	r3, r9
 800699c:	f7f9 fe2c 	bl	80005f8 <__aeabi_dmul>
 80069a0:	4b86      	ldr	r3, [pc, #536]	; (8006bbc <_dtoa_r+0x64c>)
 80069a2:	2200      	movs	r2, #0
 80069a4:	f7f9 fc72 	bl	800028c <__adddf3>
 80069a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80069ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069b0:	9303      	str	r3, [sp, #12]
 80069b2:	2e00      	cmp	r6, #0
 80069b4:	d158      	bne.n	8006a68 <_dtoa_r+0x4f8>
 80069b6:	4b82      	ldr	r3, [pc, #520]	; (8006bc0 <_dtoa_r+0x650>)
 80069b8:	2200      	movs	r2, #0
 80069ba:	4640      	mov	r0, r8
 80069bc:	4649      	mov	r1, r9
 80069be:	f7f9 fc63 	bl	8000288 <__aeabi_dsub>
 80069c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069c6:	4680      	mov	r8, r0
 80069c8:	4689      	mov	r9, r1
 80069ca:	f7fa f8a5 	bl	8000b18 <__aeabi_dcmpgt>
 80069ce:	2800      	cmp	r0, #0
 80069d0:	f040 8296 	bne.w	8006f00 <_dtoa_r+0x990>
 80069d4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80069d8:	4640      	mov	r0, r8
 80069da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80069de:	4649      	mov	r1, r9
 80069e0:	f7fa f87c 	bl	8000adc <__aeabi_dcmplt>
 80069e4:	2800      	cmp	r0, #0
 80069e6:	f040 8289 	bne.w	8006efc <_dtoa_r+0x98c>
 80069ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 80069ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f2c0 814e 	blt.w	8006c92 <_dtoa_r+0x722>
 80069f6:	f1bb 0f0e 	cmp.w	fp, #14
 80069fa:	f300 814a 	bgt.w	8006c92 <_dtoa_r+0x722>
 80069fe:	4b6b      	ldr	r3, [pc, #428]	; (8006bac <_dtoa_r+0x63c>)
 8006a00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006a04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f280 80dc 	bge.w	8006bc8 <_dtoa_r+0x658>
 8006a10:	9b04      	ldr	r3, [sp, #16]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f300 80d8 	bgt.w	8006bc8 <_dtoa_r+0x658>
 8006a18:	f040 826f 	bne.w	8006efa <_dtoa_r+0x98a>
 8006a1c:	4b68      	ldr	r3, [pc, #416]	; (8006bc0 <_dtoa_r+0x650>)
 8006a1e:	2200      	movs	r2, #0
 8006a20:	4640      	mov	r0, r8
 8006a22:	4649      	mov	r1, r9
 8006a24:	f7f9 fde8 	bl	80005f8 <__aeabi_dmul>
 8006a28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a2c:	f7fa f86a 	bl	8000b04 <__aeabi_dcmpge>
 8006a30:	9e04      	ldr	r6, [sp, #16]
 8006a32:	4637      	mov	r7, r6
 8006a34:	2800      	cmp	r0, #0
 8006a36:	f040 8245 	bne.w	8006ec4 <_dtoa_r+0x954>
 8006a3a:	9d00      	ldr	r5, [sp, #0]
 8006a3c:	2331      	movs	r3, #49	; 0x31
 8006a3e:	f805 3b01 	strb.w	r3, [r5], #1
 8006a42:	f10b 0b01 	add.w	fp, fp, #1
 8006a46:	e241      	b.n	8006ecc <_dtoa_r+0x95c>
 8006a48:	07f2      	lsls	r2, r6, #31
 8006a4a:	d505      	bpl.n	8006a58 <_dtoa_r+0x4e8>
 8006a4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a50:	f7f9 fdd2 	bl	80005f8 <__aeabi_dmul>
 8006a54:	3501      	adds	r5, #1
 8006a56:	2301      	movs	r3, #1
 8006a58:	1076      	asrs	r6, r6, #1
 8006a5a:	3708      	adds	r7, #8
 8006a5c:	e773      	b.n	8006946 <_dtoa_r+0x3d6>
 8006a5e:	2502      	movs	r5, #2
 8006a60:	e775      	b.n	800694e <_dtoa_r+0x3de>
 8006a62:	9e04      	ldr	r6, [sp, #16]
 8006a64:	465f      	mov	r7, fp
 8006a66:	e792      	b.n	800698e <_dtoa_r+0x41e>
 8006a68:	9900      	ldr	r1, [sp, #0]
 8006a6a:	4b50      	ldr	r3, [pc, #320]	; (8006bac <_dtoa_r+0x63c>)
 8006a6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006a70:	4431      	add	r1, r6
 8006a72:	9102      	str	r1, [sp, #8]
 8006a74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a76:	eeb0 9a47 	vmov.f32	s18, s14
 8006a7a:	eef0 9a67 	vmov.f32	s19, s15
 8006a7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006a82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a86:	2900      	cmp	r1, #0
 8006a88:	d044      	beq.n	8006b14 <_dtoa_r+0x5a4>
 8006a8a:	494e      	ldr	r1, [pc, #312]	; (8006bc4 <_dtoa_r+0x654>)
 8006a8c:	2000      	movs	r0, #0
 8006a8e:	f7f9 fedd 	bl	800084c <__aeabi_ddiv>
 8006a92:	ec53 2b19 	vmov	r2, r3, d9
 8006a96:	f7f9 fbf7 	bl	8000288 <__aeabi_dsub>
 8006a9a:	9d00      	ldr	r5, [sp, #0]
 8006a9c:	ec41 0b19 	vmov	d9, r0, r1
 8006aa0:	4649      	mov	r1, r9
 8006aa2:	4640      	mov	r0, r8
 8006aa4:	f7fa f858 	bl	8000b58 <__aeabi_d2iz>
 8006aa8:	4606      	mov	r6, r0
 8006aaa:	f7f9 fd3b 	bl	8000524 <__aeabi_i2d>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	4640      	mov	r0, r8
 8006ab4:	4649      	mov	r1, r9
 8006ab6:	f7f9 fbe7 	bl	8000288 <__aeabi_dsub>
 8006aba:	3630      	adds	r6, #48	; 0x30
 8006abc:	f805 6b01 	strb.w	r6, [r5], #1
 8006ac0:	ec53 2b19 	vmov	r2, r3, d9
 8006ac4:	4680      	mov	r8, r0
 8006ac6:	4689      	mov	r9, r1
 8006ac8:	f7fa f808 	bl	8000adc <__aeabi_dcmplt>
 8006acc:	2800      	cmp	r0, #0
 8006ace:	d164      	bne.n	8006b9a <_dtoa_r+0x62a>
 8006ad0:	4642      	mov	r2, r8
 8006ad2:	464b      	mov	r3, r9
 8006ad4:	4937      	ldr	r1, [pc, #220]	; (8006bb4 <_dtoa_r+0x644>)
 8006ad6:	2000      	movs	r0, #0
 8006ad8:	f7f9 fbd6 	bl	8000288 <__aeabi_dsub>
 8006adc:	ec53 2b19 	vmov	r2, r3, d9
 8006ae0:	f7f9 fffc 	bl	8000adc <__aeabi_dcmplt>
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	f040 80b6 	bne.w	8006c56 <_dtoa_r+0x6e6>
 8006aea:	9b02      	ldr	r3, [sp, #8]
 8006aec:	429d      	cmp	r5, r3
 8006aee:	f43f af7c 	beq.w	80069ea <_dtoa_r+0x47a>
 8006af2:	4b31      	ldr	r3, [pc, #196]	; (8006bb8 <_dtoa_r+0x648>)
 8006af4:	ec51 0b19 	vmov	r0, r1, d9
 8006af8:	2200      	movs	r2, #0
 8006afa:	f7f9 fd7d 	bl	80005f8 <__aeabi_dmul>
 8006afe:	4b2e      	ldr	r3, [pc, #184]	; (8006bb8 <_dtoa_r+0x648>)
 8006b00:	ec41 0b19 	vmov	d9, r0, r1
 8006b04:	2200      	movs	r2, #0
 8006b06:	4640      	mov	r0, r8
 8006b08:	4649      	mov	r1, r9
 8006b0a:	f7f9 fd75 	bl	80005f8 <__aeabi_dmul>
 8006b0e:	4680      	mov	r8, r0
 8006b10:	4689      	mov	r9, r1
 8006b12:	e7c5      	b.n	8006aa0 <_dtoa_r+0x530>
 8006b14:	ec51 0b17 	vmov	r0, r1, d7
 8006b18:	f7f9 fd6e 	bl	80005f8 <__aeabi_dmul>
 8006b1c:	9b02      	ldr	r3, [sp, #8]
 8006b1e:	9d00      	ldr	r5, [sp, #0]
 8006b20:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b22:	ec41 0b19 	vmov	d9, r0, r1
 8006b26:	4649      	mov	r1, r9
 8006b28:	4640      	mov	r0, r8
 8006b2a:	f7fa f815 	bl	8000b58 <__aeabi_d2iz>
 8006b2e:	4606      	mov	r6, r0
 8006b30:	f7f9 fcf8 	bl	8000524 <__aeabi_i2d>
 8006b34:	3630      	adds	r6, #48	; 0x30
 8006b36:	4602      	mov	r2, r0
 8006b38:	460b      	mov	r3, r1
 8006b3a:	4640      	mov	r0, r8
 8006b3c:	4649      	mov	r1, r9
 8006b3e:	f7f9 fba3 	bl	8000288 <__aeabi_dsub>
 8006b42:	f805 6b01 	strb.w	r6, [r5], #1
 8006b46:	9b02      	ldr	r3, [sp, #8]
 8006b48:	429d      	cmp	r5, r3
 8006b4a:	4680      	mov	r8, r0
 8006b4c:	4689      	mov	r9, r1
 8006b4e:	f04f 0200 	mov.w	r2, #0
 8006b52:	d124      	bne.n	8006b9e <_dtoa_r+0x62e>
 8006b54:	4b1b      	ldr	r3, [pc, #108]	; (8006bc4 <_dtoa_r+0x654>)
 8006b56:	ec51 0b19 	vmov	r0, r1, d9
 8006b5a:	f7f9 fb97 	bl	800028c <__adddf3>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	460b      	mov	r3, r1
 8006b62:	4640      	mov	r0, r8
 8006b64:	4649      	mov	r1, r9
 8006b66:	f7f9 ffd7 	bl	8000b18 <__aeabi_dcmpgt>
 8006b6a:	2800      	cmp	r0, #0
 8006b6c:	d173      	bne.n	8006c56 <_dtoa_r+0x6e6>
 8006b6e:	ec53 2b19 	vmov	r2, r3, d9
 8006b72:	4914      	ldr	r1, [pc, #80]	; (8006bc4 <_dtoa_r+0x654>)
 8006b74:	2000      	movs	r0, #0
 8006b76:	f7f9 fb87 	bl	8000288 <__aeabi_dsub>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	4640      	mov	r0, r8
 8006b80:	4649      	mov	r1, r9
 8006b82:	f7f9 ffab 	bl	8000adc <__aeabi_dcmplt>
 8006b86:	2800      	cmp	r0, #0
 8006b88:	f43f af2f 	beq.w	80069ea <_dtoa_r+0x47a>
 8006b8c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006b8e:	1e6b      	subs	r3, r5, #1
 8006b90:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006b96:	2b30      	cmp	r3, #48	; 0x30
 8006b98:	d0f8      	beq.n	8006b8c <_dtoa_r+0x61c>
 8006b9a:	46bb      	mov	fp, r7
 8006b9c:	e04a      	b.n	8006c34 <_dtoa_r+0x6c4>
 8006b9e:	4b06      	ldr	r3, [pc, #24]	; (8006bb8 <_dtoa_r+0x648>)
 8006ba0:	f7f9 fd2a 	bl	80005f8 <__aeabi_dmul>
 8006ba4:	4680      	mov	r8, r0
 8006ba6:	4689      	mov	r9, r1
 8006ba8:	e7bd      	b.n	8006b26 <_dtoa_r+0x5b6>
 8006baa:	bf00      	nop
 8006bac:	080083d8 	.word	0x080083d8
 8006bb0:	080083b0 	.word	0x080083b0
 8006bb4:	3ff00000 	.word	0x3ff00000
 8006bb8:	40240000 	.word	0x40240000
 8006bbc:	401c0000 	.word	0x401c0000
 8006bc0:	40140000 	.word	0x40140000
 8006bc4:	3fe00000 	.word	0x3fe00000
 8006bc8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006bcc:	9d00      	ldr	r5, [sp, #0]
 8006bce:	4642      	mov	r2, r8
 8006bd0:	464b      	mov	r3, r9
 8006bd2:	4630      	mov	r0, r6
 8006bd4:	4639      	mov	r1, r7
 8006bd6:	f7f9 fe39 	bl	800084c <__aeabi_ddiv>
 8006bda:	f7f9 ffbd 	bl	8000b58 <__aeabi_d2iz>
 8006bde:	9001      	str	r0, [sp, #4]
 8006be0:	f7f9 fca0 	bl	8000524 <__aeabi_i2d>
 8006be4:	4642      	mov	r2, r8
 8006be6:	464b      	mov	r3, r9
 8006be8:	f7f9 fd06 	bl	80005f8 <__aeabi_dmul>
 8006bec:	4602      	mov	r2, r0
 8006bee:	460b      	mov	r3, r1
 8006bf0:	4630      	mov	r0, r6
 8006bf2:	4639      	mov	r1, r7
 8006bf4:	f7f9 fb48 	bl	8000288 <__aeabi_dsub>
 8006bf8:	9e01      	ldr	r6, [sp, #4]
 8006bfa:	9f04      	ldr	r7, [sp, #16]
 8006bfc:	3630      	adds	r6, #48	; 0x30
 8006bfe:	f805 6b01 	strb.w	r6, [r5], #1
 8006c02:	9e00      	ldr	r6, [sp, #0]
 8006c04:	1bae      	subs	r6, r5, r6
 8006c06:	42b7      	cmp	r7, r6
 8006c08:	4602      	mov	r2, r0
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	d134      	bne.n	8006c78 <_dtoa_r+0x708>
 8006c0e:	f7f9 fb3d 	bl	800028c <__adddf3>
 8006c12:	4642      	mov	r2, r8
 8006c14:	464b      	mov	r3, r9
 8006c16:	4606      	mov	r6, r0
 8006c18:	460f      	mov	r7, r1
 8006c1a:	f7f9 ff7d 	bl	8000b18 <__aeabi_dcmpgt>
 8006c1e:	b9c8      	cbnz	r0, 8006c54 <_dtoa_r+0x6e4>
 8006c20:	4642      	mov	r2, r8
 8006c22:	464b      	mov	r3, r9
 8006c24:	4630      	mov	r0, r6
 8006c26:	4639      	mov	r1, r7
 8006c28:	f7f9 ff4e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c2c:	b110      	cbz	r0, 8006c34 <_dtoa_r+0x6c4>
 8006c2e:	9b01      	ldr	r3, [sp, #4]
 8006c30:	07db      	lsls	r3, r3, #31
 8006c32:	d40f      	bmi.n	8006c54 <_dtoa_r+0x6e4>
 8006c34:	4651      	mov	r1, sl
 8006c36:	4620      	mov	r0, r4
 8006c38:	f000 fbcc 	bl	80073d4 <_Bfree>
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006c40:	702b      	strb	r3, [r5, #0]
 8006c42:	f10b 0301 	add.w	r3, fp, #1
 8006c46:	6013      	str	r3, [r2, #0]
 8006c48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	f43f ace2 	beq.w	8006614 <_dtoa_r+0xa4>
 8006c50:	601d      	str	r5, [r3, #0]
 8006c52:	e4df      	b.n	8006614 <_dtoa_r+0xa4>
 8006c54:	465f      	mov	r7, fp
 8006c56:	462b      	mov	r3, r5
 8006c58:	461d      	mov	r5, r3
 8006c5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c5e:	2a39      	cmp	r2, #57	; 0x39
 8006c60:	d106      	bne.n	8006c70 <_dtoa_r+0x700>
 8006c62:	9a00      	ldr	r2, [sp, #0]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d1f7      	bne.n	8006c58 <_dtoa_r+0x6e8>
 8006c68:	9900      	ldr	r1, [sp, #0]
 8006c6a:	2230      	movs	r2, #48	; 0x30
 8006c6c:	3701      	adds	r7, #1
 8006c6e:	700a      	strb	r2, [r1, #0]
 8006c70:	781a      	ldrb	r2, [r3, #0]
 8006c72:	3201      	adds	r2, #1
 8006c74:	701a      	strb	r2, [r3, #0]
 8006c76:	e790      	b.n	8006b9a <_dtoa_r+0x62a>
 8006c78:	4ba3      	ldr	r3, [pc, #652]	; (8006f08 <_dtoa_r+0x998>)
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f7f9 fcbc 	bl	80005f8 <__aeabi_dmul>
 8006c80:	2200      	movs	r2, #0
 8006c82:	2300      	movs	r3, #0
 8006c84:	4606      	mov	r6, r0
 8006c86:	460f      	mov	r7, r1
 8006c88:	f7f9 ff1e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c8c:	2800      	cmp	r0, #0
 8006c8e:	d09e      	beq.n	8006bce <_dtoa_r+0x65e>
 8006c90:	e7d0      	b.n	8006c34 <_dtoa_r+0x6c4>
 8006c92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c94:	2a00      	cmp	r2, #0
 8006c96:	f000 80ca 	beq.w	8006e2e <_dtoa_r+0x8be>
 8006c9a:	9a07      	ldr	r2, [sp, #28]
 8006c9c:	2a01      	cmp	r2, #1
 8006c9e:	f300 80ad 	bgt.w	8006dfc <_dtoa_r+0x88c>
 8006ca2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ca4:	2a00      	cmp	r2, #0
 8006ca6:	f000 80a5 	beq.w	8006df4 <_dtoa_r+0x884>
 8006caa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006cae:	9e08      	ldr	r6, [sp, #32]
 8006cb0:	9d05      	ldr	r5, [sp, #20]
 8006cb2:	9a05      	ldr	r2, [sp, #20]
 8006cb4:	441a      	add	r2, r3
 8006cb6:	9205      	str	r2, [sp, #20]
 8006cb8:	9a06      	ldr	r2, [sp, #24]
 8006cba:	2101      	movs	r1, #1
 8006cbc:	441a      	add	r2, r3
 8006cbe:	4620      	mov	r0, r4
 8006cc0:	9206      	str	r2, [sp, #24]
 8006cc2:	f000 fc3d 	bl	8007540 <__i2b>
 8006cc6:	4607      	mov	r7, r0
 8006cc8:	b165      	cbz	r5, 8006ce4 <_dtoa_r+0x774>
 8006cca:	9b06      	ldr	r3, [sp, #24]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	dd09      	ble.n	8006ce4 <_dtoa_r+0x774>
 8006cd0:	42ab      	cmp	r3, r5
 8006cd2:	9a05      	ldr	r2, [sp, #20]
 8006cd4:	bfa8      	it	ge
 8006cd6:	462b      	movge	r3, r5
 8006cd8:	1ad2      	subs	r2, r2, r3
 8006cda:	9205      	str	r2, [sp, #20]
 8006cdc:	9a06      	ldr	r2, [sp, #24]
 8006cde:	1aed      	subs	r5, r5, r3
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	9306      	str	r3, [sp, #24]
 8006ce4:	9b08      	ldr	r3, [sp, #32]
 8006ce6:	b1f3      	cbz	r3, 8006d26 <_dtoa_r+0x7b6>
 8006ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f000 80a3 	beq.w	8006e36 <_dtoa_r+0x8c6>
 8006cf0:	2e00      	cmp	r6, #0
 8006cf2:	dd10      	ble.n	8006d16 <_dtoa_r+0x7a6>
 8006cf4:	4639      	mov	r1, r7
 8006cf6:	4632      	mov	r2, r6
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	f000 fce1 	bl	80076c0 <__pow5mult>
 8006cfe:	4652      	mov	r2, sl
 8006d00:	4601      	mov	r1, r0
 8006d02:	4607      	mov	r7, r0
 8006d04:	4620      	mov	r0, r4
 8006d06:	f000 fc31 	bl	800756c <__multiply>
 8006d0a:	4651      	mov	r1, sl
 8006d0c:	4680      	mov	r8, r0
 8006d0e:	4620      	mov	r0, r4
 8006d10:	f000 fb60 	bl	80073d4 <_Bfree>
 8006d14:	46c2      	mov	sl, r8
 8006d16:	9b08      	ldr	r3, [sp, #32]
 8006d18:	1b9a      	subs	r2, r3, r6
 8006d1a:	d004      	beq.n	8006d26 <_dtoa_r+0x7b6>
 8006d1c:	4651      	mov	r1, sl
 8006d1e:	4620      	mov	r0, r4
 8006d20:	f000 fcce 	bl	80076c0 <__pow5mult>
 8006d24:	4682      	mov	sl, r0
 8006d26:	2101      	movs	r1, #1
 8006d28:	4620      	mov	r0, r4
 8006d2a:	f000 fc09 	bl	8007540 <__i2b>
 8006d2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	4606      	mov	r6, r0
 8006d34:	f340 8081 	ble.w	8006e3a <_dtoa_r+0x8ca>
 8006d38:	461a      	mov	r2, r3
 8006d3a:	4601      	mov	r1, r0
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	f000 fcbf 	bl	80076c0 <__pow5mult>
 8006d42:	9b07      	ldr	r3, [sp, #28]
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	4606      	mov	r6, r0
 8006d48:	dd7a      	ble.n	8006e40 <_dtoa_r+0x8d0>
 8006d4a:	f04f 0800 	mov.w	r8, #0
 8006d4e:	6933      	ldr	r3, [r6, #16]
 8006d50:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006d54:	6918      	ldr	r0, [r3, #16]
 8006d56:	f000 fba5 	bl	80074a4 <__hi0bits>
 8006d5a:	f1c0 0020 	rsb	r0, r0, #32
 8006d5e:	9b06      	ldr	r3, [sp, #24]
 8006d60:	4418      	add	r0, r3
 8006d62:	f010 001f 	ands.w	r0, r0, #31
 8006d66:	f000 8094 	beq.w	8006e92 <_dtoa_r+0x922>
 8006d6a:	f1c0 0320 	rsb	r3, r0, #32
 8006d6e:	2b04      	cmp	r3, #4
 8006d70:	f340 8085 	ble.w	8006e7e <_dtoa_r+0x90e>
 8006d74:	9b05      	ldr	r3, [sp, #20]
 8006d76:	f1c0 001c 	rsb	r0, r0, #28
 8006d7a:	4403      	add	r3, r0
 8006d7c:	9305      	str	r3, [sp, #20]
 8006d7e:	9b06      	ldr	r3, [sp, #24]
 8006d80:	4403      	add	r3, r0
 8006d82:	4405      	add	r5, r0
 8006d84:	9306      	str	r3, [sp, #24]
 8006d86:	9b05      	ldr	r3, [sp, #20]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	dd05      	ble.n	8006d98 <_dtoa_r+0x828>
 8006d8c:	4651      	mov	r1, sl
 8006d8e:	461a      	mov	r2, r3
 8006d90:	4620      	mov	r0, r4
 8006d92:	f000 fcef 	bl	8007774 <__lshift>
 8006d96:	4682      	mov	sl, r0
 8006d98:	9b06      	ldr	r3, [sp, #24]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	dd05      	ble.n	8006daa <_dtoa_r+0x83a>
 8006d9e:	4631      	mov	r1, r6
 8006da0:	461a      	mov	r2, r3
 8006da2:	4620      	mov	r0, r4
 8006da4:	f000 fce6 	bl	8007774 <__lshift>
 8006da8:	4606      	mov	r6, r0
 8006daa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d072      	beq.n	8006e96 <_dtoa_r+0x926>
 8006db0:	4631      	mov	r1, r6
 8006db2:	4650      	mov	r0, sl
 8006db4:	f000 fd4a 	bl	800784c <__mcmp>
 8006db8:	2800      	cmp	r0, #0
 8006dba:	da6c      	bge.n	8006e96 <_dtoa_r+0x926>
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	4651      	mov	r1, sl
 8006dc0:	220a      	movs	r2, #10
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	f000 fb28 	bl	8007418 <__multadd>
 8006dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dca:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006dce:	4682      	mov	sl, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f000 81b0 	beq.w	8007136 <_dtoa_r+0xbc6>
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	4639      	mov	r1, r7
 8006dda:	220a      	movs	r2, #10
 8006ddc:	4620      	mov	r0, r4
 8006dde:	f000 fb1b 	bl	8007418 <__multadd>
 8006de2:	9b01      	ldr	r3, [sp, #4]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	4607      	mov	r7, r0
 8006de8:	f300 8096 	bgt.w	8006f18 <_dtoa_r+0x9a8>
 8006dec:	9b07      	ldr	r3, [sp, #28]
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	dc59      	bgt.n	8006ea6 <_dtoa_r+0x936>
 8006df2:	e091      	b.n	8006f18 <_dtoa_r+0x9a8>
 8006df4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006df6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006dfa:	e758      	b.n	8006cae <_dtoa_r+0x73e>
 8006dfc:	9b04      	ldr	r3, [sp, #16]
 8006dfe:	1e5e      	subs	r6, r3, #1
 8006e00:	9b08      	ldr	r3, [sp, #32]
 8006e02:	42b3      	cmp	r3, r6
 8006e04:	bfbf      	itttt	lt
 8006e06:	9b08      	ldrlt	r3, [sp, #32]
 8006e08:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006e0a:	9608      	strlt	r6, [sp, #32]
 8006e0c:	1af3      	sublt	r3, r6, r3
 8006e0e:	bfb4      	ite	lt
 8006e10:	18d2      	addlt	r2, r2, r3
 8006e12:	1b9e      	subge	r6, r3, r6
 8006e14:	9b04      	ldr	r3, [sp, #16]
 8006e16:	bfbc      	itt	lt
 8006e18:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006e1a:	2600      	movlt	r6, #0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	bfb7      	itett	lt
 8006e20:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006e24:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006e28:	1a9d      	sublt	r5, r3, r2
 8006e2a:	2300      	movlt	r3, #0
 8006e2c:	e741      	b.n	8006cb2 <_dtoa_r+0x742>
 8006e2e:	9e08      	ldr	r6, [sp, #32]
 8006e30:	9d05      	ldr	r5, [sp, #20]
 8006e32:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006e34:	e748      	b.n	8006cc8 <_dtoa_r+0x758>
 8006e36:	9a08      	ldr	r2, [sp, #32]
 8006e38:	e770      	b.n	8006d1c <_dtoa_r+0x7ac>
 8006e3a:	9b07      	ldr	r3, [sp, #28]
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	dc19      	bgt.n	8006e74 <_dtoa_r+0x904>
 8006e40:	9b02      	ldr	r3, [sp, #8]
 8006e42:	b9bb      	cbnz	r3, 8006e74 <_dtoa_r+0x904>
 8006e44:	9b03      	ldr	r3, [sp, #12]
 8006e46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e4a:	b99b      	cbnz	r3, 8006e74 <_dtoa_r+0x904>
 8006e4c:	9b03      	ldr	r3, [sp, #12]
 8006e4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e52:	0d1b      	lsrs	r3, r3, #20
 8006e54:	051b      	lsls	r3, r3, #20
 8006e56:	b183      	cbz	r3, 8006e7a <_dtoa_r+0x90a>
 8006e58:	9b05      	ldr	r3, [sp, #20]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	9305      	str	r3, [sp, #20]
 8006e5e:	9b06      	ldr	r3, [sp, #24]
 8006e60:	3301      	adds	r3, #1
 8006e62:	9306      	str	r3, [sp, #24]
 8006e64:	f04f 0801 	mov.w	r8, #1
 8006e68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	f47f af6f 	bne.w	8006d4e <_dtoa_r+0x7de>
 8006e70:	2001      	movs	r0, #1
 8006e72:	e774      	b.n	8006d5e <_dtoa_r+0x7ee>
 8006e74:	f04f 0800 	mov.w	r8, #0
 8006e78:	e7f6      	b.n	8006e68 <_dtoa_r+0x8f8>
 8006e7a:	4698      	mov	r8, r3
 8006e7c:	e7f4      	b.n	8006e68 <_dtoa_r+0x8f8>
 8006e7e:	d082      	beq.n	8006d86 <_dtoa_r+0x816>
 8006e80:	9a05      	ldr	r2, [sp, #20]
 8006e82:	331c      	adds	r3, #28
 8006e84:	441a      	add	r2, r3
 8006e86:	9205      	str	r2, [sp, #20]
 8006e88:	9a06      	ldr	r2, [sp, #24]
 8006e8a:	441a      	add	r2, r3
 8006e8c:	441d      	add	r5, r3
 8006e8e:	9206      	str	r2, [sp, #24]
 8006e90:	e779      	b.n	8006d86 <_dtoa_r+0x816>
 8006e92:	4603      	mov	r3, r0
 8006e94:	e7f4      	b.n	8006e80 <_dtoa_r+0x910>
 8006e96:	9b04      	ldr	r3, [sp, #16]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	dc37      	bgt.n	8006f0c <_dtoa_r+0x99c>
 8006e9c:	9b07      	ldr	r3, [sp, #28]
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	dd34      	ble.n	8006f0c <_dtoa_r+0x99c>
 8006ea2:	9b04      	ldr	r3, [sp, #16]
 8006ea4:	9301      	str	r3, [sp, #4]
 8006ea6:	9b01      	ldr	r3, [sp, #4]
 8006ea8:	b963      	cbnz	r3, 8006ec4 <_dtoa_r+0x954>
 8006eaa:	4631      	mov	r1, r6
 8006eac:	2205      	movs	r2, #5
 8006eae:	4620      	mov	r0, r4
 8006eb0:	f000 fab2 	bl	8007418 <__multadd>
 8006eb4:	4601      	mov	r1, r0
 8006eb6:	4606      	mov	r6, r0
 8006eb8:	4650      	mov	r0, sl
 8006eba:	f000 fcc7 	bl	800784c <__mcmp>
 8006ebe:	2800      	cmp	r0, #0
 8006ec0:	f73f adbb 	bgt.w	8006a3a <_dtoa_r+0x4ca>
 8006ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ec6:	9d00      	ldr	r5, [sp, #0]
 8006ec8:	ea6f 0b03 	mvn.w	fp, r3
 8006ecc:	f04f 0800 	mov.w	r8, #0
 8006ed0:	4631      	mov	r1, r6
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	f000 fa7e 	bl	80073d4 <_Bfree>
 8006ed8:	2f00      	cmp	r7, #0
 8006eda:	f43f aeab 	beq.w	8006c34 <_dtoa_r+0x6c4>
 8006ede:	f1b8 0f00 	cmp.w	r8, #0
 8006ee2:	d005      	beq.n	8006ef0 <_dtoa_r+0x980>
 8006ee4:	45b8      	cmp	r8, r7
 8006ee6:	d003      	beq.n	8006ef0 <_dtoa_r+0x980>
 8006ee8:	4641      	mov	r1, r8
 8006eea:	4620      	mov	r0, r4
 8006eec:	f000 fa72 	bl	80073d4 <_Bfree>
 8006ef0:	4639      	mov	r1, r7
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	f000 fa6e 	bl	80073d4 <_Bfree>
 8006ef8:	e69c      	b.n	8006c34 <_dtoa_r+0x6c4>
 8006efa:	2600      	movs	r6, #0
 8006efc:	4637      	mov	r7, r6
 8006efe:	e7e1      	b.n	8006ec4 <_dtoa_r+0x954>
 8006f00:	46bb      	mov	fp, r7
 8006f02:	4637      	mov	r7, r6
 8006f04:	e599      	b.n	8006a3a <_dtoa_r+0x4ca>
 8006f06:	bf00      	nop
 8006f08:	40240000 	.word	0x40240000
 8006f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	f000 80c8 	beq.w	80070a4 <_dtoa_r+0xb34>
 8006f14:	9b04      	ldr	r3, [sp, #16]
 8006f16:	9301      	str	r3, [sp, #4]
 8006f18:	2d00      	cmp	r5, #0
 8006f1a:	dd05      	ble.n	8006f28 <_dtoa_r+0x9b8>
 8006f1c:	4639      	mov	r1, r7
 8006f1e:	462a      	mov	r2, r5
 8006f20:	4620      	mov	r0, r4
 8006f22:	f000 fc27 	bl	8007774 <__lshift>
 8006f26:	4607      	mov	r7, r0
 8006f28:	f1b8 0f00 	cmp.w	r8, #0
 8006f2c:	d05b      	beq.n	8006fe6 <_dtoa_r+0xa76>
 8006f2e:	6879      	ldr	r1, [r7, #4]
 8006f30:	4620      	mov	r0, r4
 8006f32:	f000 fa0f 	bl	8007354 <_Balloc>
 8006f36:	4605      	mov	r5, r0
 8006f38:	b928      	cbnz	r0, 8006f46 <_dtoa_r+0x9d6>
 8006f3a:	4b83      	ldr	r3, [pc, #524]	; (8007148 <_dtoa_r+0xbd8>)
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006f42:	f7ff bb2e 	b.w	80065a2 <_dtoa_r+0x32>
 8006f46:	693a      	ldr	r2, [r7, #16]
 8006f48:	3202      	adds	r2, #2
 8006f4a:	0092      	lsls	r2, r2, #2
 8006f4c:	f107 010c 	add.w	r1, r7, #12
 8006f50:	300c      	adds	r0, #12
 8006f52:	f7ff fa74 	bl	800643e <memcpy>
 8006f56:	2201      	movs	r2, #1
 8006f58:	4629      	mov	r1, r5
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	f000 fc0a 	bl	8007774 <__lshift>
 8006f60:	9b00      	ldr	r3, [sp, #0]
 8006f62:	3301      	adds	r3, #1
 8006f64:	9304      	str	r3, [sp, #16]
 8006f66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	9308      	str	r3, [sp, #32]
 8006f6e:	9b02      	ldr	r3, [sp, #8]
 8006f70:	f003 0301 	and.w	r3, r3, #1
 8006f74:	46b8      	mov	r8, r7
 8006f76:	9306      	str	r3, [sp, #24]
 8006f78:	4607      	mov	r7, r0
 8006f7a:	9b04      	ldr	r3, [sp, #16]
 8006f7c:	4631      	mov	r1, r6
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	4650      	mov	r0, sl
 8006f82:	9301      	str	r3, [sp, #4]
 8006f84:	f7ff fa69 	bl	800645a <quorem>
 8006f88:	4641      	mov	r1, r8
 8006f8a:	9002      	str	r0, [sp, #8]
 8006f8c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006f90:	4650      	mov	r0, sl
 8006f92:	f000 fc5b 	bl	800784c <__mcmp>
 8006f96:	463a      	mov	r2, r7
 8006f98:	9005      	str	r0, [sp, #20]
 8006f9a:	4631      	mov	r1, r6
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	f000 fc71 	bl	8007884 <__mdiff>
 8006fa2:	68c2      	ldr	r2, [r0, #12]
 8006fa4:	4605      	mov	r5, r0
 8006fa6:	bb02      	cbnz	r2, 8006fea <_dtoa_r+0xa7a>
 8006fa8:	4601      	mov	r1, r0
 8006faa:	4650      	mov	r0, sl
 8006fac:	f000 fc4e 	bl	800784c <__mcmp>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	4629      	mov	r1, r5
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	9209      	str	r2, [sp, #36]	; 0x24
 8006fb8:	f000 fa0c 	bl	80073d4 <_Bfree>
 8006fbc:	9b07      	ldr	r3, [sp, #28]
 8006fbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fc0:	9d04      	ldr	r5, [sp, #16]
 8006fc2:	ea43 0102 	orr.w	r1, r3, r2
 8006fc6:	9b06      	ldr	r3, [sp, #24]
 8006fc8:	4319      	orrs	r1, r3
 8006fca:	d110      	bne.n	8006fee <_dtoa_r+0xa7e>
 8006fcc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006fd0:	d029      	beq.n	8007026 <_dtoa_r+0xab6>
 8006fd2:	9b05      	ldr	r3, [sp, #20]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	dd02      	ble.n	8006fde <_dtoa_r+0xa6e>
 8006fd8:	9b02      	ldr	r3, [sp, #8]
 8006fda:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006fde:	9b01      	ldr	r3, [sp, #4]
 8006fe0:	f883 9000 	strb.w	r9, [r3]
 8006fe4:	e774      	b.n	8006ed0 <_dtoa_r+0x960>
 8006fe6:	4638      	mov	r0, r7
 8006fe8:	e7ba      	b.n	8006f60 <_dtoa_r+0x9f0>
 8006fea:	2201      	movs	r2, #1
 8006fec:	e7e1      	b.n	8006fb2 <_dtoa_r+0xa42>
 8006fee:	9b05      	ldr	r3, [sp, #20]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	db04      	blt.n	8006ffe <_dtoa_r+0xa8e>
 8006ff4:	9907      	ldr	r1, [sp, #28]
 8006ff6:	430b      	orrs	r3, r1
 8006ff8:	9906      	ldr	r1, [sp, #24]
 8006ffa:	430b      	orrs	r3, r1
 8006ffc:	d120      	bne.n	8007040 <_dtoa_r+0xad0>
 8006ffe:	2a00      	cmp	r2, #0
 8007000:	dded      	ble.n	8006fde <_dtoa_r+0xa6e>
 8007002:	4651      	mov	r1, sl
 8007004:	2201      	movs	r2, #1
 8007006:	4620      	mov	r0, r4
 8007008:	f000 fbb4 	bl	8007774 <__lshift>
 800700c:	4631      	mov	r1, r6
 800700e:	4682      	mov	sl, r0
 8007010:	f000 fc1c 	bl	800784c <__mcmp>
 8007014:	2800      	cmp	r0, #0
 8007016:	dc03      	bgt.n	8007020 <_dtoa_r+0xab0>
 8007018:	d1e1      	bne.n	8006fde <_dtoa_r+0xa6e>
 800701a:	f019 0f01 	tst.w	r9, #1
 800701e:	d0de      	beq.n	8006fde <_dtoa_r+0xa6e>
 8007020:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007024:	d1d8      	bne.n	8006fd8 <_dtoa_r+0xa68>
 8007026:	9a01      	ldr	r2, [sp, #4]
 8007028:	2339      	movs	r3, #57	; 0x39
 800702a:	7013      	strb	r3, [r2, #0]
 800702c:	462b      	mov	r3, r5
 800702e:	461d      	mov	r5, r3
 8007030:	3b01      	subs	r3, #1
 8007032:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007036:	2a39      	cmp	r2, #57	; 0x39
 8007038:	d06c      	beq.n	8007114 <_dtoa_r+0xba4>
 800703a:	3201      	adds	r2, #1
 800703c:	701a      	strb	r2, [r3, #0]
 800703e:	e747      	b.n	8006ed0 <_dtoa_r+0x960>
 8007040:	2a00      	cmp	r2, #0
 8007042:	dd07      	ble.n	8007054 <_dtoa_r+0xae4>
 8007044:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007048:	d0ed      	beq.n	8007026 <_dtoa_r+0xab6>
 800704a:	9a01      	ldr	r2, [sp, #4]
 800704c:	f109 0301 	add.w	r3, r9, #1
 8007050:	7013      	strb	r3, [r2, #0]
 8007052:	e73d      	b.n	8006ed0 <_dtoa_r+0x960>
 8007054:	9b04      	ldr	r3, [sp, #16]
 8007056:	9a08      	ldr	r2, [sp, #32]
 8007058:	f803 9c01 	strb.w	r9, [r3, #-1]
 800705c:	4293      	cmp	r3, r2
 800705e:	d043      	beq.n	80070e8 <_dtoa_r+0xb78>
 8007060:	4651      	mov	r1, sl
 8007062:	2300      	movs	r3, #0
 8007064:	220a      	movs	r2, #10
 8007066:	4620      	mov	r0, r4
 8007068:	f000 f9d6 	bl	8007418 <__multadd>
 800706c:	45b8      	cmp	r8, r7
 800706e:	4682      	mov	sl, r0
 8007070:	f04f 0300 	mov.w	r3, #0
 8007074:	f04f 020a 	mov.w	r2, #10
 8007078:	4641      	mov	r1, r8
 800707a:	4620      	mov	r0, r4
 800707c:	d107      	bne.n	800708e <_dtoa_r+0xb1e>
 800707e:	f000 f9cb 	bl	8007418 <__multadd>
 8007082:	4680      	mov	r8, r0
 8007084:	4607      	mov	r7, r0
 8007086:	9b04      	ldr	r3, [sp, #16]
 8007088:	3301      	adds	r3, #1
 800708a:	9304      	str	r3, [sp, #16]
 800708c:	e775      	b.n	8006f7a <_dtoa_r+0xa0a>
 800708e:	f000 f9c3 	bl	8007418 <__multadd>
 8007092:	4639      	mov	r1, r7
 8007094:	4680      	mov	r8, r0
 8007096:	2300      	movs	r3, #0
 8007098:	220a      	movs	r2, #10
 800709a:	4620      	mov	r0, r4
 800709c:	f000 f9bc 	bl	8007418 <__multadd>
 80070a0:	4607      	mov	r7, r0
 80070a2:	e7f0      	b.n	8007086 <_dtoa_r+0xb16>
 80070a4:	9b04      	ldr	r3, [sp, #16]
 80070a6:	9301      	str	r3, [sp, #4]
 80070a8:	9d00      	ldr	r5, [sp, #0]
 80070aa:	4631      	mov	r1, r6
 80070ac:	4650      	mov	r0, sl
 80070ae:	f7ff f9d4 	bl	800645a <quorem>
 80070b2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80070b6:	9b00      	ldr	r3, [sp, #0]
 80070b8:	f805 9b01 	strb.w	r9, [r5], #1
 80070bc:	1aea      	subs	r2, r5, r3
 80070be:	9b01      	ldr	r3, [sp, #4]
 80070c0:	4293      	cmp	r3, r2
 80070c2:	dd07      	ble.n	80070d4 <_dtoa_r+0xb64>
 80070c4:	4651      	mov	r1, sl
 80070c6:	2300      	movs	r3, #0
 80070c8:	220a      	movs	r2, #10
 80070ca:	4620      	mov	r0, r4
 80070cc:	f000 f9a4 	bl	8007418 <__multadd>
 80070d0:	4682      	mov	sl, r0
 80070d2:	e7ea      	b.n	80070aa <_dtoa_r+0xb3a>
 80070d4:	9b01      	ldr	r3, [sp, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	bfc8      	it	gt
 80070da:	461d      	movgt	r5, r3
 80070dc:	9b00      	ldr	r3, [sp, #0]
 80070de:	bfd8      	it	le
 80070e0:	2501      	movle	r5, #1
 80070e2:	441d      	add	r5, r3
 80070e4:	f04f 0800 	mov.w	r8, #0
 80070e8:	4651      	mov	r1, sl
 80070ea:	2201      	movs	r2, #1
 80070ec:	4620      	mov	r0, r4
 80070ee:	f000 fb41 	bl	8007774 <__lshift>
 80070f2:	4631      	mov	r1, r6
 80070f4:	4682      	mov	sl, r0
 80070f6:	f000 fba9 	bl	800784c <__mcmp>
 80070fa:	2800      	cmp	r0, #0
 80070fc:	dc96      	bgt.n	800702c <_dtoa_r+0xabc>
 80070fe:	d102      	bne.n	8007106 <_dtoa_r+0xb96>
 8007100:	f019 0f01 	tst.w	r9, #1
 8007104:	d192      	bne.n	800702c <_dtoa_r+0xabc>
 8007106:	462b      	mov	r3, r5
 8007108:	461d      	mov	r5, r3
 800710a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800710e:	2a30      	cmp	r2, #48	; 0x30
 8007110:	d0fa      	beq.n	8007108 <_dtoa_r+0xb98>
 8007112:	e6dd      	b.n	8006ed0 <_dtoa_r+0x960>
 8007114:	9a00      	ldr	r2, [sp, #0]
 8007116:	429a      	cmp	r2, r3
 8007118:	d189      	bne.n	800702e <_dtoa_r+0xabe>
 800711a:	f10b 0b01 	add.w	fp, fp, #1
 800711e:	2331      	movs	r3, #49	; 0x31
 8007120:	e796      	b.n	8007050 <_dtoa_r+0xae0>
 8007122:	4b0a      	ldr	r3, [pc, #40]	; (800714c <_dtoa_r+0xbdc>)
 8007124:	f7ff ba99 	b.w	800665a <_dtoa_r+0xea>
 8007128:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800712a:	2b00      	cmp	r3, #0
 800712c:	f47f aa6d 	bne.w	800660a <_dtoa_r+0x9a>
 8007130:	4b07      	ldr	r3, [pc, #28]	; (8007150 <_dtoa_r+0xbe0>)
 8007132:	f7ff ba92 	b.w	800665a <_dtoa_r+0xea>
 8007136:	9b01      	ldr	r3, [sp, #4]
 8007138:	2b00      	cmp	r3, #0
 800713a:	dcb5      	bgt.n	80070a8 <_dtoa_r+0xb38>
 800713c:	9b07      	ldr	r3, [sp, #28]
 800713e:	2b02      	cmp	r3, #2
 8007140:	f73f aeb1 	bgt.w	8006ea6 <_dtoa_r+0x936>
 8007144:	e7b0      	b.n	80070a8 <_dtoa_r+0xb38>
 8007146:	bf00      	nop
 8007148:	08008340 	.word	0x08008340
 800714c:	080082a0 	.word	0x080082a0
 8007150:	080082c4 	.word	0x080082c4

08007154 <_free_r>:
 8007154:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007156:	2900      	cmp	r1, #0
 8007158:	d044      	beq.n	80071e4 <_free_r+0x90>
 800715a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800715e:	9001      	str	r0, [sp, #4]
 8007160:	2b00      	cmp	r3, #0
 8007162:	f1a1 0404 	sub.w	r4, r1, #4
 8007166:	bfb8      	it	lt
 8007168:	18e4      	addlt	r4, r4, r3
 800716a:	f000 f8e7 	bl	800733c <__malloc_lock>
 800716e:	4a1e      	ldr	r2, [pc, #120]	; (80071e8 <_free_r+0x94>)
 8007170:	9801      	ldr	r0, [sp, #4]
 8007172:	6813      	ldr	r3, [r2, #0]
 8007174:	b933      	cbnz	r3, 8007184 <_free_r+0x30>
 8007176:	6063      	str	r3, [r4, #4]
 8007178:	6014      	str	r4, [r2, #0]
 800717a:	b003      	add	sp, #12
 800717c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007180:	f000 b8e2 	b.w	8007348 <__malloc_unlock>
 8007184:	42a3      	cmp	r3, r4
 8007186:	d908      	bls.n	800719a <_free_r+0x46>
 8007188:	6825      	ldr	r5, [r4, #0]
 800718a:	1961      	adds	r1, r4, r5
 800718c:	428b      	cmp	r3, r1
 800718e:	bf01      	itttt	eq
 8007190:	6819      	ldreq	r1, [r3, #0]
 8007192:	685b      	ldreq	r3, [r3, #4]
 8007194:	1949      	addeq	r1, r1, r5
 8007196:	6021      	streq	r1, [r4, #0]
 8007198:	e7ed      	b.n	8007176 <_free_r+0x22>
 800719a:	461a      	mov	r2, r3
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	b10b      	cbz	r3, 80071a4 <_free_r+0x50>
 80071a0:	42a3      	cmp	r3, r4
 80071a2:	d9fa      	bls.n	800719a <_free_r+0x46>
 80071a4:	6811      	ldr	r1, [r2, #0]
 80071a6:	1855      	adds	r5, r2, r1
 80071a8:	42a5      	cmp	r5, r4
 80071aa:	d10b      	bne.n	80071c4 <_free_r+0x70>
 80071ac:	6824      	ldr	r4, [r4, #0]
 80071ae:	4421      	add	r1, r4
 80071b0:	1854      	adds	r4, r2, r1
 80071b2:	42a3      	cmp	r3, r4
 80071b4:	6011      	str	r1, [r2, #0]
 80071b6:	d1e0      	bne.n	800717a <_free_r+0x26>
 80071b8:	681c      	ldr	r4, [r3, #0]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	6053      	str	r3, [r2, #4]
 80071be:	440c      	add	r4, r1
 80071c0:	6014      	str	r4, [r2, #0]
 80071c2:	e7da      	b.n	800717a <_free_r+0x26>
 80071c4:	d902      	bls.n	80071cc <_free_r+0x78>
 80071c6:	230c      	movs	r3, #12
 80071c8:	6003      	str	r3, [r0, #0]
 80071ca:	e7d6      	b.n	800717a <_free_r+0x26>
 80071cc:	6825      	ldr	r5, [r4, #0]
 80071ce:	1961      	adds	r1, r4, r5
 80071d0:	428b      	cmp	r3, r1
 80071d2:	bf04      	itt	eq
 80071d4:	6819      	ldreq	r1, [r3, #0]
 80071d6:	685b      	ldreq	r3, [r3, #4]
 80071d8:	6063      	str	r3, [r4, #4]
 80071da:	bf04      	itt	eq
 80071dc:	1949      	addeq	r1, r1, r5
 80071de:	6021      	streq	r1, [r4, #0]
 80071e0:	6054      	str	r4, [r2, #4]
 80071e2:	e7ca      	b.n	800717a <_free_r+0x26>
 80071e4:	b003      	add	sp, #12
 80071e6:	bd30      	pop	{r4, r5, pc}
 80071e8:	200044cc 	.word	0x200044cc

080071ec <malloc>:
 80071ec:	4b02      	ldr	r3, [pc, #8]	; (80071f8 <malloc+0xc>)
 80071ee:	4601      	mov	r1, r0
 80071f0:	6818      	ldr	r0, [r3, #0]
 80071f2:	f000 b823 	b.w	800723c <_malloc_r>
 80071f6:	bf00      	nop
 80071f8:	20000068 	.word	0x20000068

080071fc <sbrk_aligned>:
 80071fc:	b570      	push	{r4, r5, r6, lr}
 80071fe:	4e0e      	ldr	r6, [pc, #56]	; (8007238 <sbrk_aligned+0x3c>)
 8007200:	460c      	mov	r4, r1
 8007202:	6831      	ldr	r1, [r6, #0]
 8007204:	4605      	mov	r5, r0
 8007206:	b911      	cbnz	r1, 800720e <sbrk_aligned+0x12>
 8007208:	f000 fcce 	bl	8007ba8 <_sbrk_r>
 800720c:	6030      	str	r0, [r6, #0]
 800720e:	4621      	mov	r1, r4
 8007210:	4628      	mov	r0, r5
 8007212:	f000 fcc9 	bl	8007ba8 <_sbrk_r>
 8007216:	1c43      	adds	r3, r0, #1
 8007218:	d00a      	beq.n	8007230 <sbrk_aligned+0x34>
 800721a:	1cc4      	adds	r4, r0, #3
 800721c:	f024 0403 	bic.w	r4, r4, #3
 8007220:	42a0      	cmp	r0, r4
 8007222:	d007      	beq.n	8007234 <sbrk_aligned+0x38>
 8007224:	1a21      	subs	r1, r4, r0
 8007226:	4628      	mov	r0, r5
 8007228:	f000 fcbe 	bl	8007ba8 <_sbrk_r>
 800722c:	3001      	adds	r0, #1
 800722e:	d101      	bne.n	8007234 <sbrk_aligned+0x38>
 8007230:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007234:	4620      	mov	r0, r4
 8007236:	bd70      	pop	{r4, r5, r6, pc}
 8007238:	200044d0 	.word	0x200044d0

0800723c <_malloc_r>:
 800723c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007240:	1ccd      	adds	r5, r1, #3
 8007242:	f025 0503 	bic.w	r5, r5, #3
 8007246:	3508      	adds	r5, #8
 8007248:	2d0c      	cmp	r5, #12
 800724a:	bf38      	it	cc
 800724c:	250c      	movcc	r5, #12
 800724e:	2d00      	cmp	r5, #0
 8007250:	4607      	mov	r7, r0
 8007252:	db01      	blt.n	8007258 <_malloc_r+0x1c>
 8007254:	42a9      	cmp	r1, r5
 8007256:	d905      	bls.n	8007264 <_malloc_r+0x28>
 8007258:	230c      	movs	r3, #12
 800725a:	603b      	str	r3, [r7, #0]
 800725c:	2600      	movs	r6, #0
 800725e:	4630      	mov	r0, r6
 8007260:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007264:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007338 <_malloc_r+0xfc>
 8007268:	f000 f868 	bl	800733c <__malloc_lock>
 800726c:	f8d8 3000 	ldr.w	r3, [r8]
 8007270:	461c      	mov	r4, r3
 8007272:	bb5c      	cbnz	r4, 80072cc <_malloc_r+0x90>
 8007274:	4629      	mov	r1, r5
 8007276:	4638      	mov	r0, r7
 8007278:	f7ff ffc0 	bl	80071fc <sbrk_aligned>
 800727c:	1c43      	adds	r3, r0, #1
 800727e:	4604      	mov	r4, r0
 8007280:	d155      	bne.n	800732e <_malloc_r+0xf2>
 8007282:	f8d8 4000 	ldr.w	r4, [r8]
 8007286:	4626      	mov	r6, r4
 8007288:	2e00      	cmp	r6, #0
 800728a:	d145      	bne.n	8007318 <_malloc_r+0xdc>
 800728c:	2c00      	cmp	r4, #0
 800728e:	d048      	beq.n	8007322 <_malloc_r+0xe6>
 8007290:	6823      	ldr	r3, [r4, #0]
 8007292:	4631      	mov	r1, r6
 8007294:	4638      	mov	r0, r7
 8007296:	eb04 0903 	add.w	r9, r4, r3
 800729a:	f000 fc85 	bl	8007ba8 <_sbrk_r>
 800729e:	4581      	cmp	r9, r0
 80072a0:	d13f      	bne.n	8007322 <_malloc_r+0xe6>
 80072a2:	6821      	ldr	r1, [r4, #0]
 80072a4:	1a6d      	subs	r5, r5, r1
 80072a6:	4629      	mov	r1, r5
 80072a8:	4638      	mov	r0, r7
 80072aa:	f7ff ffa7 	bl	80071fc <sbrk_aligned>
 80072ae:	3001      	adds	r0, #1
 80072b0:	d037      	beq.n	8007322 <_malloc_r+0xe6>
 80072b2:	6823      	ldr	r3, [r4, #0]
 80072b4:	442b      	add	r3, r5
 80072b6:	6023      	str	r3, [r4, #0]
 80072b8:	f8d8 3000 	ldr.w	r3, [r8]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d038      	beq.n	8007332 <_malloc_r+0xf6>
 80072c0:	685a      	ldr	r2, [r3, #4]
 80072c2:	42a2      	cmp	r2, r4
 80072c4:	d12b      	bne.n	800731e <_malloc_r+0xe2>
 80072c6:	2200      	movs	r2, #0
 80072c8:	605a      	str	r2, [r3, #4]
 80072ca:	e00f      	b.n	80072ec <_malloc_r+0xb0>
 80072cc:	6822      	ldr	r2, [r4, #0]
 80072ce:	1b52      	subs	r2, r2, r5
 80072d0:	d41f      	bmi.n	8007312 <_malloc_r+0xd6>
 80072d2:	2a0b      	cmp	r2, #11
 80072d4:	d917      	bls.n	8007306 <_malloc_r+0xca>
 80072d6:	1961      	adds	r1, r4, r5
 80072d8:	42a3      	cmp	r3, r4
 80072da:	6025      	str	r5, [r4, #0]
 80072dc:	bf18      	it	ne
 80072de:	6059      	strne	r1, [r3, #4]
 80072e0:	6863      	ldr	r3, [r4, #4]
 80072e2:	bf08      	it	eq
 80072e4:	f8c8 1000 	streq.w	r1, [r8]
 80072e8:	5162      	str	r2, [r4, r5]
 80072ea:	604b      	str	r3, [r1, #4]
 80072ec:	4638      	mov	r0, r7
 80072ee:	f104 060b 	add.w	r6, r4, #11
 80072f2:	f000 f829 	bl	8007348 <__malloc_unlock>
 80072f6:	f026 0607 	bic.w	r6, r6, #7
 80072fa:	1d23      	adds	r3, r4, #4
 80072fc:	1af2      	subs	r2, r6, r3
 80072fe:	d0ae      	beq.n	800725e <_malloc_r+0x22>
 8007300:	1b9b      	subs	r3, r3, r6
 8007302:	50a3      	str	r3, [r4, r2]
 8007304:	e7ab      	b.n	800725e <_malloc_r+0x22>
 8007306:	42a3      	cmp	r3, r4
 8007308:	6862      	ldr	r2, [r4, #4]
 800730a:	d1dd      	bne.n	80072c8 <_malloc_r+0x8c>
 800730c:	f8c8 2000 	str.w	r2, [r8]
 8007310:	e7ec      	b.n	80072ec <_malloc_r+0xb0>
 8007312:	4623      	mov	r3, r4
 8007314:	6864      	ldr	r4, [r4, #4]
 8007316:	e7ac      	b.n	8007272 <_malloc_r+0x36>
 8007318:	4634      	mov	r4, r6
 800731a:	6876      	ldr	r6, [r6, #4]
 800731c:	e7b4      	b.n	8007288 <_malloc_r+0x4c>
 800731e:	4613      	mov	r3, r2
 8007320:	e7cc      	b.n	80072bc <_malloc_r+0x80>
 8007322:	230c      	movs	r3, #12
 8007324:	603b      	str	r3, [r7, #0]
 8007326:	4638      	mov	r0, r7
 8007328:	f000 f80e 	bl	8007348 <__malloc_unlock>
 800732c:	e797      	b.n	800725e <_malloc_r+0x22>
 800732e:	6025      	str	r5, [r4, #0]
 8007330:	e7dc      	b.n	80072ec <_malloc_r+0xb0>
 8007332:	605b      	str	r3, [r3, #4]
 8007334:	deff      	udf	#255	; 0xff
 8007336:	bf00      	nop
 8007338:	200044cc 	.word	0x200044cc

0800733c <__malloc_lock>:
 800733c:	4801      	ldr	r0, [pc, #4]	; (8007344 <__malloc_lock+0x8>)
 800733e:	f7ff b87c 	b.w	800643a <__retarget_lock_acquire_recursive>
 8007342:	bf00      	nop
 8007344:	200044c8 	.word	0x200044c8

08007348 <__malloc_unlock>:
 8007348:	4801      	ldr	r0, [pc, #4]	; (8007350 <__malloc_unlock+0x8>)
 800734a:	f7ff b877 	b.w	800643c <__retarget_lock_release_recursive>
 800734e:	bf00      	nop
 8007350:	200044c8 	.word	0x200044c8

08007354 <_Balloc>:
 8007354:	b570      	push	{r4, r5, r6, lr}
 8007356:	69c6      	ldr	r6, [r0, #28]
 8007358:	4604      	mov	r4, r0
 800735a:	460d      	mov	r5, r1
 800735c:	b976      	cbnz	r6, 800737c <_Balloc+0x28>
 800735e:	2010      	movs	r0, #16
 8007360:	f7ff ff44 	bl	80071ec <malloc>
 8007364:	4602      	mov	r2, r0
 8007366:	61e0      	str	r0, [r4, #28]
 8007368:	b920      	cbnz	r0, 8007374 <_Balloc+0x20>
 800736a:	4b18      	ldr	r3, [pc, #96]	; (80073cc <_Balloc+0x78>)
 800736c:	4818      	ldr	r0, [pc, #96]	; (80073d0 <_Balloc+0x7c>)
 800736e:	216b      	movs	r1, #107	; 0x6b
 8007370:	f000 fc2a 	bl	8007bc8 <__assert_func>
 8007374:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007378:	6006      	str	r6, [r0, #0]
 800737a:	60c6      	str	r6, [r0, #12]
 800737c:	69e6      	ldr	r6, [r4, #28]
 800737e:	68f3      	ldr	r3, [r6, #12]
 8007380:	b183      	cbz	r3, 80073a4 <_Balloc+0x50>
 8007382:	69e3      	ldr	r3, [r4, #28]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800738a:	b9b8      	cbnz	r0, 80073bc <_Balloc+0x68>
 800738c:	2101      	movs	r1, #1
 800738e:	fa01 f605 	lsl.w	r6, r1, r5
 8007392:	1d72      	adds	r2, r6, #5
 8007394:	0092      	lsls	r2, r2, #2
 8007396:	4620      	mov	r0, r4
 8007398:	f000 fc34 	bl	8007c04 <_calloc_r>
 800739c:	b160      	cbz	r0, 80073b8 <_Balloc+0x64>
 800739e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80073a2:	e00e      	b.n	80073c2 <_Balloc+0x6e>
 80073a4:	2221      	movs	r2, #33	; 0x21
 80073a6:	2104      	movs	r1, #4
 80073a8:	4620      	mov	r0, r4
 80073aa:	f000 fc2b 	bl	8007c04 <_calloc_r>
 80073ae:	69e3      	ldr	r3, [r4, #28]
 80073b0:	60f0      	str	r0, [r6, #12]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d1e4      	bne.n	8007382 <_Balloc+0x2e>
 80073b8:	2000      	movs	r0, #0
 80073ba:	bd70      	pop	{r4, r5, r6, pc}
 80073bc:	6802      	ldr	r2, [r0, #0]
 80073be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80073c2:	2300      	movs	r3, #0
 80073c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80073c8:	e7f7      	b.n	80073ba <_Balloc+0x66>
 80073ca:	bf00      	nop
 80073cc:	080082d1 	.word	0x080082d1
 80073d0:	08008351 	.word	0x08008351

080073d4 <_Bfree>:
 80073d4:	b570      	push	{r4, r5, r6, lr}
 80073d6:	69c6      	ldr	r6, [r0, #28]
 80073d8:	4605      	mov	r5, r0
 80073da:	460c      	mov	r4, r1
 80073dc:	b976      	cbnz	r6, 80073fc <_Bfree+0x28>
 80073de:	2010      	movs	r0, #16
 80073e0:	f7ff ff04 	bl	80071ec <malloc>
 80073e4:	4602      	mov	r2, r0
 80073e6:	61e8      	str	r0, [r5, #28]
 80073e8:	b920      	cbnz	r0, 80073f4 <_Bfree+0x20>
 80073ea:	4b09      	ldr	r3, [pc, #36]	; (8007410 <_Bfree+0x3c>)
 80073ec:	4809      	ldr	r0, [pc, #36]	; (8007414 <_Bfree+0x40>)
 80073ee:	218f      	movs	r1, #143	; 0x8f
 80073f0:	f000 fbea 	bl	8007bc8 <__assert_func>
 80073f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073f8:	6006      	str	r6, [r0, #0]
 80073fa:	60c6      	str	r6, [r0, #12]
 80073fc:	b13c      	cbz	r4, 800740e <_Bfree+0x3a>
 80073fe:	69eb      	ldr	r3, [r5, #28]
 8007400:	6862      	ldr	r2, [r4, #4]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007408:	6021      	str	r1, [r4, #0]
 800740a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800740e:	bd70      	pop	{r4, r5, r6, pc}
 8007410:	080082d1 	.word	0x080082d1
 8007414:	08008351 	.word	0x08008351

08007418 <__multadd>:
 8007418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800741c:	690d      	ldr	r5, [r1, #16]
 800741e:	4607      	mov	r7, r0
 8007420:	460c      	mov	r4, r1
 8007422:	461e      	mov	r6, r3
 8007424:	f101 0c14 	add.w	ip, r1, #20
 8007428:	2000      	movs	r0, #0
 800742a:	f8dc 3000 	ldr.w	r3, [ip]
 800742e:	b299      	uxth	r1, r3
 8007430:	fb02 6101 	mla	r1, r2, r1, r6
 8007434:	0c1e      	lsrs	r6, r3, #16
 8007436:	0c0b      	lsrs	r3, r1, #16
 8007438:	fb02 3306 	mla	r3, r2, r6, r3
 800743c:	b289      	uxth	r1, r1
 800743e:	3001      	adds	r0, #1
 8007440:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007444:	4285      	cmp	r5, r0
 8007446:	f84c 1b04 	str.w	r1, [ip], #4
 800744a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800744e:	dcec      	bgt.n	800742a <__multadd+0x12>
 8007450:	b30e      	cbz	r6, 8007496 <__multadd+0x7e>
 8007452:	68a3      	ldr	r3, [r4, #8]
 8007454:	42ab      	cmp	r3, r5
 8007456:	dc19      	bgt.n	800748c <__multadd+0x74>
 8007458:	6861      	ldr	r1, [r4, #4]
 800745a:	4638      	mov	r0, r7
 800745c:	3101      	adds	r1, #1
 800745e:	f7ff ff79 	bl	8007354 <_Balloc>
 8007462:	4680      	mov	r8, r0
 8007464:	b928      	cbnz	r0, 8007472 <__multadd+0x5a>
 8007466:	4602      	mov	r2, r0
 8007468:	4b0c      	ldr	r3, [pc, #48]	; (800749c <__multadd+0x84>)
 800746a:	480d      	ldr	r0, [pc, #52]	; (80074a0 <__multadd+0x88>)
 800746c:	21ba      	movs	r1, #186	; 0xba
 800746e:	f000 fbab 	bl	8007bc8 <__assert_func>
 8007472:	6922      	ldr	r2, [r4, #16]
 8007474:	3202      	adds	r2, #2
 8007476:	f104 010c 	add.w	r1, r4, #12
 800747a:	0092      	lsls	r2, r2, #2
 800747c:	300c      	adds	r0, #12
 800747e:	f7fe ffde 	bl	800643e <memcpy>
 8007482:	4621      	mov	r1, r4
 8007484:	4638      	mov	r0, r7
 8007486:	f7ff ffa5 	bl	80073d4 <_Bfree>
 800748a:	4644      	mov	r4, r8
 800748c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007490:	3501      	adds	r5, #1
 8007492:	615e      	str	r6, [r3, #20]
 8007494:	6125      	str	r5, [r4, #16]
 8007496:	4620      	mov	r0, r4
 8007498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800749c:	08008340 	.word	0x08008340
 80074a0:	08008351 	.word	0x08008351

080074a4 <__hi0bits>:
 80074a4:	0c03      	lsrs	r3, r0, #16
 80074a6:	041b      	lsls	r3, r3, #16
 80074a8:	b9d3      	cbnz	r3, 80074e0 <__hi0bits+0x3c>
 80074aa:	0400      	lsls	r0, r0, #16
 80074ac:	2310      	movs	r3, #16
 80074ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80074b2:	bf04      	itt	eq
 80074b4:	0200      	lsleq	r0, r0, #8
 80074b6:	3308      	addeq	r3, #8
 80074b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80074bc:	bf04      	itt	eq
 80074be:	0100      	lsleq	r0, r0, #4
 80074c0:	3304      	addeq	r3, #4
 80074c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80074c6:	bf04      	itt	eq
 80074c8:	0080      	lsleq	r0, r0, #2
 80074ca:	3302      	addeq	r3, #2
 80074cc:	2800      	cmp	r0, #0
 80074ce:	db05      	blt.n	80074dc <__hi0bits+0x38>
 80074d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80074d4:	f103 0301 	add.w	r3, r3, #1
 80074d8:	bf08      	it	eq
 80074da:	2320      	moveq	r3, #32
 80074dc:	4618      	mov	r0, r3
 80074de:	4770      	bx	lr
 80074e0:	2300      	movs	r3, #0
 80074e2:	e7e4      	b.n	80074ae <__hi0bits+0xa>

080074e4 <__lo0bits>:
 80074e4:	6803      	ldr	r3, [r0, #0]
 80074e6:	f013 0207 	ands.w	r2, r3, #7
 80074ea:	d00c      	beq.n	8007506 <__lo0bits+0x22>
 80074ec:	07d9      	lsls	r1, r3, #31
 80074ee:	d422      	bmi.n	8007536 <__lo0bits+0x52>
 80074f0:	079a      	lsls	r2, r3, #30
 80074f2:	bf49      	itett	mi
 80074f4:	085b      	lsrmi	r3, r3, #1
 80074f6:	089b      	lsrpl	r3, r3, #2
 80074f8:	6003      	strmi	r3, [r0, #0]
 80074fa:	2201      	movmi	r2, #1
 80074fc:	bf5c      	itt	pl
 80074fe:	6003      	strpl	r3, [r0, #0]
 8007500:	2202      	movpl	r2, #2
 8007502:	4610      	mov	r0, r2
 8007504:	4770      	bx	lr
 8007506:	b299      	uxth	r1, r3
 8007508:	b909      	cbnz	r1, 800750e <__lo0bits+0x2a>
 800750a:	0c1b      	lsrs	r3, r3, #16
 800750c:	2210      	movs	r2, #16
 800750e:	b2d9      	uxtb	r1, r3
 8007510:	b909      	cbnz	r1, 8007516 <__lo0bits+0x32>
 8007512:	3208      	adds	r2, #8
 8007514:	0a1b      	lsrs	r3, r3, #8
 8007516:	0719      	lsls	r1, r3, #28
 8007518:	bf04      	itt	eq
 800751a:	091b      	lsreq	r3, r3, #4
 800751c:	3204      	addeq	r2, #4
 800751e:	0799      	lsls	r1, r3, #30
 8007520:	bf04      	itt	eq
 8007522:	089b      	lsreq	r3, r3, #2
 8007524:	3202      	addeq	r2, #2
 8007526:	07d9      	lsls	r1, r3, #31
 8007528:	d403      	bmi.n	8007532 <__lo0bits+0x4e>
 800752a:	085b      	lsrs	r3, r3, #1
 800752c:	f102 0201 	add.w	r2, r2, #1
 8007530:	d003      	beq.n	800753a <__lo0bits+0x56>
 8007532:	6003      	str	r3, [r0, #0]
 8007534:	e7e5      	b.n	8007502 <__lo0bits+0x1e>
 8007536:	2200      	movs	r2, #0
 8007538:	e7e3      	b.n	8007502 <__lo0bits+0x1e>
 800753a:	2220      	movs	r2, #32
 800753c:	e7e1      	b.n	8007502 <__lo0bits+0x1e>
	...

08007540 <__i2b>:
 8007540:	b510      	push	{r4, lr}
 8007542:	460c      	mov	r4, r1
 8007544:	2101      	movs	r1, #1
 8007546:	f7ff ff05 	bl	8007354 <_Balloc>
 800754a:	4602      	mov	r2, r0
 800754c:	b928      	cbnz	r0, 800755a <__i2b+0x1a>
 800754e:	4b05      	ldr	r3, [pc, #20]	; (8007564 <__i2b+0x24>)
 8007550:	4805      	ldr	r0, [pc, #20]	; (8007568 <__i2b+0x28>)
 8007552:	f240 1145 	movw	r1, #325	; 0x145
 8007556:	f000 fb37 	bl	8007bc8 <__assert_func>
 800755a:	2301      	movs	r3, #1
 800755c:	6144      	str	r4, [r0, #20]
 800755e:	6103      	str	r3, [r0, #16]
 8007560:	bd10      	pop	{r4, pc}
 8007562:	bf00      	nop
 8007564:	08008340 	.word	0x08008340
 8007568:	08008351 	.word	0x08008351

0800756c <__multiply>:
 800756c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007570:	4691      	mov	r9, r2
 8007572:	690a      	ldr	r2, [r1, #16]
 8007574:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007578:	429a      	cmp	r2, r3
 800757a:	bfb8      	it	lt
 800757c:	460b      	movlt	r3, r1
 800757e:	460c      	mov	r4, r1
 8007580:	bfbc      	itt	lt
 8007582:	464c      	movlt	r4, r9
 8007584:	4699      	movlt	r9, r3
 8007586:	6927      	ldr	r7, [r4, #16]
 8007588:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800758c:	68a3      	ldr	r3, [r4, #8]
 800758e:	6861      	ldr	r1, [r4, #4]
 8007590:	eb07 060a 	add.w	r6, r7, sl
 8007594:	42b3      	cmp	r3, r6
 8007596:	b085      	sub	sp, #20
 8007598:	bfb8      	it	lt
 800759a:	3101      	addlt	r1, #1
 800759c:	f7ff feda 	bl	8007354 <_Balloc>
 80075a0:	b930      	cbnz	r0, 80075b0 <__multiply+0x44>
 80075a2:	4602      	mov	r2, r0
 80075a4:	4b44      	ldr	r3, [pc, #272]	; (80076b8 <__multiply+0x14c>)
 80075a6:	4845      	ldr	r0, [pc, #276]	; (80076bc <__multiply+0x150>)
 80075a8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80075ac:	f000 fb0c 	bl	8007bc8 <__assert_func>
 80075b0:	f100 0514 	add.w	r5, r0, #20
 80075b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80075b8:	462b      	mov	r3, r5
 80075ba:	2200      	movs	r2, #0
 80075bc:	4543      	cmp	r3, r8
 80075be:	d321      	bcc.n	8007604 <__multiply+0x98>
 80075c0:	f104 0314 	add.w	r3, r4, #20
 80075c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80075c8:	f109 0314 	add.w	r3, r9, #20
 80075cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80075d0:	9202      	str	r2, [sp, #8]
 80075d2:	1b3a      	subs	r2, r7, r4
 80075d4:	3a15      	subs	r2, #21
 80075d6:	f022 0203 	bic.w	r2, r2, #3
 80075da:	3204      	adds	r2, #4
 80075dc:	f104 0115 	add.w	r1, r4, #21
 80075e0:	428f      	cmp	r7, r1
 80075e2:	bf38      	it	cc
 80075e4:	2204      	movcc	r2, #4
 80075e6:	9201      	str	r2, [sp, #4]
 80075e8:	9a02      	ldr	r2, [sp, #8]
 80075ea:	9303      	str	r3, [sp, #12]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d80c      	bhi.n	800760a <__multiply+0x9e>
 80075f0:	2e00      	cmp	r6, #0
 80075f2:	dd03      	ble.n	80075fc <__multiply+0x90>
 80075f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d05b      	beq.n	80076b4 <__multiply+0x148>
 80075fc:	6106      	str	r6, [r0, #16]
 80075fe:	b005      	add	sp, #20
 8007600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007604:	f843 2b04 	str.w	r2, [r3], #4
 8007608:	e7d8      	b.n	80075bc <__multiply+0x50>
 800760a:	f8b3 a000 	ldrh.w	sl, [r3]
 800760e:	f1ba 0f00 	cmp.w	sl, #0
 8007612:	d024      	beq.n	800765e <__multiply+0xf2>
 8007614:	f104 0e14 	add.w	lr, r4, #20
 8007618:	46a9      	mov	r9, r5
 800761a:	f04f 0c00 	mov.w	ip, #0
 800761e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007622:	f8d9 1000 	ldr.w	r1, [r9]
 8007626:	fa1f fb82 	uxth.w	fp, r2
 800762a:	b289      	uxth	r1, r1
 800762c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007630:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007634:	f8d9 2000 	ldr.w	r2, [r9]
 8007638:	4461      	add	r1, ip
 800763a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800763e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007642:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007646:	b289      	uxth	r1, r1
 8007648:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800764c:	4577      	cmp	r7, lr
 800764e:	f849 1b04 	str.w	r1, [r9], #4
 8007652:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007656:	d8e2      	bhi.n	800761e <__multiply+0xb2>
 8007658:	9a01      	ldr	r2, [sp, #4]
 800765a:	f845 c002 	str.w	ip, [r5, r2]
 800765e:	9a03      	ldr	r2, [sp, #12]
 8007660:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007664:	3304      	adds	r3, #4
 8007666:	f1b9 0f00 	cmp.w	r9, #0
 800766a:	d021      	beq.n	80076b0 <__multiply+0x144>
 800766c:	6829      	ldr	r1, [r5, #0]
 800766e:	f104 0c14 	add.w	ip, r4, #20
 8007672:	46ae      	mov	lr, r5
 8007674:	f04f 0a00 	mov.w	sl, #0
 8007678:	f8bc b000 	ldrh.w	fp, [ip]
 800767c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007680:	fb09 220b 	mla	r2, r9, fp, r2
 8007684:	4452      	add	r2, sl
 8007686:	b289      	uxth	r1, r1
 8007688:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800768c:	f84e 1b04 	str.w	r1, [lr], #4
 8007690:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007694:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007698:	f8be 1000 	ldrh.w	r1, [lr]
 800769c:	fb09 110a 	mla	r1, r9, sl, r1
 80076a0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80076a4:	4567      	cmp	r7, ip
 80076a6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80076aa:	d8e5      	bhi.n	8007678 <__multiply+0x10c>
 80076ac:	9a01      	ldr	r2, [sp, #4]
 80076ae:	50a9      	str	r1, [r5, r2]
 80076b0:	3504      	adds	r5, #4
 80076b2:	e799      	b.n	80075e8 <__multiply+0x7c>
 80076b4:	3e01      	subs	r6, #1
 80076b6:	e79b      	b.n	80075f0 <__multiply+0x84>
 80076b8:	08008340 	.word	0x08008340
 80076bc:	08008351 	.word	0x08008351

080076c0 <__pow5mult>:
 80076c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076c4:	4615      	mov	r5, r2
 80076c6:	f012 0203 	ands.w	r2, r2, #3
 80076ca:	4606      	mov	r6, r0
 80076cc:	460f      	mov	r7, r1
 80076ce:	d007      	beq.n	80076e0 <__pow5mult+0x20>
 80076d0:	4c25      	ldr	r4, [pc, #148]	; (8007768 <__pow5mult+0xa8>)
 80076d2:	3a01      	subs	r2, #1
 80076d4:	2300      	movs	r3, #0
 80076d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80076da:	f7ff fe9d 	bl	8007418 <__multadd>
 80076de:	4607      	mov	r7, r0
 80076e0:	10ad      	asrs	r5, r5, #2
 80076e2:	d03d      	beq.n	8007760 <__pow5mult+0xa0>
 80076e4:	69f4      	ldr	r4, [r6, #28]
 80076e6:	b97c      	cbnz	r4, 8007708 <__pow5mult+0x48>
 80076e8:	2010      	movs	r0, #16
 80076ea:	f7ff fd7f 	bl	80071ec <malloc>
 80076ee:	4602      	mov	r2, r0
 80076f0:	61f0      	str	r0, [r6, #28]
 80076f2:	b928      	cbnz	r0, 8007700 <__pow5mult+0x40>
 80076f4:	4b1d      	ldr	r3, [pc, #116]	; (800776c <__pow5mult+0xac>)
 80076f6:	481e      	ldr	r0, [pc, #120]	; (8007770 <__pow5mult+0xb0>)
 80076f8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80076fc:	f000 fa64 	bl	8007bc8 <__assert_func>
 8007700:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007704:	6004      	str	r4, [r0, #0]
 8007706:	60c4      	str	r4, [r0, #12]
 8007708:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800770c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007710:	b94c      	cbnz	r4, 8007726 <__pow5mult+0x66>
 8007712:	f240 2171 	movw	r1, #625	; 0x271
 8007716:	4630      	mov	r0, r6
 8007718:	f7ff ff12 	bl	8007540 <__i2b>
 800771c:	2300      	movs	r3, #0
 800771e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007722:	4604      	mov	r4, r0
 8007724:	6003      	str	r3, [r0, #0]
 8007726:	f04f 0900 	mov.w	r9, #0
 800772a:	07eb      	lsls	r3, r5, #31
 800772c:	d50a      	bpl.n	8007744 <__pow5mult+0x84>
 800772e:	4639      	mov	r1, r7
 8007730:	4622      	mov	r2, r4
 8007732:	4630      	mov	r0, r6
 8007734:	f7ff ff1a 	bl	800756c <__multiply>
 8007738:	4639      	mov	r1, r7
 800773a:	4680      	mov	r8, r0
 800773c:	4630      	mov	r0, r6
 800773e:	f7ff fe49 	bl	80073d4 <_Bfree>
 8007742:	4647      	mov	r7, r8
 8007744:	106d      	asrs	r5, r5, #1
 8007746:	d00b      	beq.n	8007760 <__pow5mult+0xa0>
 8007748:	6820      	ldr	r0, [r4, #0]
 800774a:	b938      	cbnz	r0, 800775c <__pow5mult+0x9c>
 800774c:	4622      	mov	r2, r4
 800774e:	4621      	mov	r1, r4
 8007750:	4630      	mov	r0, r6
 8007752:	f7ff ff0b 	bl	800756c <__multiply>
 8007756:	6020      	str	r0, [r4, #0]
 8007758:	f8c0 9000 	str.w	r9, [r0]
 800775c:	4604      	mov	r4, r0
 800775e:	e7e4      	b.n	800772a <__pow5mult+0x6a>
 8007760:	4638      	mov	r0, r7
 8007762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007766:	bf00      	nop
 8007768:	080084a0 	.word	0x080084a0
 800776c:	080082d1 	.word	0x080082d1
 8007770:	08008351 	.word	0x08008351

08007774 <__lshift>:
 8007774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007778:	460c      	mov	r4, r1
 800777a:	6849      	ldr	r1, [r1, #4]
 800777c:	6923      	ldr	r3, [r4, #16]
 800777e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007782:	68a3      	ldr	r3, [r4, #8]
 8007784:	4607      	mov	r7, r0
 8007786:	4691      	mov	r9, r2
 8007788:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800778c:	f108 0601 	add.w	r6, r8, #1
 8007790:	42b3      	cmp	r3, r6
 8007792:	db0b      	blt.n	80077ac <__lshift+0x38>
 8007794:	4638      	mov	r0, r7
 8007796:	f7ff fddd 	bl	8007354 <_Balloc>
 800779a:	4605      	mov	r5, r0
 800779c:	b948      	cbnz	r0, 80077b2 <__lshift+0x3e>
 800779e:	4602      	mov	r2, r0
 80077a0:	4b28      	ldr	r3, [pc, #160]	; (8007844 <__lshift+0xd0>)
 80077a2:	4829      	ldr	r0, [pc, #164]	; (8007848 <__lshift+0xd4>)
 80077a4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80077a8:	f000 fa0e 	bl	8007bc8 <__assert_func>
 80077ac:	3101      	adds	r1, #1
 80077ae:	005b      	lsls	r3, r3, #1
 80077b0:	e7ee      	b.n	8007790 <__lshift+0x1c>
 80077b2:	2300      	movs	r3, #0
 80077b4:	f100 0114 	add.w	r1, r0, #20
 80077b8:	f100 0210 	add.w	r2, r0, #16
 80077bc:	4618      	mov	r0, r3
 80077be:	4553      	cmp	r3, sl
 80077c0:	db33      	blt.n	800782a <__lshift+0xb6>
 80077c2:	6920      	ldr	r0, [r4, #16]
 80077c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80077c8:	f104 0314 	add.w	r3, r4, #20
 80077cc:	f019 091f 	ands.w	r9, r9, #31
 80077d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80077d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80077d8:	d02b      	beq.n	8007832 <__lshift+0xbe>
 80077da:	f1c9 0e20 	rsb	lr, r9, #32
 80077de:	468a      	mov	sl, r1
 80077e0:	2200      	movs	r2, #0
 80077e2:	6818      	ldr	r0, [r3, #0]
 80077e4:	fa00 f009 	lsl.w	r0, r0, r9
 80077e8:	4310      	orrs	r0, r2
 80077ea:	f84a 0b04 	str.w	r0, [sl], #4
 80077ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80077f2:	459c      	cmp	ip, r3
 80077f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80077f8:	d8f3      	bhi.n	80077e2 <__lshift+0x6e>
 80077fa:	ebac 0304 	sub.w	r3, ip, r4
 80077fe:	3b15      	subs	r3, #21
 8007800:	f023 0303 	bic.w	r3, r3, #3
 8007804:	3304      	adds	r3, #4
 8007806:	f104 0015 	add.w	r0, r4, #21
 800780a:	4584      	cmp	ip, r0
 800780c:	bf38      	it	cc
 800780e:	2304      	movcc	r3, #4
 8007810:	50ca      	str	r2, [r1, r3]
 8007812:	b10a      	cbz	r2, 8007818 <__lshift+0xa4>
 8007814:	f108 0602 	add.w	r6, r8, #2
 8007818:	3e01      	subs	r6, #1
 800781a:	4638      	mov	r0, r7
 800781c:	612e      	str	r6, [r5, #16]
 800781e:	4621      	mov	r1, r4
 8007820:	f7ff fdd8 	bl	80073d4 <_Bfree>
 8007824:	4628      	mov	r0, r5
 8007826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800782a:	f842 0f04 	str.w	r0, [r2, #4]!
 800782e:	3301      	adds	r3, #1
 8007830:	e7c5      	b.n	80077be <__lshift+0x4a>
 8007832:	3904      	subs	r1, #4
 8007834:	f853 2b04 	ldr.w	r2, [r3], #4
 8007838:	f841 2f04 	str.w	r2, [r1, #4]!
 800783c:	459c      	cmp	ip, r3
 800783e:	d8f9      	bhi.n	8007834 <__lshift+0xc0>
 8007840:	e7ea      	b.n	8007818 <__lshift+0xa4>
 8007842:	bf00      	nop
 8007844:	08008340 	.word	0x08008340
 8007848:	08008351 	.word	0x08008351

0800784c <__mcmp>:
 800784c:	b530      	push	{r4, r5, lr}
 800784e:	6902      	ldr	r2, [r0, #16]
 8007850:	690c      	ldr	r4, [r1, #16]
 8007852:	1b12      	subs	r2, r2, r4
 8007854:	d10e      	bne.n	8007874 <__mcmp+0x28>
 8007856:	f100 0314 	add.w	r3, r0, #20
 800785a:	3114      	adds	r1, #20
 800785c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007860:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007864:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007868:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800786c:	42a5      	cmp	r5, r4
 800786e:	d003      	beq.n	8007878 <__mcmp+0x2c>
 8007870:	d305      	bcc.n	800787e <__mcmp+0x32>
 8007872:	2201      	movs	r2, #1
 8007874:	4610      	mov	r0, r2
 8007876:	bd30      	pop	{r4, r5, pc}
 8007878:	4283      	cmp	r3, r0
 800787a:	d3f3      	bcc.n	8007864 <__mcmp+0x18>
 800787c:	e7fa      	b.n	8007874 <__mcmp+0x28>
 800787e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007882:	e7f7      	b.n	8007874 <__mcmp+0x28>

08007884 <__mdiff>:
 8007884:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007888:	460c      	mov	r4, r1
 800788a:	4606      	mov	r6, r0
 800788c:	4611      	mov	r1, r2
 800788e:	4620      	mov	r0, r4
 8007890:	4690      	mov	r8, r2
 8007892:	f7ff ffdb 	bl	800784c <__mcmp>
 8007896:	1e05      	subs	r5, r0, #0
 8007898:	d110      	bne.n	80078bc <__mdiff+0x38>
 800789a:	4629      	mov	r1, r5
 800789c:	4630      	mov	r0, r6
 800789e:	f7ff fd59 	bl	8007354 <_Balloc>
 80078a2:	b930      	cbnz	r0, 80078b2 <__mdiff+0x2e>
 80078a4:	4b3a      	ldr	r3, [pc, #232]	; (8007990 <__mdiff+0x10c>)
 80078a6:	4602      	mov	r2, r0
 80078a8:	f240 2137 	movw	r1, #567	; 0x237
 80078ac:	4839      	ldr	r0, [pc, #228]	; (8007994 <__mdiff+0x110>)
 80078ae:	f000 f98b 	bl	8007bc8 <__assert_func>
 80078b2:	2301      	movs	r3, #1
 80078b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80078b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078bc:	bfa4      	itt	ge
 80078be:	4643      	movge	r3, r8
 80078c0:	46a0      	movge	r8, r4
 80078c2:	4630      	mov	r0, r6
 80078c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80078c8:	bfa6      	itte	ge
 80078ca:	461c      	movge	r4, r3
 80078cc:	2500      	movge	r5, #0
 80078ce:	2501      	movlt	r5, #1
 80078d0:	f7ff fd40 	bl	8007354 <_Balloc>
 80078d4:	b920      	cbnz	r0, 80078e0 <__mdiff+0x5c>
 80078d6:	4b2e      	ldr	r3, [pc, #184]	; (8007990 <__mdiff+0x10c>)
 80078d8:	4602      	mov	r2, r0
 80078da:	f240 2145 	movw	r1, #581	; 0x245
 80078de:	e7e5      	b.n	80078ac <__mdiff+0x28>
 80078e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80078e4:	6926      	ldr	r6, [r4, #16]
 80078e6:	60c5      	str	r5, [r0, #12]
 80078e8:	f104 0914 	add.w	r9, r4, #20
 80078ec:	f108 0514 	add.w	r5, r8, #20
 80078f0:	f100 0e14 	add.w	lr, r0, #20
 80078f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80078f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80078fc:	f108 0210 	add.w	r2, r8, #16
 8007900:	46f2      	mov	sl, lr
 8007902:	2100      	movs	r1, #0
 8007904:	f859 3b04 	ldr.w	r3, [r9], #4
 8007908:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800790c:	fa11 f88b 	uxtah	r8, r1, fp
 8007910:	b299      	uxth	r1, r3
 8007912:	0c1b      	lsrs	r3, r3, #16
 8007914:	eba8 0801 	sub.w	r8, r8, r1
 8007918:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800791c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007920:	fa1f f888 	uxth.w	r8, r8
 8007924:	1419      	asrs	r1, r3, #16
 8007926:	454e      	cmp	r6, r9
 8007928:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800792c:	f84a 3b04 	str.w	r3, [sl], #4
 8007930:	d8e8      	bhi.n	8007904 <__mdiff+0x80>
 8007932:	1b33      	subs	r3, r6, r4
 8007934:	3b15      	subs	r3, #21
 8007936:	f023 0303 	bic.w	r3, r3, #3
 800793a:	3304      	adds	r3, #4
 800793c:	3415      	adds	r4, #21
 800793e:	42a6      	cmp	r6, r4
 8007940:	bf38      	it	cc
 8007942:	2304      	movcc	r3, #4
 8007944:	441d      	add	r5, r3
 8007946:	4473      	add	r3, lr
 8007948:	469e      	mov	lr, r3
 800794a:	462e      	mov	r6, r5
 800794c:	4566      	cmp	r6, ip
 800794e:	d30e      	bcc.n	800796e <__mdiff+0xea>
 8007950:	f10c 0203 	add.w	r2, ip, #3
 8007954:	1b52      	subs	r2, r2, r5
 8007956:	f022 0203 	bic.w	r2, r2, #3
 800795a:	3d03      	subs	r5, #3
 800795c:	45ac      	cmp	ip, r5
 800795e:	bf38      	it	cc
 8007960:	2200      	movcc	r2, #0
 8007962:	4413      	add	r3, r2
 8007964:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007968:	b17a      	cbz	r2, 800798a <__mdiff+0x106>
 800796a:	6107      	str	r7, [r0, #16]
 800796c:	e7a4      	b.n	80078b8 <__mdiff+0x34>
 800796e:	f856 8b04 	ldr.w	r8, [r6], #4
 8007972:	fa11 f288 	uxtah	r2, r1, r8
 8007976:	1414      	asrs	r4, r2, #16
 8007978:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800797c:	b292      	uxth	r2, r2
 800797e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007982:	f84e 2b04 	str.w	r2, [lr], #4
 8007986:	1421      	asrs	r1, r4, #16
 8007988:	e7e0      	b.n	800794c <__mdiff+0xc8>
 800798a:	3f01      	subs	r7, #1
 800798c:	e7ea      	b.n	8007964 <__mdiff+0xe0>
 800798e:	bf00      	nop
 8007990:	08008340 	.word	0x08008340
 8007994:	08008351 	.word	0x08008351

08007998 <__d2b>:
 8007998:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800799c:	460f      	mov	r7, r1
 800799e:	2101      	movs	r1, #1
 80079a0:	ec59 8b10 	vmov	r8, r9, d0
 80079a4:	4616      	mov	r6, r2
 80079a6:	f7ff fcd5 	bl	8007354 <_Balloc>
 80079aa:	4604      	mov	r4, r0
 80079ac:	b930      	cbnz	r0, 80079bc <__d2b+0x24>
 80079ae:	4602      	mov	r2, r0
 80079b0:	4b24      	ldr	r3, [pc, #144]	; (8007a44 <__d2b+0xac>)
 80079b2:	4825      	ldr	r0, [pc, #148]	; (8007a48 <__d2b+0xb0>)
 80079b4:	f240 310f 	movw	r1, #783	; 0x30f
 80079b8:	f000 f906 	bl	8007bc8 <__assert_func>
 80079bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80079c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80079c4:	bb2d      	cbnz	r5, 8007a12 <__d2b+0x7a>
 80079c6:	9301      	str	r3, [sp, #4]
 80079c8:	f1b8 0300 	subs.w	r3, r8, #0
 80079cc:	d026      	beq.n	8007a1c <__d2b+0x84>
 80079ce:	4668      	mov	r0, sp
 80079d0:	9300      	str	r3, [sp, #0]
 80079d2:	f7ff fd87 	bl	80074e4 <__lo0bits>
 80079d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80079da:	b1e8      	cbz	r0, 8007a18 <__d2b+0x80>
 80079dc:	f1c0 0320 	rsb	r3, r0, #32
 80079e0:	fa02 f303 	lsl.w	r3, r2, r3
 80079e4:	430b      	orrs	r3, r1
 80079e6:	40c2      	lsrs	r2, r0
 80079e8:	6163      	str	r3, [r4, #20]
 80079ea:	9201      	str	r2, [sp, #4]
 80079ec:	9b01      	ldr	r3, [sp, #4]
 80079ee:	61a3      	str	r3, [r4, #24]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	bf14      	ite	ne
 80079f4:	2202      	movne	r2, #2
 80079f6:	2201      	moveq	r2, #1
 80079f8:	6122      	str	r2, [r4, #16]
 80079fa:	b1bd      	cbz	r5, 8007a2c <__d2b+0x94>
 80079fc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007a00:	4405      	add	r5, r0
 8007a02:	603d      	str	r5, [r7, #0]
 8007a04:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007a08:	6030      	str	r0, [r6, #0]
 8007a0a:	4620      	mov	r0, r4
 8007a0c:	b003      	add	sp, #12
 8007a0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a16:	e7d6      	b.n	80079c6 <__d2b+0x2e>
 8007a18:	6161      	str	r1, [r4, #20]
 8007a1a:	e7e7      	b.n	80079ec <__d2b+0x54>
 8007a1c:	a801      	add	r0, sp, #4
 8007a1e:	f7ff fd61 	bl	80074e4 <__lo0bits>
 8007a22:	9b01      	ldr	r3, [sp, #4]
 8007a24:	6163      	str	r3, [r4, #20]
 8007a26:	3020      	adds	r0, #32
 8007a28:	2201      	movs	r2, #1
 8007a2a:	e7e5      	b.n	80079f8 <__d2b+0x60>
 8007a2c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007a30:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007a34:	6038      	str	r0, [r7, #0]
 8007a36:	6918      	ldr	r0, [r3, #16]
 8007a38:	f7ff fd34 	bl	80074a4 <__hi0bits>
 8007a3c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007a40:	e7e2      	b.n	8007a08 <__d2b+0x70>
 8007a42:	bf00      	nop
 8007a44:	08008340 	.word	0x08008340
 8007a48:	08008351 	.word	0x08008351

08007a4c <__sflush_r>:
 8007a4c:	898a      	ldrh	r2, [r1, #12]
 8007a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a52:	4605      	mov	r5, r0
 8007a54:	0710      	lsls	r0, r2, #28
 8007a56:	460c      	mov	r4, r1
 8007a58:	d458      	bmi.n	8007b0c <__sflush_r+0xc0>
 8007a5a:	684b      	ldr	r3, [r1, #4]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	dc05      	bgt.n	8007a6c <__sflush_r+0x20>
 8007a60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	dc02      	bgt.n	8007a6c <__sflush_r+0x20>
 8007a66:	2000      	movs	r0, #0
 8007a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a6e:	2e00      	cmp	r6, #0
 8007a70:	d0f9      	beq.n	8007a66 <__sflush_r+0x1a>
 8007a72:	2300      	movs	r3, #0
 8007a74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a78:	682f      	ldr	r7, [r5, #0]
 8007a7a:	6a21      	ldr	r1, [r4, #32]
 8007a7c:	602b      	str	r3, [r5, #0]
 8007a7e:	d032      	beq.n	8007ae6 <__sflush_r+0x9a>
 8007a80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a82:	89a3      	ldrh	r3, [r4, #12]
 8007a84:	075a      	lsls	r2, r3, #29
 8007a86:	d505      	bpl.n	8007a94 <__sflush_r+0x48>
 8007a88:	6863      	ldr	r3, [r4, #4]
 8007a8a:	1ac0      	subs	r0, r0, r3
 8007a8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a8e:	b10b      	cbz	r3, 8007a94 <__sflush_r+0x48>
 8007a90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a92:	1ac0      	subs	r0, r0, r3
 8007a94:	2300      	movs	r3, #0
 8007a96:	4602      	mov	r2, r0
 8007a98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a9a:	6a21      	ldr	r1, [r4, #32]
 8007a9c:	4628      	mov	r0, r5
 8007a9e:	47b0      	blx	r6
 8007aa0:	1c43      	adds	r3, r0, #1
 8007aa2:	89a3      	ldrh	r3, [r4, #12]
 8007aa4:	d106      	bne.n	8007ab4 <__sflush_r+0x68>
 8007aa6:	6829      	ldr	r1, [r5, #0]
 8007aa8:	291d      	cmp	r1, #29
 8007aaa:	d82b      	bhi.n	8007b04 <__sflush_r+0xb8>
 8007aac:	4a29      	ldr	r2, [pc, #164]	; (8007b54 <__sflush_r+0x108>)
 8007aae:	410a      	asrs	r2, r1
 8007ab0:	07d6      	lsls	r6, r2, #31
 8007ab2:	d427      	bmi.n	8007b04 <__sflush_r+0xb8>
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	6062      	str	r2, [r4, #4]
 8007ab8:	04d9      	lsls	r1, r3, #19
 8007aba:	6922      	ldr	r2, [r4, #16]
 8007abc:	6022      	str	r2, [r4, #0]
 8007abe:	d504      	bpl.n	8007aca <__sflush_r+0x7e>
 8007ac0:	1c42      	adds	r2, r0, #1
 8007ac2:	d101      	bne.n	8007ac8 <__sflush_r+0x7c>
 8007ac4:	682b      	ldr	r3, [r5, #0]
 8007ac6:	b903      	cbnz	r3, 8007aca <__sflush_r+0x7e>
 8007ac8:	6560      	str	r0, [r4, #84]	; 0x54
 8007aca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007acc:	602f      	str	r7, [r5, #0]
 8007ace:	2900      	cmp	r1, #0
 8007ad0:	d0c9      	beq.n	8007a66 <__sflush_r+0x1a>
 8007ad2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ad6:	4299      	cmp	r1, r3
 8007ad8:	d002      	beq.n	8007ae0 <__sflush_r+0x94>
 8007ada:	4628      	mov	r0, r5
 8007adc:	f7ff fb3a 	bl	8007154 <_free_r>
 8007ae0:	2000      	movs	r0, #0
 8007ae2:	6360      	str	r0, [r4, #52]	; 0x34
 8007ae4:	e7c0      	b.n	8007a68 <__sflush_r+0x1c>
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	4628      	mov	r0, r5
 8007aea:	47b0      	blx	r6
 8007aec:	1c41      	adds	r1, r0, #1
 8007aee:	d1c8      	bne.n	8007a82 <__sflush_r+0x36>
 8007af0:	682b      	ldr	r3, [r5, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d0c5      	beq.n	8007a82 <__sflush_r+0x36>
 8007af6:	2b1d      	cmp	r3, #29
 8007af8:	d001      	beq.n	8007afe <__sflush_r+0xb2>
 8007afa:	2b16      	cmp	r3, #22
 8007afc:	d101      	bne.n	8007b02 <__sflush_r+0xb6>
 8007afe:	602f      	str	r7, [r5, #0]
 8007b00:	e7b1      	b.n	8007a66 <__sflush_r+0x1a>
 8007b02:	89a3      	ldrh	r3, [r4, #12]
 8007b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b08:	81a3      	strh	r3, [r4, #12]
 8007b0a:	e7ad      	b.n	8007a68 <__sflush_r+0x1c>
 8007b0c:	690f      	ldr	r7, [r1, #16]
 8007b0e:	2f00      	cmp	r7, #0
 8007b10:	d0a9      	beq.n	8007a66 <__sflush_r+0x1a>
 8007b12:	0793      	lsls	r3, r2, #30
 8007b14:	680e      	ldr	r6, [r1, #0]
 8007b16:	bf08      	it	eq
 8007b18:	694b      	ldreq	r3, [r1, #20]
 8007b1a:	600f      	str	r7, [r1, #0]
 8007b1c:	bf18      	it	ne
 8007b1e:	2300      	movne	r3, #0
 8007b20:	eba6 0807 	sub.w	r8, r6, r7
 8007b24:	608b      	str	r3, [r1, #8]
 8007b26:	f1b8 0f00 	cmp.w	r8, #0
 8007b2a:	dd9c      	ble.n	8007a66 <__sflush_r+0x1a>
 8007b2c:	6a21      	ldr	r1, [r4, #32]
 8007b2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b30:	4643      	mov	r3, r8
 8007b32:	463a      	mov	r2, r7
 8007b34:	4628      	mov	r0, r5
 8007b36:	47b0      	blx	r6
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	dc06      	bgt.n	8007b4a <__sflush_r+0xfe>
 8007b3c:	89a3      	ldrh	r3, [r4, #12]
 8007b3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b42:	81a3      	strh	r3, [r4, #12]
 8007b44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b48:	e78e      	b.n	8007a68 <__sflush_r+0x1c>
 8007b4a:	4407      	add	r7, r0
 8007b4c:	eba8 0800 	sub.w	r8, r8, r0
 8007b50:	e7e9      	b.n	8007b26 <__sflush_r+0xda>
 8007b52:	bf00      	nop
 8007b54:	dfbffffe 	.word	0xdfbffffe

08007b58 <_fflush_r>:
 8007b58:	b538      	push	{r3, r4, r5, lr}
 8007b5a:	690b      	ldr	r3, [r1, #16]
 8007b5c:	4605      	mov	r5, r0
 8007b5e:	460c      	mov	r4, r1
 8007b60:	b913      	cbnz	r3, 8007b68 <_fflush_r+0x10>
 8007b62:	2500      	movs	r5, #0
 8007b64:	4628      	mov	r0, r5
 8007b66:	bd38      	pop	{r3, r4, r5, pc}
 8007b68:	b118      	cbz	r0, 8007b72 <_fflush_r+0x1a>
 8007b6a:	6a03      	ldr	r3, [r0, #32]
 8007b6c:	b90b      	cbnz	r3, 8007b72 <_fflush_r+0x1a>
 8007b6e:	f7fe fb17 	bl	80061a0 <__sinit>
 8007b72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d0f3      	beq.n	8007b62 <_fflush_r+0xa>
 8007b7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b7c:	07d0      	lsls	r0, r2, #31
 8007b7e:	d404      	bmi.n	8007b8a <_fflush_r+0x32>
 8007b80:	0599      	lsls	r1, r3, #22
 8007b82:	d402      	bmi.n	8007b8a <_fflush_r+0x32>
 8007b84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b86:	f7fe fc58 	bl	800643a <__retarget_lock_acquire_recursive>
 8007b8a:	4628      	mov	r0, r5
 8007b8c:	4621      	mov	r1, r4
 8007b8e:	f7ff ff5d 	bl	8007a4c <__sflush_r>
 8007b92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b94:	07da      	lsls	r2, r3, #31
 8007b96:	4605      	mov	r5, r0
 8007b98:	d4e4      	bmi.n	8007b64 <_fflush_r+0xc>
 8007b9a:	89a3      	ldrh	r3, [r4, #12]
 8007b9c:	059b      	lsls	r3, r3, #22
 8007b9e:	d4e1      	bmi.n	8007b64 <_fflush_r+0xc>
 8007ba0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ba2:	f7fe fc4b 	bl	800643c <__retarget_lock_release_recursive>
 8007ba6:	e7dd      	b.n	8007b64 <_fflush_r+0xc>

08007ba8 <_sbrk_r>:
 8007ba8:	b538      	push	{r3, r4, r5, lr}
 8007baa:	4d06      	ldr	r5, [pc, #24]	; (8007bc4 <_sbrk_r+0x1c>)
 8007bac:	2300      	movs	r3, #0
 8007bae:	4604      	mov	r4, r0
 8007bb0:	4608      	mov	r0, r1
 8007bb2:	602b      	str	r3, [r5, #0]
 8007bb4:	f7fa f888 	bl	8001cc8 <_sbrk>
 8007bb8:	1c43      	adds	r3, r0, #1
 8007bba:	d102      	bne.n	8007bc2 <_sbrk_r+0x1a>
 8007bbc:	682b      	ldr	r3, [r5, #0]
 8007bbe:	b103      	cbz	r3, 8007bc2 <_sbrk_r+0x1a>
 8007bc0:	6023      	str	r3, [r4, #0]
 8007bc2:	bd38      	pop	{r3, r4, r5, pc}
 8007bc4:	200044c4 	.word	0x200044c4

08007bc8 <__assert_func>:
 8007bc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007bca:	4614      	mov	r4, r2
 8007bcc:	461a      	mov	r2, r3
 8007bce:	4b09      	ldr	r3, [pc, #36]	; (8007bf4 <__assert_func+0x2c>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4605      	mov	r5, r0
 8007bd4:	68d8      	ldr	r0, [r3, #12]
 8007bd6:	b14c      	cbz	r4, 8007bec <__assert_func+0x24>
 8007bd8:	4b07      	ldr	r3, [pc, #28]	; (8007bf8 <__assert_func+0x30>)
 8007bda:	9100      	str	r1, [sp, #0]
 8007bdc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007be0:	4906      	ldr	r1, [pc, #24]	; (8007bfc <__assert_func+0x34>)
 8007be2:	462b      	mov	r3, r5
 8007be4:	f000 f844 	bl	8007c70 <fiprintf>
 8007be8:	f000 f854 	bl	8007c94 <abort>
 8007bec:	4b04      	ldr	r3, [pc, #16]	; (8007c00 <__assert_func+0x38>)
 8007bee:	461c      	mov	r4, r3
 8007bf0:	e7f3      	b.n	8007bda <__assert_func+0x12>
 8007bf2:	bf00      	nop
 8007bf4:	20000068 	.word	0x20000068
 8007bf8:	080084b6 	.word	0x080084b6
 8007bfc:	080084c3 	.word	0x080084c3
 8007c00:	080084f1 	.word	0x080084f1

08007c04 <_calloc_r>:
 8007c04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c06:	fba1 2402 	umull	r2, r4, r1, r2
 8007c0a:	b94c      	cbnz	r4, 8007c20 <_calloc_r+0x1c>
 8007c0c:	4611      	mov	r1, r2
 8007c0e:	9201      	str	r2, [sp, #4]
 8007c10:	f7ff fb14 	bl	800723c <_malloc_r>
 8007c14:	9a01      	ldr	r2, [sp, #4]
 8007c16:	4605      	mov	r5, r0
 8007c18:	b930      	cbnz	r0, 8007c28 <_calloc_r+0x24>
 8007c1a:	4628      	mov	r0, r5
 8007c1c:	b003      	add	sp, #12
 8007c1e:	bd30      	pop	{r4, r5, pc}
 8007c20:	220c      	movs	r2, #12
 8007c22:	6002      	str	r2, [r0, #0]
 8007c24:	2500      	movs	r5, #0
 8007c26:	e7f8      	b.n	8007c1a <_calloc_r+0x16>
 8007c28:	4621      	mov	r1, r4
 8007c2a:	f7fe fb32 	bl	8006292 <memset>
 8007c2e:	e7f4      	b.n	8007c1a <_calloc_r+0x16>

08007c30 <__ascii_mbtowc>:
 8007c30:	b082      	sub	sp, #8
 8007c32:	b901      	cbnz	r1, 8007c36 <__ascii_mbtowc+0x6>
 8007c34:	a901      	add	r1, sp, #4
 8007c36:	b142      	cbz	r2, 8007c4a <__ascii_mbtowc+0x1a>
 8007c38:	b14b      	cbz	r3, 8007c4e <__ascii_mbtowc+0x1e>
 8007c3a:	7813      	ldrb	r3, [r2, #0]
 8007c3c:	600b      	str	r3, [r1, #0]
 8007c3e:	7812      	ldrb	r2, [r2, #0]
 8007c40:	1e10      	subs	r0, r2, #0
 8007c42:	bf18      	it	ne
 8007c44:	2001      	movne	r0, #1
 8007c46:	b002      	add	sp, #8
 8007c48:	4770      	bx	lr
 8007c4a:	4610      	mov	r0, r2
 8007c4c:	e7fb      	b.n	8007c46 <__ascii_mbtowc+0x16>
 8007c4e:	f06f 0001 	mvn.w	r0, #1
 8007c52:	e7f8      	b.n	8007c46 <__ascii_mbtowc+0x16>

08007c54 <__ascii_wctomb>:
 8007c54:	b149      	cbz	r1, 8007c6a <__ascii_wctomb+0x16>
 8007c56:	2aff      	cmp	r2, #255	; 0xff
 8007c58:	bf85      	ittet	hi
 8007c5a:	238a      	movhi	r3, #138	; 0x8a
 8007c5c:	6003      	strhi	r3, [r0, #0]
 8007c5e:	700a      	strbls	r2, [r1, #0]
 8007c60:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007c64:	bf98      	it	ls
 8007c66:	2001      	movls	r0, #1
 8007c68:	4770      	bx	lr
 8007c6a:	4608      	mov	r0, r1
 8007c6c:	4770      	bx	lr
	...

08007c70 <fiprintf>:
 8007c70:	b40e      	push	{r1, r2, r3}
 8007c72:	b503      	push	{r0, r1, lr}
 8007c74:	4601      	mov	r1, r0
 8007c76:	ab03      	add	r3, sp, #12
 8007c78:	4805      	ldr	r0, [pc, #20]	; (8007c90 <fiprintf+0x20>)
 8007c7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c7e:	6800      	ldr	r0, [r0, #0]
 8007c80:	9301      	str	r3, [sp, #4]
 8007c82:	f000 f837 	bl	8007cf4 <_vfiprintf_r>
 8007c86:	b002      	add	sp, #8
 8007c88:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c8c:	b003      	add	sp, #12
 8007c8e:	4770      	bx	lr
 8007c90:	20000068 	.word	0x20000068

08007c94 <abort>:
 8007c94:	b508      	push	{r3, lr}
 8007c96:	2006      	movs	r0, #6
 8007c98:	f000 fa04 	bl	80080a4 <raise>
 8007c9c:	2001      	movs	r0, #1
 8007c9e:	f7f9 ff9b 	bl	8001bd8 <_exit>

08007ca2 <__sfputc_r>:
 8007ca2:	6893      	ldr	r3, [r2, #8]
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	b410      	push	{r4}
 8007caa:	6093      	str	r3, [r2, #8]
 8007cac:	da08      	bge.n	8007cc0 <__sfputc_r+0x1e>
 8007cae:	6994      	ldr	r4, [r2, #24]
 8007cb0:	42a3      	cmp	r3, r4
 8007cb2:	db01      	blt.n	8007cb8 <__sfputc_r+0x16>
 8007cb4:	290a      	cmp	r1, #10
 8007cb6:	d103      	bne.n	8007cc0 <__sfputc_r+0x1e>
 8007cb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cbc:	f000 b934 	b.w	8007f28 <__swbuf_r>
 8007cc0:	6813      	ldr	r3, [r2, #0]
 8007cc2:	1c58      	adds	r0, r3, #1
 8007cc4:	6010      	str	r0, [r2, #0]
 8007cc6:	7019      	strb	r1, [r3, #0]
 8007cc8:	4608      	mov	r0, r1
 8007cca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <__sfputs_r>:
 8007cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cd2:	4606      	mov	r6, r0
 8007cd4:	460f      	mov	r7, r1
 8007cd6:	4614      	mov	r4, r2
 8007cd8:	18d5      	adds	r5, r2, r3
 8007cda:	42ac      	cmp	r4, r5
 8007cdc:	d101      	bne.n	8007ce2 <__sfputs_r+0x12>
 8007cde:	2000      	movs	r0, #0
 8007ce0:	e007      	b.n	8007cf2 <__sfputs_r+0x22>
 8007ce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ce6:	463a      	mov	r2, r7
 8007ce8:	4630      	mov	r0, r6
 8007cea:	f7ff ffda 	bl	8007ca2 <__sfputc_r>
 8007cee:	1c43      	adds	r3, r0, #1
 8007cf0:	d1f3      	bne.n	8007cda <__sfputs_r+0xa>
 8007cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007cf4 <_vfiprintf_r>:
 8007cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf8:	460d      	mov	r5, r1
 8007cfa:	b09d      	sub	sp, #116	; 0x74
 8007cfc:	4614      	mov	r4, r2
 8007cfe:	4698      	mov	r8, r3
 8007d00:	4606      	mov	r6, r0
 8007d02:	b118      	cbz	r0, 8007d0c <_vfiprintf_r+0x18>
 8007d04:	6a03      	ldr	r3, [r0, #32]
 8007d06:	b90b      	cbnz	r3, 8007d0c <_vfiprintf_r+0x18>
 8007d08:	f7fe fa4a 	bl	80061a0 <__sinit>
 8007d0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d0e:	07d9      	lsls	r1, r3, #31
 8007d10:	d405      	bmi.n	8007d1e <_vfiprintf_r+0x2a>
 8007d12:	89ab      	ldrh	r3, [r5, #12]
 8007d14:	059a      	lsls	r2, r3, #22
 8007d16:	d402      	bmi.n	8007d1e <_vfiprintf_r+0x2a>
 8007d18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d1a:	f7fe fb8e 	bl	800643a <__retarget_lock_acquire_recursive>
 8007d1e:	89ab      	ldrh	r3, [r5, #12]
 8007d20:	071b      	lsls	r3, r3, #28
 8007d22:	d501      	bpl.n	8007d28 <_vfiprintf_r+0x34>
 8007d24:	692b      	ldr	r3, [r5, #16]
 8007d26:	b99b      	cbnz	r3, 8007d50 <_vfiprintf_r+0x5c>
 8007d28:	4629      	mov	r1, r5
 8007d2a:	4630      	mov	r0, r6
 8007d2c:	f000 f93a 	bl	8007fa4 <__swsetup_r>
 8007d30:	b170      	cbz	r0, 8007d50 <_vfiprintf_r+0x5c>
 8007d32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d34:	07dc      	lsls	r4, r3, #31
 8007d36:	d504      	bpl.n	8007d42 <_vfiprintf_r+0x4e>
 8007d38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d3c:	b01d      	add	sp, #116	; 0x74
 8007d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d42:	89ab      	ldrh	r3, [r5, #12]
 8007d44:	0598      	lsls	r0, r3, #22
 8007d46:	d4f7      	bmi.n	8007d38 <_vfiprintf_r+0x44>
 8007d48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d4a:	f7fe fb77 	bl	800643c <__retarget_lock_release_recursive>
 8007d4e:	e7f3      	b.n	8007d38 <_vfiprintf_r+0x44>
 8007d50:	2300      	movs	r3, #0
 8007d52:	9309      	str	r3, [sp, #36]	; 0x24
 8007d54:	2320      	movs	r3, #32
 8007d56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d5e:	2330      	movs	r3, #48	; 0x30
 8007d60:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007f14 <_vfiprintf_r+0x220>
 8007d64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d68:	f04f 0901 	mov.w	r9, #1
 8007d6c:	4623      	mov	r3, r4
 8007d6e:	469a      	mov	sl, r3
 8007d70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d74:	b10a      	cbz	r2, 8007d7a <_vfiprintf_r+0x86>
 8007d76:	2a25      	cmp	r2, #37	; 0x25
 8007d78:	d1f9      	bne.n	8007d6e <_vfiprintf_r+0x7a>
 8007d7a:	ebba 0b04 	subs.w	fp, sl, r4
 8007d7e:	d00b      	beq.n	8007d98 <_vfiprintf_r+0xa4>
 8007d80:	465b      	mov	r3, fp
 8007d82:	4622      	mov	r2, r4
 8007d84:	4629      	mov	r1, r5
 8007d86:	4630      	mov	r0, r6
 8007d88:	f7ff ffa2 	bl	8007cd0 <__sfputs_r>
 8007d8c:	3001      	adds	r0, #1
 8007d8e:	f000 80a9 	beq.w	8007ee4 <_vfiprintf_r+0x1f0>
 8007d92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d94:	445a      	add	r2, fp
 8007d96:	9209      	str	r2, [sp, #36]	; 0x24
 8007d98:	f89a 3000 	ldrb.w	r3, [sl]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	f000 80a1 	beq.w	8007ee4 <_vfiprintf_r+0x1f0>
 8007da2:	2300      	movs	r3, #0
 8007da4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007da8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007dac:	f10a 0a01 	add.w	sl, sl, #1
 8007db0:	9304      	str	r3, [sp, #16]
 8007db2:	9307      	str	r3, [sp, #28]
 8007db4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007db8:	931a      	str	r3, [sp, #104]	; 0x68
 8007dba:	4654      	mov	r4, sl
 8007dbc:	2205      	movs	r2, #5
 8007dbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dc2:	4854      	ldr	r0, [pc, #336]	; (8007f14 <_vfiprintf_r+0x220>)
 8007dc4:	f7f8 fa04 	bl	80001d0 <memchr>
 8007dc8:	9a04      	ldr	r2, [sp, #16]
 8007dca:	b9d8      	cbnz	r0, 8007e04 <_vfiprintf_r+0x110>
 8007dcc:	06d1      	lsls	r1, r2, #27
 8007dce:	bf44      	itt	mi
 8007dd0:	2320      	movmi	r3, #32
 8007dd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dd6:	0713      	lsls	r3, r2, #28
 8007dd8:	bf44      	itt	mi
 8007dda:	232b      	movmi	r3, #43	; 0x2b
 8007ddc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007de0:	f89a 3000 	ldrb.w	r3, [sl]
 8007de4:	2b2a      	cmp	r3, #42	; 0x2a
 8007de6:	d015      	beq.n	8007e14 <_vfiprintf_r+0x120>
 8007de8:	9a07      	ldr	r2, [sp, #28]
 8007dea:	4654      	mov	r4, sl
 8007dec:	2000      	movs	r0, #0
 8007dee:	f04f 0c0a 	mov.w	ip, #10
 8007df2:	4621      	mov	r1, r4
 8007df4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007df8:	3b30      	subs	r3, #48	; 0x30
 8007dfa:	2b09      	cmp	r3, #9
 8007dfc:	d94d      	bls.n	8007e9a <_vfiprintf_r+0x1a6>
 8007dfe:	b1b0      	cbz	r0, 8007e2e <_vfiprintf_r+0x13a>
 8007e00:	9207      	str	r2, [sp, #28]
 8007e02:	e014      	b.n	8007e2e <_vfiprintf_r+0x13a>
 8007e04:	eba0 0308 	sub.w	r3, r0, r8
 8007e08:	fa09 f303 	lsl.w	r3, r9, r3
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	9304      	str	r3, [sp, #16]
 8007e10:	46a2      	mov	sl, r4
 8007e12:	e7d2      	b.n	8007dba <_vfiprintf_r+0xc6>
 8007e14:	9b03      	ldr	r3, [sp, #12]
 8007e16:	1d19      	adds	r1, r3, #4
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	9103      	str	r1, [sp, #12]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	bfbb      	ittet	lt
 8007e20:	425b      	neglt	r3, r3
 8007e22:	f042 0202 	orrlt.w	r2, r2, #2
 8007e26:	9307      	strge	r3, [sp, #28]
 8007e28:	9307      	strlt	r3, [sp, #28]
 8007e2a:	bfb8      	it	lt
 8007e2c:	9204      	strlt	r2, [sp, #16]
 8007e2e:	7823      	ldrb	r3, [r4, #0]
 8007e30:	2b2e      	cmp	r3, #46	; 0x2e
 8007e32:	d10c      	bne.n	8007e4e <_vfiprintf_r+0x15a>
 8007e34:	7863      	ldrb	r3, [r4, #1]
 8007e36:	2b2a      	cmp	r3, #42	; 0x2a
 8007e38:	d134      	bne.n	8007ea4 <_vfiprintf_r+0x1b0>
 8007e3a:	9b03      	ldr	r3, [sp, #12]
 8007e3c:	1d1a      	adds	r2, r3, #4
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	9203      	str	r2, [sp, #12]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	bfb8      	it	lt
 8007e46:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007e4a:	3402      	adds	r4, #2
 8007e4c:	9305      	str	r3, [sp, #20]
 8007e4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007f24 <_vfiprintf_r+0x230>
 8007e52:	7821      	ldrb	r1, [r4, #0]
 8007e54:	2203      	movs	r2, #3
 8007e56:	4650      	mov	r0, sl
 8007e58:	f7f8 f9ba 	bl	80001d0 <memchr>
 8007e5c:	b138      	cbz	r0, 8007e6e <_vfiprintf_r+0x17a>
 8007e5e:	9b04      	ldr	r3, [sp, #16]
 8007e60:	eba0 000a 	sub.w	r0, r0, sl
 8007e64:	2240      	movs	r2, #64	; 0x40
 8007e66:	4082      	lsls	r2, r0
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	3401      	adds	r4, #1
 8007e6c:	9304      	str	r3, [sp, #16]
 8007e6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e72:	4829      	ldr	r0, [pc, #164]	; (8007f18 <_vfiprintf_r+0x224>)
 8007e74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e78:	2206      	movs	r2, #6
 8007e7a:	f7f8 f9a9 	bl	80001d0 <memchr>
 8007e7e:	2800      	cmp	r0, #0
 8007e80:	d03f      	beq.n	8007f02 <_vfiprintf_r+0x20e>
 8007e82:	4b26      	ldr	r3, [pc, #152]	; (8007f1c <_vfiprintf_r+0x228>)
 8007e84:	bb1b      	cbnz	r3, 8007ece <_vfiprintf_r+0x1da>
 8007e86:	9b03      	ldr	r3, [sp, #12]
 8007e88:	3307      	adds	r3, #7
 8007e8a:	f023 0307 	bic.w	r3, r3, #7
 8007e8e:	3308      	adds	r3, #8
 8007e90:	9303      	str	r3, [sp, #12]
 8007e92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e94:	443b      	add	r3, r7
 8007e96:	9309      	str	r3, [sp, #36]	; 0x24
 8007e98:	e768      	b.n	8007d6c <_vfiprintf_r+0x78>
 8007e9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e9e:	460c      	mov	r4, r1
 8007ea0:	2001      	movs	r0, #1
 8007ea2:	e7a6      	b.n	8007df2 <_vfiprintf_r+0xfe>
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	3401      	adds	r4, #1
 8007ea8:	9305      	str	r3, [sp, #20]
 8007eaa:	4619      	mov	r1, r3
 8007eac:	f04f 0c0a 	mov.w	ip, #10
 8007eb0:	4620      	mov	r0, r4
 8007eb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007eb6:	3a30      	subs	r2, #48	; 0x30
 8007eb8:	2a09      	cmp	r2, #9
 8007eba:	d903      	bls.n	8007ec4 <_vfiprintf_r+0x1d0>
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d0c6      	beq.n	8007e4e <_vfiprintf_r+0x15a>
 8007ec0:	9105      	str	r1, [sp, #20]
 8007ec2:	e7c4      	b.n	8007e4e <_vfiprintf_r+0x15a>
 8007ec4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ec8:	4604      	mov	r4, r0
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e7f0      	b.n	8007eb0 <_vfiprintf_r+0x1bc>
 8007ece:	ab03      	add	r3, sp, #12
 8007ed0:	9300      	str	r3, [sp, #0]
 8007ed2:	462a      	mov	r2, r5
 8007ed4:	4b12      	ldr	r3, [pc, #72]	; (8007f20 <_vfiprintf_r+0x22c>)
 8007ed6:	a904      	add	r1, sp, #16
 8007ed8:	4630      	mov	r0, r6
 8007eda:	f7fd fd0f 	bl	80058fc <_printf_float>
 8007ede:	4607      	mov	r7, r0
 8007ee0:	1c78      	adds	r0, r7, #1
 8007ee2:	d1d6      	bne.n	8007e92 <_vfiprintf_r+0x19e>
 8007ee4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ee6:	07d9      	lsls	r1, r3, #31
 8007ee8:	d405      	bmi.n	8007ef6 <_vfiprintf_r+0x202>
 8007eea:	89ab      	ldrh	r3, [r5, #12]
 8007eec:	059a      	lsls	r2, r3, #22
 8007eee:	d402      	bmi.n	8007ef6 <_vfiprintf_r+0x202>
 8007ef0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ef2:	f7fe faa3 	bl	800643c <__retarget_lock_release_recursive>
 8007ef6:	89ab      	ldrh	r3, [r5, #12]
 8007ef8:	065b      	lsls	r3, r3, #25
 8007efa:	f53f af1d 	bmi.w	8007d38 <_vfiprintf_r+0x44>
 8007efe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f00:	e71c      	b.n	8007d3c <_vfiprintf_r+0x48>
 8007f02:	ab03      	add	r3, sp, #12
 8007f04:	9300      	str	r3, [sp, #0]
 8007f06:	462a      	mov	r2, r5
 8007f08:	4b05      	ldr	r3, [pc, #20]	; (8007f20 <_vfiprintf_r+0x22c>)
 8007f0a:	a904      	add	r1, sp, #16
 8007f0c:	4630      	mov	r0, r6
 8007f0e:	f7fd ff99 	bl	8005e44 <_printf_i>
 8007f12:	e7e4      	b.n	8007ede <_vfiprintf_r+0x1ea>
 8007f14:	080085f3 	.word	0x080085f3
 8007f18:	080085fd 	.word	0x080085fd
 8007f1c:	080058fd 	.word	0x080058fd
 8007f20:	08007cd1 	.word	0x08007cd1
 8007f24:	080085f9 	.word	0x080085f9

08007f28 <__swbuf_r>:
 8007f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f2a:	460e      	mov	r6, r1
 8007f2c:	4614      	mov	r4, r2
 8007f2e:	4605      	mov	r5, r0
 8007f30:	b118      	cbz	r0, 8007f3a <__swbuf_r+0x12>
 8007f32:	6a03      	ldr	r3, [r0, #32]
 8007f34:	b90b      	cbnz	r3, 8007f3a <__swbuf_r+0x12>
 8007f36:	f7fe f933 	bl	80061a0 <__sinit>
 8007f3a:	69a3      	ldr	r3, [r4, #24]
 8007f3c:	60a3      	str	r3, [r4, #8]
 8007f3e:	89a3      	ldrh	r3, [r4, #12]
 8007f40:	071a      	lsls	r2, r3, #28
 8007f42:	d525      	bpl.n	8007f90 <__swbuf_r+0x68>
 8007f44:	6923      	ldr	r3, [r4, #16]
 8007f46:	b31b      	cbz	r3, 8007f90 <__swbuf_r+0x68>
 8007f48:	6823      	ldr	r3, [r4, #0]
 8007f4a:	6922      	ldr	r2, [r4, #16]
 8007f4c:	1a98      	subs	r0, r3, r2
 8007f4e:	6963      	ldr	r3, [r4, #20]
 8007f50:	b2f6      	uxtb	r6, r6
 8007f52:	4283      	cmp	r3, r0
 8007f54:	4637      	mov	r7, r6
 8007f56:	dc04      	bgt.n	8007f62 <__swbuf_r+0x3a>
 8007f58:	4621      	mov	r1, r4
 8007f5a:	4628      	mov	r0, r5
 8007f5c:	f7ff fdfc 	bl	8007b58 <_fflush_r>
 8007f60:	b9e0      	cbnz	r0, 8007f9c <__swbuf_r+0x74>
 8007f62:	68a3      	ldr	r3, [r4, #8]
 8007f64:	3b01      	subs	r3, #1
 8007f66:	60a3      	str	r3, [r4, #8]
 8007f68:	6823      	ldr	r3, [r4, #0]
 8007f6a:	1c5a      	adds	r2, r3, #1
 8007f6c:	6022      	str	r2, [r4, #0]
 8007f6e:	701e      	strb	r6, [r3, #0]
 8007f70:	6962      	ldr	r2, [r4, #20]
 8007f72:	1c43      	adds	r3, r0, #1
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d004      	beq.n	8007f82 <__swbuf_r+0x5a>
 8007f78:	89a3      	ldrh	r3, [r4, #12]
 8007f7a:	07db      	lsls	r3, r3, #31
 8007f7c:	d506      	bpl.n	8007f8c <__swbuf_r+0x64>
 8007f7e:	2e0a      	cmp	r6, #10
 8007f80:	d104      	bne.n	8007f8c <__swbuf_r+0x64>
 8007f82:	4621      	mov	r1, r4
 8007f84:	4628      	mov	r0, r5
 8007f86:	f7ff fde7 	bl	8007b58 <_fflush_r>
 8007f8a:	b938      	cbnz	r0, 8007f9c <__swbuf_r+0x74>
 8007f8c:	4638      	mov	r0, r7
 8007f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f90:	4621      	mov	r1, r4
 8007f92:	4628      	mov	r0, r5
 8007f94:	f000 f806 	bl	8007fa4 <__swsetup_r>
 8007f98:	2800      	cmp	r0, #0
 8007f9a:	d0d5      	beq.n	8007f48 <__swbuf_r+0x20>
 8007f9c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007fa0:	e7f4      	b.n	8007f8c <__swbuf_r+0x64>
	...

08007fa4 <__swsetup_r>:
 8007fa4:	b538      	push	{r3, r4, r5, lr}
 8007fa6:	4b2a      	ldr	r3, [pc, #168]	; (8008050 <__swsetup_r+0xac>)
 8007fa8:	4605      	mov	r5, r0
 8007faa:	6818      	ldr	r0, [r3, #0]
 8007fac:	460c      	mov	r4, r1
 8007fae:	b118      	cbz	r0, 8007fb8 <__swsetup_r+0x14>
 8007fb0:	6a03      	ldr	r3, [r0, #32]
 8007fb2:	b90b      	cbnz	r3, 8007fb8 <__swsetup_r+0x14>
 8007fb4:	f7fe f8f4 	bl	80061a0 <__sinit>
 8007fb8:	89a3      	ldrh	r3, [r4, #12]
 8007fba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007fbe:	0718      	lsls	r0, r3, #28
 8007fc0:	d422      	bmi.n	8008008 <__swsetup_r+0x64>
 8007fc2:	06d9      	lsls	r1, r3, #27
 8007fc4:	d407      	bmi.n	8007fd6 <__swsetup_r+0x32>
 8007fc6:	2309      	movs	r3, #9
 8007fc8:	602b      	str	r3, [r5, #0]
 8007fca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007fce:	81a3      	strh	r3, [r4, #12]
 8007fd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fd4:	e034      	b.n	8008040 <__swsetup_r+0x9c>
 8007fd6:	0758      	lsls	r0, r3, #29
 8007fd8:	d512      	bpl.n	8008000 <__swsetup_r+0x5c>
 8007fda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fdc:	b141      	cbz	r1, 8007ff0 <__swsetup_r+0x4c>
 8007fde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fe2:	4299      	cmp	r1, r3
 8007fe4:	d002      	beq.n	8007fec <__swsetup_r+0x48>
 8007fe6:	4628      	mov	r0, r5
 8007fe8:	f7ff f8b4 	bl	8007154 <_free_r>
 8007fec:	2300      	movs	r3, #0
 8007fee:	6363      	str	r3, [r4, #52]	; 0x34
 8007ff0:	89a3      	ldrh	r3, [r4, #12]
 8007ff2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007ff6:	81a3      	strh	r3, [r4, #12]
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	6063      	str	r3, [r4, #4]
 8007ffc:	6923      	ldr	r3, [r4, #16]
 8007ffe:	6023      	str	r3, [r4, #0]
 8008000:	89a3      	ldrh	r3, [r4, #12]
 8008002:	f043 0308 	orr.w	r3, r3, #8
 8008006:	81a3      	strh	r3, [r4, #12]
 8008008:	6923      	ldr	r3, [r4, #16]
 800800a:	b94b      	cbnz	r3, 8008020 <__swsetup_r+0x7c>
 800800c:	89a3      	ldrh	r3, [r4, #12]
 800800e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008012:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008016:	d003      	beq.n	8008020 <__swsetup_r+0x7c>
 8008018:	4621      	mov	r1, r4
 800801a:	4628      	mov	r0, r5
 800801c:	f000 f884 	bl	8008128 <__smakebuf_r>
 8008020:	89a0      	ldrh	r0, [r4, #12]
 8008022:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008026:	f010 0301 	ands.w	r3, r0, #1
 800802a:	d00a      	beq.n	8008042 <__swsetup_r+0x9e>
 800802c:	2300      	movs	r3, #0
 800802e:	60a3      	str	r3, [r4, #8]
 8008030:	6963      	ldr	r3, [r4, #20]
 8008032:	425b      	negs	r3, r3
 8008034:	61a3      	str	r3, [r4, #24]
 8008036:	6923      	ldr	r3, [r4, #16]
 8008038:	b943      	cbnz	r3, 800804c <__swsetup_r+0xa8>
 800803a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800803e:	d1c4      	bne.n	8007fca <__swsetup_r+0x26>
 8008040:	bd38      	pop	{r3, r4, r5, pc}
 8008042:	0781      	lsls	r1, r0, #30
 8008044:	bf58      	it	pl
 8008046:	6963      	ldrpl	r3, [r4, #20]
 8008048:	60a3      	str	r3, [r4, #8]
 800804a:	e7f4      	b.n	8008036 <__swsetup_r+0x92>
 800804c:	2000      	movs	r0, #0
 800804e:	e7f7      	b.n	8008040 <__swsetup_r+0x9c>
 8008050:	20000068 	.word	0x20000068

08008054 <_raise_r>:
 8008054:	291f      	cmp	r1, #31
 8008056:	b538      	push	{r3, r4, r5, lr}
 8008058:	4604      	mov	r4, r0
 800805a:	460d      	mov	r5, r1
 800805c:	d904      	bls.n	8008068 <_raise_r+0x14>
 800805e:	2316      	movs	r3, #22
 8008060:	6003      	str	r3, [r0, #0]
 8008062:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008066:	bd38      	pop	{r3, r4, r5, pc}
 8008068:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800806a:	b112      	cbz	r2, 8008072 <_raise_r+0x1e>
 800806c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008070:	b94b      	cbnz	r3, 8008086 <_raise_r+0x32>
 8008072:	4620      	mov	r0, r4
 8008074:	f000 f830 	bl	80080d8 <_getpid_r>
 8008078:	462a      	mov	r2, r5
 800807a:	4601      	mov	r1, r0
 800807c:	4620      	mov	r0, r4
 800807e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008082:	f000 b817 	b.w	80080b4 <_kill_r>
 8008086:	2b01      	cmp	r3, #1
 8008088:	d00a      	beq.n	80080a0 <_raise_r+0x4c>
 800808a:	1c59      	adds	r1, r3, #1
 800808c:	d103      	bne.n	8008096 <_raise_r+0x42>
 800808e:	2316      	movs	r3, #22
 8008090:	6003      	str	r3, [r0, #0]
 8008092:	2001      	movs	r0, #1
 8008094:	e7e7      	b.n	8008066 <_raise_r+0x12>
 8008096:	2400      	movs	r4, #0
 8008098:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800809c:	4628      	mov	r0, r5
 800809e:	4798      	blx	r3
 80080a0:	2000      	movs	r0, #0
 80080a2:	e7e0      	b.n	8008066 <_raise_r+0x12>

080080a4 <raise>:
 80080a4:	4b02      	ldr	r3, [pc, #8]	; (80080b0 <raise+0xc>)
 80080a6:	4601      	mov	r1, r0
 80080a8:	6818      	ldr	r0, [r3, #0]
 80080aa:	f7ff bfd3 	b.w	8008054 <_raise_r>
 80080ae:	bf00      	nop
 80080b0:	20000068 	.word	0x20000068

080080b4 <_kill_r>:
 80080b4:	b538      	push	{r3, r4, r5, lr}
 80080b6:	4d07      	ldr	r5, [pc, #28]	; (80080d4 <_kill_r+0x20>)
 80080b8:	2300      	movs	r3, #0
 80080ba:	4604      	mov	r4, r0
 80080bc:	4608      	mov	r0, r1
 80080be:	4611      	mov	r1, r2
 80080c0:	602b      	str	r3, [r5, #0]
 80080c2:	f7f9 fd79 	bl	8001bb8 <_kill>
 80080c6:	1c43      	adds	r3, r0, #1
 80080c8:	d102      	bne.n	80080d0 <_kill_r+0x1c>
 80080ca:	682b      	ldr	r3, [r5, #0]
 80080cc:	b103      	cbz	r3, 80080d0 <_kill_r+0x1c>
 80080ce:	6023      	str	r3, [r4, #0]
 80080d0:	bd38      	pop	{r3, r4, r5, pc}
 80080d2:	bf00      	nop
 80080d4:	200044c4 	.word	0x200044c4

080080d8 <_getpid_r>:
 80080d8:	f7f9 bd66 	b.w	8001ba8 <_getpid>

080080dc <__swhatbuf_r>:
 80080dc:	b570      	push	{r4, r5, r6, lr}
 80080de:	460c      	mov	r4, r1
 80080e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080e4:	2900      	cmp	r1, #0
 80080e6:	b096      	sub	sp, #88	; 0x58
 80080e8:	4615      	mov	r5, r2
 80080ea:	461e      	mov	r6, r3
 80080ec:	da0d      	bge.n	800810a <__swhatbuf_r+0x2e>
 80080ee:	89a3      	ldrh	r3, [r4, #12]
 80080f0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80080f4:	f04f 0100 	mov.w	r1, #0
 80080f8:	bf0c      	ite	eq
 80080fa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80080fe:	2340      	movne	r3, #64	; 0x40
 8008100:	2000      	movs	r0, #0
 8008102:	6031      	str	r1, [r6, #0]
 8008104:	602b      	str	r3, [r5, #0]
 8008106:	b016      	add	sp, #88	; 0x58
 8008108:	bd70      	pop	{r4, r5, r6, pc}
 800810a:	466a      	mov	r2, sp
 800810c:	f000 f848 	bl	80081a0 <_fstat_r>
 8008110:	2800      	cmp	r0, #0
 8008112:	dbec      	blt.n	80080ee <__swhatbuf_r+0x12>
 8008114:	9901      	ldr	r1, [sp, #4]
 8008116:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800811a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800811e:	4259      	negs	r1, r3
 8008120:	4159      	adcs	r1, r3
 8008122:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008126:	e7eb      	b.n	8008100 <__swhatbuf_r+0x24>

08008128 <__smakebuf_r>:
 8008128:	898b      	ldrh	r3, [r1, #12]
 800812a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800812c:	079d      	lsls	r5, r3, #30
 800812e:	4606      	mov	r6, r0
 8008130:	460c      	mov	r4, r1
 8008132:	d507      	bpl.n	8008144 <__smakebuf_r+0x1c>
 8008134:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008138:	6023      	str	r3, [r4, #0]
 800813a:	6123      	str	r3, [r4, #16]
 800813c:	2301      	movs	r3, #1
 800813e:	6163      	str	r3, [r4, #20]
 8008140:	b002      	add	sp, #8
 8008142:	bd70      	pop	{r4, r5, r6, pc}
 8008144:	ab01      	add	r3, sp, #4
 8008146:	466a      	mov	r2, sp
 8008148:	f7ff ffc8 	bl	80080dc <__swhatbuf_r>
 800814c:	9900      	ldr	r1, [sp, #0]
 800814e:	4605      	mov	r5, r0
 8008150:	4630      	mov	r0, r6
 8008152:	f7ff f873 	bl	800723c <_malloc_r>
 8008156:	b948      	cbnz	r0, 800816c <__smakebuf_r+0x44>
 8008158:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800815c:	059a      	lsls	r2, r3, #22
 800815e:	d4ef      	bmi.n	8008140 <__smakebuf_r+0x18>
 8008160:	f023 0303 	bic.w	r3, r3, #3
 8008164:	f043 0302 	orr.w	r3, r3, #2
 8008168:	81a3      	strh	r3, [r4, #12]
 800816a:	e7e3      	b.n	8008134 <__smakebuf_r+0xc>
 800816c:	89a3      	ldrh	r3, [r4, #12]
 800816e:	6020      	str	r0, [r4, #0]
 8008170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008174:	81a3      	strh	r3, [r4, #12]
 8008176:	9b00      	ldr	r3, [sp, #0]
 8008178:	6163      	str	r3, [r4, #20]
 800817a:	9b01      	ldr	r3, [sp, #4]
 800817c:	6120      	str	r0, [r4, #16]
 800817e:	b15b      	cbz	r3, 8008198 <__smakebuf_r+0x70>
 8008180:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008184:	4630      	mov	r0, r6
 8008186:	f000 f81d 	bl	80081c4 <_isatty_r>
 800818a:	b128      	cbz	r0, 8008198 <__smakebuf_r+0x70>
 800818c:	89a3      	ldrh	r3, [r4, #12]
 800818e:	f023 0303 	bic.w	r3, r3, #3
 8008192:	f043 0301 	orr.w	r3, r3, #1
 8008196:	81a3      	strh	r3, [r4, #12]
 8008198:	89a3      	ldrh	r3, [r4, #12]
 800819a:	431d      	orrs	r5, r3
 800819c:	81a5      	strh	r5, [r4, #12]
 800819e:	e7cf      	b.n	8008140 <__smakebuf_r+0x18>

080081a0 <_fstat_r>:
 80081a0:	b538      	push	{r3, r4, r5, lr}
 80081a2:	4d07      	ldr	r5, [pc, #28]	; (80081c0 <_fstat_r+0x20>)
 80081a4:	2300      	movs	r3, #0
 80081a6:	4604      	mov	r4, r0
 80081a8:	4608      	mov	r0, r1
 80081aa:	4611      	mov	r1, r2
 80081ac:	602b      	str	r3, [r5, #0]
 80081ae:	f7f9 fd62 	bl	8001c76 <_fstat>
 80081b2:	1c43      	adds	r3, r0, #1
 80081b4:	d102      	bne.n	80081bc <_fstat_r+0x1c>
 80081b6:	682b      	ldr	r3, [r5, #0]
 80081b8:	b103      	cbz	r3, 80081bc <_fstat_r+0x1c>
 80081ba:	6023      	str	r3, [r4, #0]
 80081bc:	bd38      	pop	{r3, r4, r5, pc}
 80081be:	bf00      	nop
 80081c0:	200044c4 	.word	0x200044c4

080081c4 <_isatty_r>:
 80081c4:	b538      	push	{r3, r4, r5, lr}
 80081c6:	4d06      	ldr	r5, [pc, #24]	; (80081e0 <_isatty_r+0x1c>)
 80081c8:	2300      	movs	r3, #0
 80081ca:	4604      	mov	r4, r0
 80081cc:	4608      	mov	r0, r1
 80081ce:	602b      	str	r3, [r5, #0]
 80081d0:	f7f9 fd61 	bl	8001c96 <_isatty>
 80081d4:	1c43      	adds	r3, r0, #1
 80081d6:	d102      	bne.n	80081de <_isatty_r+0x1a>
 80081d8:	682b      	ldr	r3, [r5, #0]
 80081da:	b103      	cbz	r3, 80081de <_isatty_r+0x1a>
 80081dc:	6023      	str	r3, [r4, #0]
 80081de:	bd38      	pop	{r3, r4, r5, pc}
 80081e0:	200044c4 	.word	0x200044c4

080081e4 <_init>:
 80081e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081e6:	bf00      	nop
 80081e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ea:	bc08      	pop	{r3}
 80081ec:	469e      	mov	lr, r3
 80081ee:	4770      	bx	lr

080081f0 <_fini>:
 80081f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081f2:	bf00      	nop
 80081f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081f6:	bc08      	pop	{r3}
 80081f8:	469e      	mov	lr, r3
 80081fa:	4770      	bx	lr
