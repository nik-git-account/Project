
soundsensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b7c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003d0c  08003d0c  00013d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d7c  08003d7c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d7c  08003d7c  00013d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d84  08003d84  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d84  08003d84  00013d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d88  08003d88  00013d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003d8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          000002f4  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000350  20000350  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000ff68  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000024d6  00000000  00000000  00030037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f00  00000000  00000000  00032510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000bb9  00000000  00000000  00033410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002a15  00000000  00000000  00033fc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011097  00000000  00000000  000369de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dd821  00000000  00000000  00047a75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000043d4  00000000  00000000  00125298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  0012966c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003cf4 	.word	0x08003cf4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08003cf4 	.word	0x08003cf4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b092      	sub	sp, #72	; 0x48
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
		uint16_t value;
		char str[64] = "sound:\r\n";
 8000582:	4a20      	ldr	r2, [pc, #128]	; (8000604 <main+0x88>)
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	6810      	ldr	r0, [r2, #0]
 8000588:	6851      	ldr	r1, [r2, #4]
 800058a:	c303      	stmia	r3!, {r0, r1}
 800058c:	7a12      	ldrb	r2, [r2, #8]
 800058e:	701a      	strb	r2, [r3, #0]
 8000590:	f107 030d 	add.w	r3, r7, #13
 8000594:	2237      	movs	r2, #55	; 0x37
 8000596:	2100      	movs	r1, #0
 8000598:	4618      	mov	r0, r3
 800059a:	f002 ff27 	bl	80033ec <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059e:	f000 faf9 	bl	8000b94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a2:	f000 f837 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a6:	f000 f91b 	bl	80007e0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005aa:	f000 f89d 	bl	80006e8 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80005ae:	f000 f8ed 	bl	800078c <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 80005b2:	4815      	ldr	r0, [pc, #84]	; (8000608 <main+0x8c>)
 80005b4:	f000 fb84 	bl	8000cc0 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,1000);
 80005b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005bc:	4812      	ldr	r0, [pc, #72]	; (8000608 <main+0x8c>)
 80005be:	f000 fc84 	bl	8000eca <HAL_ADC_PollForConversion>
	  value = HAL_ADC_GetValue(&hadc1);
 80005c2:	4811      	ldr	r0, [pc, #68]	; (8000608 <main+0x8c>)
 80005c4:	f000 fd0c 	bl	8000fe0 <HAL_ADC_GetValue>
 80005c8:	4603      	mov	r3, r0
 80005ca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	  sprintf(str,"sound value is %d \r\n",value);
 80005ce:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	490d      	ldr	r1, [pc, #52]	; (800060c <main+0x90>)
 80005d6:	4618      	mov	r0, r3
 80005d8:	f002 fee8 	bl	80033ac <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	4618      	mov	r0, r3
 80005e0:	f7ff fdf6 	bl	80001d0 <strlen>
 80005e4:	4603      	mov	r3, r0
 80005e6:	b29a      	uxth	r2, r3
 80005e8:	1d39      	adds	r1, r7, #4
 80005ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005ee:	4808      	ldr	r0, [pc, #32]	; (8000610 <main+0x94>)
 80005f0:	f002 f96f 	bl	80028d2 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80005f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005f8:	f000 fafa 	bl	8000bf0 <HAL_Delay>
	  HAL_ADC_Stop(&hadc1);
 80005fc:	4802      	ldr	r0, [pc, #8]	; (8000608 <main+0x8c>)
 80005fe:	f000 fc31 	bl	8000e64 <HAL_ADC_Stop>
	  HAL_ADC_Start(&hadc1);
 8000602:	e7d6      	b.n	80005b2 <main+0x36>
 8000604:	08003d24 	.word	0x08003d24
 8000608:	20000078 	.word	0x20000078
 800060c:	08003d0c 	.word	0x08003d0c
 8000610:	200000c0 	.word	0x200000c0

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b094      	sub	sp, #80	; 0x50
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0320 	add.w	r3, r7, #32
 800061e:	2230      	movs	r2, #48	; 0x30
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f002 fee2 	bl	80033ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	4b28      	ldr	r3, [pc, #160]	; (80006e0 <SystemClock_Config+0xcc>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	4a27      	ldr	r2, [pc, #156]	; (80006e0 <SystemClock_Config+0xcc>)
 8000642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000646:	6413      	str	r3, [r2, #64]	; 0x40
 8000648:	4b25      	ldr	r3, [pc, #148]	; (80006e0 <SystemClock_Config+0xcc>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <SystemClock_Config+0xd0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a21      	ldr	r2, [pc, #132]	; (80006e4 <SystemClock_Config+0xd0>)
 800065e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <SystemClock_Config+0xd0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000670:	2302      	movs	r3, #2
 8000672:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000674:	2301      	movs	r3, #1
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000678:	2310      	movs	r3, #16
 800067a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067c:	2302      	movs	r3, #2
 800067e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000680:	2300      	movs	r3, #0
 8000682:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000684:	2308      	movs	r3, #8
 8000686:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000688:	2332      	movs	r3, #50	; 0x32
 800068a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800068c:	2304      	movs	r3, #4
 800068e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000690:	2307      	movs	r3, #7
 8000692:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 0320 	add.w	r3, r7, #32
 8000698:	4618      	mov	r0, r3
 800069a:	f001 f94b 	bl	8001934 <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a4:	f000 f8b6 	bl	8000814 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a8:	230f      	movs	r3, #15
 80006aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ac:	2302      	movs	r3, #2
 80006ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 fbac 	bl	8001e24 <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006d2:	f000 f89f 	bl	8000814 <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3750      	adds	r7, #80	; 0x50
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ee:	463b      	mov	r3, r7
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006fa:	4b21      	ldr	r3, [pc, #132]	; (8000780 <MX_ADC1_Init+0x98>)
 80006fc:	4a21      	ldr	r2, [pc, #132]	; (8000784 <MX_ADC1_Init+0x9c>)
 80006fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000700:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <MX_ADC1_Init+0x98>)
 8000702:	2200      	movs	r2, #0
 8000704:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000706:	4b1e      	ldr	r3, [pc, #120]	; (8000780 <MX_ADC1_Init+0x98>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800070c:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <MX_ADC1_Init+0x98>)
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000712:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <MX_ADC1_Init+0x98>)
 8000714:	2200      	movs	r2, #0
 8000716:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000718:	4b19      	ldr	r3, [pc, #100]	; (8000780 <MX_ADC1_Init+0x98>)
 800071a:	2200      	movs	r2, #0
 800071c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000720:	4b17      	ldr	r3, [pc, #92]	; (8000780 <MX_ADC1_Init+0x98>)
 8000722:	2200      	movs	r2, #0
 8000724:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000726:	4b16      	ldr	r3, [pc, #88]	; (8000780 <MX_ADC1_Init+0x98>)
 8000728:	4a17      	ldr	r2, [pc, #92]	; (8000788 <MX_ADC1_Init+0xa0>)
 800072a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800072c:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_ADC1_Init+0x98>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000732:	4b13      	ldr	r3, [pc, #76]	; (8000780 <MX_ADC1_Init+0x98>)
 8000734:	2201      	movs	r2, #1
 8000736:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000738:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_ADC1_Init+0x98>)
 800073a:	2200      	movs	r2, #0
 800073c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <MX_ADC1_Init+0x98>)
 8000742:	2201      	movs	r2, #1
 8000744:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000746:	480e      	ldr	r0, [pc, #56]	; (8000780 <MX_ADC1_Init+0x98>)
 8000748:	f000 fa76 	bl	8000c38 <HAL_ADC_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000752:	f000 f85f 	bl	8000814 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000756:	2300      	movs	r3, #0
 8000758:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800075a:	2301      	movs	r3, #1
 800075c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800075e:	2300      	movs	r3, #0
 8000760:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000762:	463b      	mov	r3, r7
 8000764:	4619      	mov	r1, r3
 8000766:	4806      	ldr	r0, [pc, #24]	; (8000780 <MX_ADC1_Init+0x98>)
 8000768:	f000 fc48 	bl	8000ffc <HAL_ADC_ConfigChannel>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000772:	f000 f84f 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	3710      	adds	r7, #16
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000078 	.word	0x20000078
 8000784:	40012000 	.word	0x40012000
 8000788:	0f000001 	.word	0x0f000001

0800078c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000790:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 8000792:	4a12      	ldr	r2, [pc, #72]	; (80007dc <MX_USART2_UART_Init+0x50>)
 8000794:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 8000798:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800079c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007b2:	220c      	movs	r2, #12
 80007b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007c4:	f002 f838 	bl	8002838 <HAL_UART_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ce:	f000 f821 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200000c0 	.word	0x200000c0
 80007dc:	40004400 	.word	0x40004400

080007e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_GPIO_Init+0x30>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a08      	ldr	r2, [pc, #32]	; (8000810 <MX_GPIO_Init+0x30>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_GPIO_Init+0x30>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800

08000814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000818:	b672      	cpsid	i
}
 800081a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800081c:	e7fe      	b.n	800081c <Error_Handler+0x8>
	...

08000820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b10      	ldr	r3, [pc, #64]	; (800086c <HAL_MspInit+0x4c>)
 800082c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082e:	4a0f      	ldr	r2, [pc, #60]	; (800086c <HAL_MspInit+0x4c>)
 8000830:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000834:	6453      	str	r3, [r2, #68]	; 0x44
 8000836:	4b0d      	ldr	r3, [pc, #52]	; (800086c <HAL_MspInit+0x4c>)
 8000838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	603b      	str	r3, [r7, #0]
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <HAL_MspInit+0x4c>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084a:	4a08      	ldr	r2, [pc, #32]	; (800086c <HAL_MspInit+0x4c>)
 800084c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000850:	6413      	str	r3, [r2, #64]	; 0x40
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <HAL_MspInit+0x4c>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	40023800 	.word	0x40023800

08000870 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	; 0x28
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a17      	ldr	r2, [pc, #92]	; (80008ec <HAL_ADC_MspInit+0x7c>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d127      	bne.n	80008e2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	613b      	str	r3, [r7, #16]
 8000896:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <HAL_ADC_MspInit+0x80>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089a:	4a15      	ldr	r2, [pc, #84]	; (80008f0 <HAL_ADC_MspInit+0x80>)
 800089c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008a0:	6453      	str	r3, [r2, #68]	; 0x44
 80008a2:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <HAL_ADC_MspInit+0x80>)
 80008a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <HAL_ADC_MspInit+0x80>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a0e      	ldr	r2, [pc, #56]	; (80008f0 <HAL_ADC_MspInit+0x80>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <HAL_ADC_MspInit+0x80>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008ca:	2301      	movs	r3, #1
 80008cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008ce:	2303      	movs	r3, #3
 80008d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4619      	mov	r1, r3
 80008dc:	4805      	ldr	r0, [pc, #20]	; (80008f4 <HAL_ADC_MspInit+0x84>)
 80008de:	f000 fe8d 	bl	80015fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008e2:	bf00      	nop
 80008e4:	3728      	adds	r7, #40	; 0x28
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40012000 	.word	0x40012000
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40020000 	.word	0x40020000

080008f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	; 0x28
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a19      	ldr	r2, [pc, #100]	; (800097c <HAL_UART_MspInit+0x84>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d12b      	bne.n	8000972 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	4b18      	ldr	r3, [pc, #96]	; (8000980 <HAL_UART_MspInit+0x88>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000922:	4a17      	ldr	r2, [pc, #92]	; (8000980 <HAL_UART_MspInit+0x88>)
 8000924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000928:	6413      	str	r3, [r2, #64]	; 0x40
 800092a:	4b15      	ldr	r3, [pc, #84]	; (8000980 <HAL_UART_MspInit+0x88>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <HAL_UART_MspInit+0x88>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a10      	ldr	r2, [pc, #64]	; (8000980 <HAL_UART_MspInit+0x88>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <HAL_UART_MspInit+0x88>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000952:	230c      	movs	r3, #12
 8000954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000956:	2302      	movs	r3, #2
 8000958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095e:	2303      	movs	r3, #3
 8000960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000962:	2307      	movs	r3, #7
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	4619      	mov	r1, r3
 800096c:	4805      	ldr	r0, [pc, #20]	; (8000984 <HAL_UART_MspInit+0x8c>)
 800096e:	f000 fe45 	bl	80015fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000972:	bf00      	nop
 8000974:	3728      	adds	r7, #40	; 0x28
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40004400 	.word	0x40004400
 8000980:	40023800 	.word	0x40023800
 8000984:	40020000 	.word	0x40020000

08000988 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08c      	sub	sp, #48	; 0x30
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000990:	2300      	movs	r3, #0
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000994:	2300      	movs	r3, #0
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000998:	2300      	movs	r3, #0
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	4b2f      	ldr	r3, [pc, #188]	; (8000a5c <HAL_InitTick+0xd4>)
 800099e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a0:	4a2e      	ldr	r2, [pc, #184]	; (8000a5c <HAL_InitTick+0xd4>)
 80009a2:	f043 0301 	orr.w	r3, r3, #1
 80009a6:	6453      	str	r3, [r2, #68]	; 0x44
 80009a8:	4b2c      	ldr	r3, [pc, #176]	; (8000a5c <HAL_InitTick+0xd4>)
 80009aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ac:	f003 0301 	and.w	r3, r3, #1
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009b4:	f107 020c 	add.w	r2, r7, #12
 80009b8:	f107 0310 	add.w	r3, r7, #16
 80009bc:	4611      	mov	r1, r2
 80009be:	4618      	mov	r0, r3
 80009c0:	f001 fc50 	bl	8002264 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80009c4:	f001 fc3a 	bl	800223c <HAL_RCC_GetPCLK2Freq>
 80009c8:	4603      	mov	r3, r0
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d0:	4a23      	ldr	r2, [pc, #140]	; (8000a60 <HAL_InitTick+0xd8>)
 80009d2:	fba2 2303 	umull	r2, r3, r2, r3
 80009d6:	0c9b      	lsrs	r3, r3, #18
 80009d8:	3b01      	subs	r3, #1
 80009da:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009dc:	4b21      	ldr	r3, [pc, #132]	; (8000a64 <HAL_InitTick+0xdc>)
 80009de:	4a22      	ldr	r2, [pc, #136]	; (8000a68 <HAL_InitTick+0xe0>)
 80009e0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80009e2:	4b20      	ldr	r3, [pc, #128]	; (8000a64 <HAL_InitTick+0xdc>)
 80009e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009e8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009ea:	4a1e      	ldr	r2, [pc, #120]	; (8000a64 <HAL_InitTick+0xdc>)
 80009ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ee:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009f0:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <HAL_InitTick+0xdc>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f6:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <HAL_InitTick+0xdc>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fc:	4b19      	ldr	r3, [pc, #100]	; (8000a64 <HAL_InitTick+0xdc>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a02:	4818      	ldr	r0, [pc, #96]	; (8000a64 <HAL_InitTick+0xdc>)
 8000a04:	f001 fc60 	bl	80022c8 <HAL_TIM_Base_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000a0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d11b      	bne.n	8000a4e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a16:	4813      	ldr	r0, [pc, #76]	; (8000a64 <HAL_InitTick+0xdc>)
 8000a18:	f001 fcb0 	bl	800237c <HAL_TIM_Base_Start_IT>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000a22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d111      	bne.n	8000a4e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a2a:	2019      	movs	r0, #25
 8000a2c:	f000 fdd8 	bl	80015e0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2b0f      	cmp	r3, #15
 8000a34:	d808      	bhi.n	8000a48 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000a36:	2200      	movs	r2, #0
 8000a38:	6879      	ldr	r1, [r7, #4]
 8000a3a:	2019      	movs	r0, #25
 8000a3c:	f000 fdb4 	bl	80015a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a40:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <HAL_InitTick+0xe4>)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6013      	str	r3, [r2, #0]
 8000a46:	e002      	b.n	8000a4e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3730      	adds	r7, #48	; 0x30
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	431bde83 	.word	0x431bde83
 8000a64:	20000104 	.word	0x20000104
 8000a68:	40010000 	.word	0x40010000
 8000a6c:	20000004 	.word	0x20000004

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <NMI_Handler+0x4>

08000a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <HardFault_Handler+0x4>

08000a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <MemManage_Handler+0x4>

08000a82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <BusFault_Handler+0x4>

08000a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <UsageFault_Handler+0x4>

08000a8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000aa0:	4802      	ldr	r0, [pc, #8]	; (8000aac <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000aa2:	f001 fcdb 	bl	800245c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000104 	.word	0x20000104

08000ab0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ab8:	4a14      	ldr	r2, [pc, #80]	; (8000b0c <_sbrk+0x5c>)
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <_sbrk+0x60>)
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ac4:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <_sbrk+0x64>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d102      	bne.n	8000ad2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000acc:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <_sbrk+0x64>)
 8000ace:	4a12      	ldr	r2, [pc, #72]	; (8000b18 <_sbrk+0x68>)
 8000ad0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ad2:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <_sbrk+0x64>)
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4413      	add	r3, r2
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d207      	bcs.n	8000af0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ae0:	f002 fc8c 	bl	80033fc <__errno>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000aee:	e009      	b.n	8000b04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000af0:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <_sbrk+0x64>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000af6:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <_sbrk+0x64>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4413      	add	r3, r2
 8000afe:	4a05      	ldr	r2, [pc, #20]	; (8000b14 <_sbrk+0x64>)
 8000b00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b02:	68fb      	ldr	r3, [r7, #12]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3718      	adds	r7, #24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20020000 	.word	0x20020000
 8000b10:	00000400 	.word	0x00000400
 8000b14:	2000014c 	.word	0x2000014c
 8000b18:	20000350 	.word	0x20000350

08000b1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <SystemInit+0x20>)
 8000b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b26:	4a05      	ldr	r2, [pc, #20]	; (8000b3c <SystemInit+0x20>)
 8000b28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b44:	480d      	ldr	r0, [pc, #52]	; (8000b7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b46:	490e      	ldr	r1, [pc, #56]	; (8000b80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b48:	4a0e      	ldr	r2, [pc, #56]	; (8000b84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b4c:	e002      	b.n	8000b54 <LoopCopyDataInit>

08000b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b52:	3304      	adds	r3, #4

08000b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b58:	d3f9      	bcc.n	8000b4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b5a:	4a0b      	ldr	r2, [pc, #44]	; (8000b88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b5c:	4c0b      	ldr	r4, [pc, #44]	; (8000b8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b60:	e001      	b.n	8000b66 <LoopFillZerobss>

08000b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b64:	3204      	adds	r2, #4

08000b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b68:	d3fb      	bcc.n	8000b62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b6a:	f7ff ffd7 	bl	8000b1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b6e:	f002 fc4b 	bl	8003408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b72:	f7ff fd03 	bl	800057c <main>
  bx  lr    
 8000b76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b80:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b84:	08003d8c 	.word	0x08003d8c
  ldr r2, =_sbss
 8000b88:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b8c:	20000350 	.word	0x20000350

08000b90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b90:	e7fe      	b.n	8000b90 <ADC_IRQHandler>
	...

08000b94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b98:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <HAL_Init+0x40>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a0d      	ldr	r2, [pc, #52]	; (8000bd4 <HAL_Init+0x40>)
 8000b9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ba2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ba4:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <HAL_Init+0x40>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <HAL_Init+0x40>)
 8000baa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <HAL_Init+0x40>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a07      	ldr	r2, [pc, #28]	; (8000bd4 <HAL_Init+0x40>)
 8000bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bbc:	2003      	movs	r0, #3
 8000bbe:	f000 fce8 	bl	8001592 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bc2:	200f      	movs	r0, #15
 8000bc4:	f7ff fee0 	bl	8000988 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc8:	f7ff fe2a 	bl	8000820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40023c00 	.word	0x40023c00

08000bd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return uwTick;
 8000bdc:	4b03      	ldr	r3, [pc, #12]	; (8000bec <HAL_GetTick+0x14>)
 8000bde:	681b      	ldr	r3, [r3, #0]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	20000150 	.word	0x20000150

08000bf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf8:	f7ff ffee 	bl	8000bd8 <HAL_GetTick>
 8000bfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c08:	d005      	beq.n	8000c16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c0a:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <HAL_Delay+0x44>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	461a      	mov	r2, r3
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	4413      	add	r3, r2
 8000c14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c16:	bf00      	nop
 8000c18:	f7ff ffde 	bl	8000bd8 <HAL_GetTick>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	68fa      	ldr	r2, [r7, #12]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d8f7      	bhi.n	8000c18 <HAL_Delay+0x28>
  {
  }
}
 8000c28:	bf00      	nop
 8000c2a:	bf00      	nop
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000008 	.word	0x20000008

08000c38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c40:	2300      	movs	r3, #0
 8000c42:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d101      	bne.n	8000c4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e033      	b.n	8000cb6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d109      	bne.n	8000c6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff fe0a 	bl	8000870 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2200      	movs	r2, #0
 8000c60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2200      	movs	r2, #0
 8000c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	f003 0310 	and.w	r3, r3, #16
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d118      	bne.n	8000ca8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c7e:	f023 0302 	bic.w	r3, r3, #2
 8000c82:	f043 0202 	orr.w	r2, r3, #2
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f000 fad8 	bl	8001240 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2200      	movs	r2, #0
 8000c94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	f023 0303 	bic.w	r3, r3, #3
 8000c9e:	f043 0201 	orr.w	r2, r3, #1
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	641a      	str	r2, [r3, #64]	; 0x40
 8000ca6:	e001      	b.n	8000cac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3710      	adds	r7, #16
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d101      	bne.n	8000cda <HAL_ADC_Start+0x1a>
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	e0b2      	b.n	8000e40 <HAL_ADC_Start+0x180>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2201      	movs	r2, #1
 8000cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d018      	beq.n	8000d22 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	689a      	ldr	r2, [r3, #8]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f042 0201 	orr.w	r2, r2, #1
 8000cfe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000d00:	4b52      	ldr	r3, [pc, #328]	; (8000e4c <HAL_ADC_Start+0x18c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a52      	ldr	r2, [pc, #328]	; (8000e50 <HAL_ADC_Start+0x190>)
 8000d06:	fba2 2303 	umull	r2, r3, r2, r3
 8000d0a:	0c9a      	lsrs	r2, r3, #18
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	4413      	add	r3, r2
 8000d12:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000d14:	e002      	b.n	8000d1c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	3b01      	subs	r3, #1
 8000d1a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d1f9      	bne.n	8000d16 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	f003 0301 	and.w	r3, r3, #1
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d17a      	bne.n	8000e26 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d34:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d38:	f023 0301 	bic.w	r3, r3, #1
 8000d3c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d007      	beq.n	8000d62 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d5a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d6e:	d106      	bne.n	8000d7e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d74:	f023 0206 	bic.w	r2, r3, #6
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	645a      	str	r2, [r3, #68]	; 0x44
 8000d7c:	e002      	b.n	8000d84 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2200      	movs	r2, #0
 8000d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d8c:	4b31      	ldr	r3, [pc, #196]	; (8000e54 <HAL_ADC_Start+0x194>)
 8000d8e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000d98:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f003 031f 	and.w	r3, r3, #31
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d12a      	bne.n	8000dfc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a2b      	ldr	r2, [pc, #172]	; (8000e58 <HAL_ADC_Start+0x198>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d015      	beq.n	8000ddc <HAL_ADC_Start+0x11c>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a29      	ldr	r2, [pc, #164]	; (8000e5c <HAL_ADC_Start+0x19c>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d105      	bne.n	8000dc6 <HAL_ADC_Start+0x106>
 8000dba:	4b26      	ldr	r3, [pc, #152]	; (8000e54 <HAL_ADC_Start+0x194>)
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 031f 	and.w	r3, r3, #31
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d00a      	beq.n	8000ddc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a25      	ldr	r2, [pc, #148]	; (8000e60 <HAL_ADC_Start+0x1a0>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d136      	bne.n	8000e3e <HAL_ADC_Start+0x17e>
 8000dd0:	4b20      	ldr	r3, [pc, #128]	; (8000e54 <HAL_ADC_Start+0x194>)
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f003 0310 	and.w	r3, r3, #16
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d130      	bne.n	8000e3e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d129      	bne.n	8000e3e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	689a      	ldr	r2, [r3, #8]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	e020      	b.n	8000e3e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a15      	ldr	r2, [pc, #84]	; (8000e58 <HAL_ADC_Start+0x198>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d11b      	bne.n	8000e3e <HAL_ADC_Start+0x17e>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d114      	bne.n	8000e3e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	689a      	ldr	r2, [r3, #8]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	e00b      	b.n	8000e3e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	f043 0210 	orr.w	r2, r3, #16
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	f043 0201 	orr.w	r2, r3, #1
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000e3e:	2300      	movs	r3, #0
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	20000000 	.word	0x20000000
 8000e50:	431bde83 	.word	0x431bde83
 8000e54:	40012300 	.word	0x40012300
 8000e58:	40012000 	.word	0x40012000
 8000e5c:	40012100 	.word	0x40012100
 8000e60:	40012200 	.word	0x40012200

08000e64 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d101      	bne.n	8000e7a <HAL_ADC_Stop+0x16>
 8000e76:	2302      	movs	r3, #2
 8000e78:	e021      	b.n	8000ebe <HAL_ADC_Stop+0x5a>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	689a      	ldr	r2, [r3, #8]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f022 0201 	bic.w	r2, r2, #1
 8000e90:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	f003 0301 	and.w	r3, r3, #1
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d109      	bne.n	8000eb4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ea8:	f023 0301 	bic.w	r3, r3, #1
 8000eac:	f043 0201 	orr.w	r2, r3, #1
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b084      	sub	sp, #16
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
 8000ed2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ee6:	d113      	bne.n	8000f10 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000ef2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ef6:	d10b      	bne.n	8000f10 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efc:	f043 0220 	orr.w	r2, r3, #32
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e063      	b.n	8000fd8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000f10:	f7ff fe62 	bl	8000bd8 <HAL_GetTick>
 8000f14:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000f16:	e021      	b.n	8000f5c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f1e:	d01d      	beq.n	8000f5c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d007      	beq.n	8000f36 <HAL_ADC_PollForConversion+0x6c>
 8000f26:	f7ff fe57 	bl	8000bd8 <HAL_GetTick>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	683a      	ldr	r2, [r7, #0]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d212      	bcs.n	8000f5c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f003 0302 	and.w	r3, r3, #2
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d00b      	beq.n	8000f5c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f48:	f043 0204 	orr.w	r2, r3, #4
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2200      	movs	r2, #0
 8000f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	e03d      	b.n	8000fd8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d1d6      	bne.n	8000f18 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f06f 0212 	mvn.w	r2, #18
 8000f72:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f78:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d123      	bne.n	8000fd6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d11f      	bne.n	8000fd6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f9c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d006      	beq.n	8000fb2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d111      	bne.n	8000fd6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d105      	bne.n	8000fd6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	f043 0201 	orr.w	r2, r3, #1
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000fd6:	2300      	movs	r3, #0
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
	...

08000ffc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001006:	2300      	movs	r3, #0
 8001008:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001010:	2b01      	cmp	r3, #1
 8001012:	d101      	bne.n	8001018 <HAL_ADC_ConfigChannel+0x1c>
 8001014:	2302      	movs	r3, #2
 8001016:	e105      	b.n	8001224 <HAL_ADC_ConfigChannel+0x228>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2201      	movs	r2, #1
 800101c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b09      	cmp	r3, #9
 8001026:	d925      	bls.n	8001074 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	68d9      	ldr	r1, [r3, #12]
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	b29b      	uxth	r3, r3
 8001034:	461a      	mov	r2, r3
 8001036:	4613      	mov	r3, r2
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	4413      	add	r3, r2
 800103c:	3b1e      	subs	r3, #30
 800103e:	2207      	movs	r2, #7
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43da      	mvns	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	400a      	ands	r2, r1
 800104c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	68d9      	ldr	r1, [r3, #12]
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	689a      	ldr	r2, [r3, #8]
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	b29b      	uxth	r3, r3
 800105e:	4618      	mov	r0, r3
 8001060:	4603      	mov	r3, r0
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	4403      	add	r3, r0
 8001066:	3b1e      	subs	r3, #30
 8001068:	409a      	lsls	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	430a      	orrs	r2, r1
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	e022      	b.n	80010ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	6919      	ldr	r1, [r3, #16]
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	b29b      	uxth	r3, r3
 8001080:	461a      	mov	r2, r3
 8001082:	4613      	mov	r3, r2
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	4413      	add	r3, r2
 8001088:	2207      	movs	r2, #7
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43da      	mvns	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	400a      	ands	r2, r1
 8001096:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	6919      	ldr	r1, [r3, #16]
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	689a      	ldr	r2, [r3, #8]
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	4618      	mov	r0, r3
 80010aa:	4603      	mov	r3, r0
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	4403      	add	r3, r0
 80010b0:	409a      	lsls	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	430a      	orrs	r2, r1
 80010b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	2b06      	cmp	r3, #6
 80010c0:	d824      	bhi.n	800110c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	4613      	mov	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	3b05      	subs	r3, #5
 80010d4:	221f      	movs	r2, #31
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43da      	mvns	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	400a      	ands	r2, r1
 80010e2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	4618      	mov	r0, r3
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	4613      	mov	r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	4413      	add	r3, r2
 80010fc:	3b05      	subs	r3, #5
 80010fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	430a      	orrs	r2, r1
 8001108:	635a      	str	r2, [r3, #52]	; 0x34
 800110a:	e04c      	b.n	80011a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	2b0c      	cmp	r3, #12
 8001112:	d824      	bhi.n	800115e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	4613      	mov	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	3b23      	subs	r3, #35	; 0x23
 8001126:	221f      	movs	r2, #31
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43da      	mvns	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	400a      	ands	r2, r1
 8001134:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	b29b      	uxth	r3, r3
 8001142:	4618      	mov	r0, r3
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685a      	ldr	r2, [r3, #4]
 8001148:	4613      	mov	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	4413      	add	r3, r2
 800114e:	3b23      	subs	r3, #35	; 0x23
 8001150:	fa00 f203 	lsl.w	r2, r0, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	430a      	orrs	r2, r1
 800115a:	631a      	str	r2, [r3, #48]	; 0x30
 800115c:	e023      	b.n	80011a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	4613      	mov	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4413      	add	r3, r2
 800116e:	3b41      	subs	r3, #65	; 0x41
 8001170:	221f      	movs	r2, #31
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43da      	mvns	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	400a      	ands	r2, r1
 800117e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	b29b      	uxth	r3, r3
 800118c:	4618      	mov	r0, r3
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	4613      	mov	r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	4413      	add	r3, r2
 8001198:	3b41      	subs	r3, #65	; 0x41
 800119a:	fa00 f203 	lsl.w	r2, r0, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	430a      	orrs	r2, r1
 80011a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011a6:	4b22      	ldr	r3, [pc, #136]	; (8001230 <HAL_ADC_ConfigChannel+0x234>)
 80011a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a21      	ldr	r2, [pc, #132]	; (8001234 <HAL_ADC_ConfigChannel+0x238>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d109      	bne.n	80011c8 <HAL_ADC_ConfigChannel+0x1cc>
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b12      	cmp	r3, #18
 80011ba:	d105      	bne.n	80011c8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a19      	ldr	r2, [pc, #100]	; (8001234 <HAL_ADC_ConfigChannel+0x238>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d123      	bne.n	800121a <HAL_ADC_ConfigChannel+0x21e>
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2b10      	cmp	r3, #16
 80011d8:	d003      	beq.n	80011e2 <HAL_ADC_ConfigChannel+0x1e6>
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2b11      	cmp	r3, #17
 80011e0:	d11b      	bne.n	800121a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2b10      	cmp	r3, #16
 80011f4:	d111      	bne.n	800121a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011f6:	4b10      	ldr	r3, [pc, #64]	; (8001238 <HAL_ADC_ConfigChannel+0x23c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a10      	ldr	r2, [pc, #64]	; (800123c <HAL_ADC_ConfigChannel+0x240>)
 80011fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001200:	0c9a      	lsrs	r2, r3, #18
 8001202:	4613      	mov	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4413      	add	r3, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800120c:	e002      	b.n	8001214 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	3b01      	subs	r3, #1
 8001212:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1f9      	bne.n	800120e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001222:	2300      	movs	r3, #0
}
 8001224:	4618      	mov	r0, r3
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	40012300 	.word	0x40012300
 8001234:	40012000 	.word	0x40012000
 8001238:	20000000 	.word	0x20000000
 800123c:	431bde83 	.word	0x431bde83

08001240 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001248:	4b79      	ldr	r3, [pc, #484]	; (8001430 <ADC_Init+0x1f0>)
 800124a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	685a      	ldr	r2, [r3, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	431a      	orrs	r2, r3
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	685a      	ldr	r2, [r3, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001274:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	6859      	ldr	r1, [r3, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	691b      	ldr	r3, [r3, #16]
 8001280:	021a      	lsls	r2, r3, #8
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	430a      	orrs	r2, r1
 8001288:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001298:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	6859      	ldr	r1, [r3, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	430a      	orrs	r2, r1
 80012aa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	6899      	ldr	r1, [r3, #8]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	68da      	ldr	r2, [r3, #12]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	430a      	orrs	r2, r1
 80012cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d2:	4a58      	ldr	r2, [pc, #352]	; (8001434 <ADC_Init+0x1f4>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d022      	beq.n	800131e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	689a      	ldr	r2, [r3, #8]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6899      	ldr	r1, [r3, #8]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	430a      	orrs	r2, r1
 80012f8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001308:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6899      	ldr	r1, [r3, #8]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	430a      	orrs	r2, r1
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	e00f      	b.n	800133e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800132c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800133c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f022 0202 	bic.w	r2, r2, #2
 800134c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	6899      	ldr	r1, [r3, #8]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	7e1b      	ldrb	r3, [r3, #24]
 8001358:	005a      	lsls	r2, r3, #1
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	430a      	orrs	r2, r1
 8001360:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d01b      	beq.n	80013a4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800137a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800138a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6859      	ldr	r1, [r3, #4]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001396:	3b01      	subs	r3, #1
 8001398:	035a      	lsls	r2, r3, #13
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	430a      	orrs	r2, r1
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	e007      	b.n	80013b4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	685a      	ldr	r2, [r3, #4]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80013c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	051a      	lsls	r2, r3, #20
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	430a      	orrs	r2, r1
 80013d8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80013e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6899      	ldr	r1, [r3, #8]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013f6:	025a      	lsls	r2, r3, #9
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	430a      	orrs	r2, r1
 80013fe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	689a      	ldr	r2, [r3, #8]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800140e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6899      	ldr	r1, [r3, #8]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	029a      	lsls	r2, r3, #10
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	430a      	orrs	r2, r1
 8001422:	609a      	str	r2, [r3, #8]
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	40012300 	.word	0x40012300
 8001434:	0f000001 	.word	0x0f000001

08001438 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <__NVIC_SetPriorityGrouping+0x44>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001454:	4013      	ands	r3, r2
 8001456:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001460:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800146a:	4a04      	ldr	r2, [pc, #16]	; (800147c <__NVIC_SetPriorityGrouping+0x44>)
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	60d3      	str	r3, [r2, #12]
}
 8001470:	bf00      	nop
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001484:	4b04      	ldr	r3, [pc, #16]	; (8001498 <__NVIC_GetPriorityGrouping+0x18>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	0a1b      	lsrs	r3, r3, #8
 800148a:	f003 0307 	and.w	r3, r3, #7
}
 800148e:	4618      	mov	r0, r3
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	db0b      	blt.n	80014c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	f003 021f 	and.w	r2, r3, #31
 80014b4:	4907      	ldr	r1, [pc, #28]	; (80014d4 <__NVIC_EnableIRQ+0x38>)
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	095b      	lsrs	r3, r3, #5
 80014bc:	2001      	movs	r0, #1
 80014be:	fa00 f202 	lsl.w	r2, r0, r2
 80014c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	e000e100 	.word	0xe000e100

080014d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	6039      	str	r1, [r7, #0]
 80014e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	db0a      	blt.n	8001502 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	490c      	ldr	r1, [pc, #48]	; (8001524 <__NVIC_SetPriority+0x4c>)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	0112      	lsls	r2, r2, #4
 80014f8:	b2d2      	uxtb	r2, r2
 80014fa:	440b      	add	r3, r1
 80014fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001500:	e00a      	b.n	8001518 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	b2da      	uxtb	r2, r3
 8001506:	4908      	ldr	r1, [pc, #32]	; (8001528 <__NVIC_SetPriority+0x50>)
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	f003 030f 	and.w	r3, r3, #15
 800150e:	3b04      	subs	r3, #4
 8001510:	0112      	lsls	r2, r2, #4
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	440b      	add	r3, r1
 8001516:	761a      	strb	r2, [r3, #24]
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	e000e100 	.word	0xe000e100
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800152c:	b480      	push	{r7}
 800152e:	b089      	sub	sp, #36	; 0x24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f1c3 0307 	rsb	r3, r3, #7
 8001546:	2b04      	cmp	r3, #4
 8001548:	bf28      	it	cs
 800154a:	2304      	movcs	r3, #4
 800154c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	3304      	adds	r3, #4
 8001552:	2b06      	cmp	r3, #6
 8001554:	d902      	bls.n	800155c <NVIC_EncodePriority+0x30>
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	3b03      	subs	r3, #3
 800155a:	e000      	b.n	800155e <NVIC_EncodePriority+0x32>
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001560:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43da      	mvns	r2, r3
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	401a      	ands	r2, r3
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001574:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	fa01 f303 	lsl.w	r3, r1, r3
 800157e:	43d9      	mvns	r1, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001584:	4313      	orrs	r3, r2
         );
}
 8001586:	4618      	mov	r0, r3
 8001588:	3724      	adds	r7, #36	; 0x24
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff ff4c 	bl	8001438 <__NVIC_SetPriorityGrouping>
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
 80015b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015ba:	f7ff ff61 	bl	8001480 <__NVIC_GetPriorityGrouping>
 80015be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	68b9      	ldr	r1, [r7, #8]
 80015c4:	6978      	ldr	r0, [r7, #20]
 80015c6:	f7ff ffb1 	bl	800152c <NVIC_EncodePriority>
 80015ca:	4602      	mov	r2, r0
 80015cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d0:	4611      	mov	r1, r2
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff ff80 	bl	80014d8 <__NVIC_SetPriority>
}
 80015d8:	bf00      	nop
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff ff54 	bl	800149c <__NVIC_EnableIRQ>
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b089      	sub	sp, #36	; 0x24
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800160e:	2300      	movs	r3, #0
 8001610:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001612:	2300      	movs	r3, #0
 8001614:	61fb      	str	r3, [r7, #28]
 8001616:	e16b      	b.n	80018f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001618:	2201      	movs	r2, #1
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	697a      	ldr	r2, [r7, #20]
 8001628:	4013      	ands	r3, r2
 800162a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	429a      	cmp	r2, r3
 8001632:	f040 815a 	bne.w	80018ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f003 0303 	and.w	r3, r3, #3
 800163e:	2b01      	cmp	r3, #1
 8001640:	d005      	beq.n	800164e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800164a:	2b02      	cmp	r3, #2
 800164c:	d130      	bne.n	80016b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	2203      	movs	r2, #3
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43db      	mvns	r3, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4013      	ands	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	68da      	ldr	r2, [r3, #12]
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4313      	orrs	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001684:	2201      	movs	r2, #1
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	091b      	lsrs	r3, r3, #4
 800169a:	f003 0201 	and.w	r2, r3, #1
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 0303 	and.w	r3, r3, #3
 80016b8:	2b03      	cmp	r3, #3
 80016ba:	d017      	beq.n	80016ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	2203      	movs	r2, #3
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4013      	ands	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 0303 	and.w	r3, r3, #3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d123      	bne.n	8001740 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	08da      	lsrs	r2, r3, #3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3208      	adds	r2, #8
 8001700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001704:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	f003 0307 	and.w	r3, r3, #7
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	220f      	movs	r2, #15
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	4013      	ands	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	691a      	ldr	r2, [r3, #16]
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	08da      	lsrs	r2, r3, #3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	3208      	adds	r2, #8
 800173a:	69b9      	ldr	r1, [r7, #24]
 800173c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	2203      	movs	r2, #3
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4013      	ands	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f003 0203 	and.w	r2, r3, #3
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4313      	orrs	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800177c:	2b00      	cmp	r3, #0
 800177e:	f000 80b4 	beq.w	80018ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	4b60      	ldr	r3, [pc, #384]	; (8001908 <HAL_GPIO_Init+0x30c>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178a:	4a5f      	ldr	r2, [pc, #380]	; (8001908 <HAL_GPIO_Init+0x30c>)
 800178c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001790:	6453      	str	r3, [r2, #68]	; 0x44
 8001792:	4b5d      	ldr	r3, [pc, #372]	; (8001908 <HAL_GPIO_Init+0x30c>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800179e:	4a5b      	ldr	r2, [pc, #364]	; (800190c <HAL_GPIO_Init+0x310>)
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	089b      	lsrs	r3, r3, #2
 80017a4:	3302      	adds	r3, #2
 80017a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f003 0303 	and.w	r3, r3, #3
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	220f      	movs	r2, #15
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43db      	mvns	r3, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4013      	ands	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a52      	ldr	r2, [pc, #328]	; (8001910 <HAL_GPIO_Init+0x314>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d02b      	beq.n	8001822 <HAL_GPIO_Init+0x226>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a51      	ldr	r2, [pc, #324]	; (8001914 <HAL_GPIO_Init+0x318>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d025      	beq.n	800181e <HAL_GPIO_Init+0x222>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a50      	ldr	r2, [pc, #320]	; (8001918 <HAL_GPIO_Init+0x31c>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d01f      	beq.n	800181a <HAL_GPIO_Init+0x21e>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a4f      	ldr	r2, [pc, #316]	; (800191c <HAL_GPIO_Init+0x320>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d019      	beq.n	8001816 <HAL_GPIO_Init+0x21a>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a4e      	ldr	r2, [pc, #312]	; (8001920 <HAL_GPIO_Init+0x324>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d013      	beq.n	8001812 <HAL_GPIO_Init+0x216>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a4d      	ldr	r2, [pc, #308]	; (8001924 <HAL_GPIO_Init+0x328>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d00d      	beq.n	800180e <HAL_GPIO_Init+0x212>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a4c      	ldr	r2, [pc, #304]	; (8001928 <HAL_GPIO_Init+0x32c>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d007      	beq.n	800180a <HAL_GPIO_Init+0x20e>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a4b      	ldr	r2, [pc, #300]	; (800192c <HAL_GPIO_Init+0x330>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d101      	bne.n	8001806 <HAL_GPIO_Init+0x20a>
 8001802:	2307      	movs	r3, #7
 8001804:	e00e      	b.n	8001824 <HAL_GPIO_Init+0x228>
 8001806:	2308      	movs	r3, #8
 8001808:	e00c      	b.n	8001824 <HAL_GPIO_Init+0x228>
 800180a:	2306      	movs	r3, #6
 800180c:	e00a      	b.n	8001824 <HAL_GPIO_Init+0x228>
 800180e:	2305      	movs	r3, #5
 8001810:	e008      	b.n	8001824 <HAL_GPIO_Init+0x228>
 8001812:	2304      	movs	r3, #4
 8001814:	e006      	b.n	8001824 <HAL_GPIO_Init+0x228>
 8001816:	2303      	movs	r3, #3
 8001818:	e004      	b.n	8001824 <HAL_GPIO_Init+0x228>
 800181a:	2302      	movs	r3, #2
 800181c:	e002      	b.n	8001824 <HAL_GPIO_Init+0x228>
 800181e:	2301      	movs	r3, #1
 8001820:	e000      	b.n	8001824 <HAL_GPIO_Init+0x228>
 8001822:	2300      	movs	r3, #0
 8001824:	69fa      	ldr	r2, [r7, #28]
 8001826:	f002 0203 	and.w	r2, r2, #3
 800182a:	0092      	lsls	r2, r2, #2
 800182c:	4093      	lsls	r3, r2
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4313      	orrs	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001834:	4935      	ldr	r1, [pc, #212]	; (800190c <HAL_GPIO_Init+0x310>)
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	089b      	lsrs	r3, r3, #2
 800183a:	3302      	adds	r3, #2
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001842:	4b3b      	ldr	r3, [pc, #236]	; (8001930 <HAL_GPIO_Init+0x334>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	43db      	mvns	r3, r3
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4013      	ands	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	4313      	orrs	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001866:	4a32      	ldr	r2, [pc, #200]	; (8001930 <HAL_GPIO_Init+0x334>)
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800186c:	4b30      	ldr	r3, [pc, #192]	; (8001930 <HAL_GPIO_Init+0x334>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	43db      	mvns	r3, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4013      	ands	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	4313      	orrs	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001890:	4a27      	ldr	r2, [pc, #156]	; (8001930 <HAL_GPIO_Init+0x334>)
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001896:	4b26      	ldr	r3, [pc, #152]	; (8001930 <HAL_GPIO_Init+0x334>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	43db      	mvns	r3, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4013      	ands	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018ba:	4a1d      	ldr	r2, [pc, #116]	; (8001930 <HAL_GPIO_Init+0x334>)
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018c0:	4b1b      	ldr	r3, [pc, #108]	; (8001930 <HAL_GPIO_Init+0x334>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	43db      	mvns	r3, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d003      	beq.n	80018e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018e4:	4a12      	ldr	r2, [pc, #72]	; (8001930 <HAL_GPIO_Init+0x334>)
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3301      	adds	r3, #1
 80018ee:	61fb      	str	r3, [r7, #28]
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	2b0f      	cmp	r3, #15
 80018f4:	f67f ae90 	bls.w	8001618 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018f8:	bf00      	nop
 80018fa:	bf00      	nop
 80018fc:	3724      	adds	r7, #36	; 0x24
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	40023800 	.word	0x40023800
 800190c:	40013800 	.word	0x40013800
 8001910:	40020000 	.word	0x40020000
 8001914:	40020400 	.word	0x40020400
 8001918:	40020800 	.word	0x40020800
 800191c:	40020c00 	.word	0x40020c00
 8001920:	40021000 	.word	0x40021000
 8001924:	40021400 	.word	0x40021400
 8001928:	40021800 	.word	0x40021800
 800192c:	40021c00 	.word	0x40021c00
 8001930:	40013c00 	.word	0x40013c00

08001934 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e267      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	2b00      	cmp	r3, #0
 8001950:	d075      	beq.n	8001a3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001952:	4b88      	ldr	r3, [pc, #544]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 030c 	and.w	r3, r3, #12
 800195a:	2b04      	cmp	r3, #4
 800195c:	d00c      	beq.n	8001978 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800195e:	4b85      	ldr	r3, [pc, #532]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001966:	2b08      	cmp	r3, #8
 8001968:	d112      	bne.n	8001990 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800196a:	4b82      	ldr	r3, [pc, #520]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001972:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001976:	d10b      	bne.n	8001990 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001978:	4b7e      	ldr	r3, [pc, #504]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d05b      	beq.n	8001a3c <HAL_RCC_OscConfig+0x108>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d157      	bne.n	8001a3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e242      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001998:	d106      	bne.n	80019a8 <HAL_RCC_OscConfig+0x74>
 800199a:	4b76      	ldr	r3, [pc, #472]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a75      	ldr	r2, [pc, #468]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 80019a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a4:	6013      	str	r3, [r2, #0]
 80019a6:	e01d      	b.n	80019e4 <HAL_RCC_OscConfig+0xb0>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019b0:	d10c      	bne.n	80019cc <HAL_RCC_OscConfig+0x98>
 80019b2:	4b70      	ldr	r3, [pc, #448]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a6f      	ldr	r2, [pc, #444]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 80019b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	4b6d      	ldr	r3, [pc, #436]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a6c      	ldr	r2, [pc, #432]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 80019c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c8:	6013      	str	r3, [r2, #0]
 80019ca:	e00b      	b.n	80019e4 <HAL_RCC_OscConfig+0xb0>
 80019cc:	4b69      	ldr	r3, [pc, #420]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a68      	ldr	r2, [pc, #416]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 80019d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	4b66      	ldr	r3, [pc, #408]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a65      	ldr	r2, [pc, #404]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 80019de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d013      	beq.n	8001a14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ec:	f7ff f8f4 	bl	8000bd8 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019f4:	f7ff f8f0 	bl	8000bd8 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b64      	cmp	r3, #100	; 0x64
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e207      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a06:	4b5b      	ldr	r3, [pc, #364]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d0f0      	beq.n	80019f4 <HAL_RCC_OscConfig+0xc0>
 8001a12:	e014      	b.n	8001a3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a14:	f7ff f8e0 	bl	8000bd8 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a1c:	f7ff f8dc 	bl	8000bd8 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b64      	cmp	r3, #100	; 0x64
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e1f3      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a2e:	4b51      	ldr	r3, [pc, #324]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1f0      	bne.n	8001a1c <HAL_RCC_OscConfig+0xe8>
 8001a3a:	e000      	b.n	8001a3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d063      	beq.n	8001b12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a4a:	4b4a      	ldr	r3, [pc, #296]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f003 030c 	and.w	r3, r3, #12
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00b      	beq.n	8001a6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a56:	4b47      	ldr	r3, [pc, #284]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a5e:	2b08      	cmp	r3, #8
 8001a60:	d11c      	bne.n	8001a9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a62:	4b44      	ldr	r3, [pc, #272]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d116      	bne.n	8001a9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a6e:	4b41      	ldr	r3, [pc, #260]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d005      	beq.n	8001a86 <HAL_RCC_OscConfig+0x152>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d001      	beq.n	8001a86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e1c7      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a86:	4b3b      	ldr	r3, [pc, #236]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	4937      	ldr	r1, [pc, #220]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a9a:	e03a      	b.n	8001b12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d020      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aa4:	4b34      	ldr	r3, [pc, #208]	; (8001b78 <HAL_RCC_OscConfig+0x244>)
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aaa:	f7ff f895 	bl	8000bd8 <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab0:	e008      	b.n	8001ac4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ab2:	f7ff f891 	bl	8000bd8 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e1a8      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac4:	4b2b      	ldr	r3, [pc, #172]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0f0      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad0:	4b28      	ldr	r3, [pc, #160]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	4925      	ldr	r1, [pc, #148]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	600b      	str	r3, [r1, #0]
 8001ae4:	e015      	b.n	8001b12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ae6:	4b24      	ldr	r3, [pc, #144]	; (8001b78 <HAL_RCC_OscConfig+0x244>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aec:	f7ff f874 	bl	8000bd8 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001af4:	f7ff f870 	bl	8000bd8 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e187      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b06:	4b1b      	ldr	r3, [pc, #108]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f0      	bne.n	8001af4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d036      	beq.n	8001b8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d016      	beq.n	8001b54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b26:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <HAL_RCC_OscConfig+0x248>)
 8001b28:	2201      	movs	r2, #1
 8001b2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b2c:	f7ff f854 	bl	8000bd8 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b34:	f7ff f850 	bl	8000bd8 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e167      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b46:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0f0      	beq.n	8001b34 <HAL_RCC_OscConfig+0x200>
 8001b52:	e01b      	b.n	8001b8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b54:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <HAL_RCC_OscConfig+0x248>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b5a:	f7ff f83d 	bl	8000bd8 <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b60:	e00e      	b.n	8001b80 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b62:	f7ff f839 	bl	8000bd8 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d907      	bls.n	8001b80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e150      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
 8001b74:	40023800 	.word	0x40023800
 8001b78:	42470000 	.word	0x42470000
 8001b7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b80:	4b88      	ldr	r3, [pc, #544]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1ea      	bne.n	8001b62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 8097 	beq.w	8001cc8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b9e:	4b81      	ldr	r3, [pc, #516]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d10f      	bne.n	8001bca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	4b7d      	ldr	r3, [pc, #500]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	4a7c      	ldr	r2, [pc, #496]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bba:	4b7a      	ldr	r3, [pc, #488]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc2:	60bb      	str	r3, [r7, #8]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bca:	4b77      	ldr	r3, [pc, #476]	; (8001da8 <HAL_RCC_OscConfig+0x474>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d118      	bne.n	8001c08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bd6:	4b74      	ldr	r3, [pc, #464]	; (8001da8 <HAL_RCC_OscConfig+0x474>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a73      	ldr	r2, [pc, #460]	; (8001da8 <HAL_RCC_OscConfig+0x474>)
 8001bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001be2:	f7fe fff9 	bl	8000bd8 <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bea:	f7fe fff5 	bl	8000bd8 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e10c      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bfc:	4b6a      	ldr	r3, [pc, #424]	; (8001da8 <HAL_RCC_OscConfig+0x474>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0f0      	beq.n	8001bea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d106      	bne.n	8001c1e <HAL_RCC_OscConfig+0x2ea>
 8001c10:	4b64      	ldr	r3, [pc, #400]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c14:	4a63      	ldr	r2, [pc, #396]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c1c:	e01c      	b.n	8001c58 <HAL_RCC_OscConfig+0x324>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	2b05      	cmp	r3, #5
 8001c24:	d10c      	bne.n	8001c40 <HAL_RCC_OscConfig+0x30c>
 8001c26:	4b5f      	ldr	r3, [pc, #380]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c2a:	4a5e      	ldr	r2, [pc, #376]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001c2c:	f043 0304 	orr.w	r3, r3, #4
 8001c30:	6713      	str	r3, [r2, #112]	; 0x70
 8001c32:	4b5c      	ldr	r3, [pc, #368]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c36:	4a5b      	ldr	r2, [pc, #364]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c3e:	e00b      	b.n	8001c58 <HAL_RCC_OscConfig+0x324>
 8001c40:	4b58      	ldr	r3, [pc, #352]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c44:	4a57      	ldr	r2, [pc, #348]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001c46:	f023 0301 	bic.w	r3, r3, #1
 8001c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c4c:	4b55      	ldr	r3, [pc, #340]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c50:	4a54      	ldr	r2, [pc, #336]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001c52:	f023 0304 	bic.w	r3, r3, #4
 8001c56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d015      	beq.n	8001c8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c60:	f7fe ffba 	bl	8000bd8 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c66:	e00a      	b.n	8001c7e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c68:	f7fe ffb6 	bl	8000bd8 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e0cb      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c7e:	4b49      	ldr	r3, [pc, #292]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0ee      	beq.n	8001c68 <HAL_RCC_OscConfig+0x334>
 8001c8a:	e014      	b.n	8001cb6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c8c:	f7fe ffa4 	bl	8000bd8 <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c92:	e00a      	b.n	8001caa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c94:	f7fe ffa0 	bl	8000bd8 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e0b5      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001caa:	4b3e      	ldr	r3, [pc, #248]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1ee      	bne.n	8001c94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cb6:	7dfb      	ldrb	r3, [r7, #23]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d105      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cbc:	4b39      	ldr	r3, [pc, #228]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	4a38      	ldr	r2, [pc, #224]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001cc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cc6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f000 80a1 	beq.w	8001e14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cd2:	4b34      	ldr	r3, [pc, #208]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f003 030c 	and.w	r3, r3, #12
 8001cda:	2b08      	cmp	r3, #8
 8001cdc:	d05c      	beq.n	8001d98 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d141      	bne.n	8001d6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ce6:	4b31      	ldr	r3, [pc, #196]	; (8001dac <HAL_RCC_OscConfig+0x478>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cec:	f7fe ff74 	bl	8000bd8 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cf4:	f7fe ff70 	bl	8000bd8 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e087      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d06:	4b27      	ldr	r3, [pc, #156]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f0      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69da      	ldr	r2, [r3, #28]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d20:	019b      	lsls	r3, r3, #6
 8001d22:	431a      	orrs	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d28:	085b      	lsrs	r3, r3, #1
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	041b      	lsls	r3, r3, #16
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d34:	061b      	lsls	r3, r3, #24
 8001d36:	491b      	ldr	r1, [pc, #108]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d3c:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <HAL_RCC_OscConfig+0x478>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d42:	f7fe ff49 	bl	8000bd8 <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d4a:	f7fe ff45 	bl	8000bd8 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e05c      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d5c:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0f0      	beq.n	8001d4a <HAL_RCC_OscConfig+0x416>
 8001d68:	e054      	b.n	8001e14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d6a:	4b10      	ldr	r3, [pc, #64]	; (8001dac <HAL_RCC_OscConfig+0x478>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d70:	f7fe ff32 	bl	8000bd8 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d78:	f7fe ff2e 	bl	8000bd8 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e045      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d8a:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1f0      	bne.n	8001d78 <HAL_RCC_OscConfig+0x444>
 8001d96:	e03d      	b.n	8001e14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d107      	bne.n	8001db0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e038      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
 8001da4:	40023800 	.word	0x40023800
 8001da8:	40007000 	.word	0x40007000
 8001dac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001db0:	4b1b      	ldr	r3, [pc, #108]	; (8001e20 <HAL_RCC_OscConfig+0x4ec>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d028      	beq.n	8001e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d121      	bne.n	8001e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d11a      	bne.n	8001e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001de0:	4013      	ands	r3, r2
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001de6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d111      	bne.n	8001e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df6:	085b      	lsrs	r3, r3, #1
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d107      	bne.n	8001e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d001      	beq.n	8001e14 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e000      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40023800 	.word	0x40023800

08001e24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d101      	bne.n	8001e38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e0cc      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e38:	4b68      	ldr	r3, [pc, #416]	; (8001fdc <HAL_RCC_ClockConfig+0x1b8>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d90c      	bls.n	8001e60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e46:	4b65      	ldr	r3, [pc, #404]	; (8001fdc <HAL_RCC_ClockConfig+0x1b8>)
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e4e:	4b63      	ldr	r3, [pc, #396]	; (8001fdc <HAL_RCC_ClockConfig+0x1b8>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d001      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e0b8      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d020      	beq.n	8001eae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d005      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e78:	4b59      	ldr	r3, [pc, #356]	; (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	4a58      	ldr	r2, [pc, #352]	; (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0308 	and.w	r3, r3, #8
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d005      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e90:	4b53      	ldr	r3, [pc, #332]	; (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	4a52      	ldr	r2, [pc, #328]	; (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e9c:	4b50      	ldr	r3, [pc, #320]	; (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	494d      	ldr	r1, [pc, #308]	; (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d044      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d107      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec2:	4b47      	ldr	r3, [pc, #284]	; (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d119      	bne.n	8001f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e07f      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d003      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ede:	2b03      	cmp	r3, #3
 8001ee0:	d107      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ee2:	4b3f      	ldr	r3, [pc, #252]	; (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d109      	bne.n	8001f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e06f      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef2:	4b3b      	ldr	r3, [pc, #236]	; (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e067      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f02:	4b37      	ldr	r3, [pc, #220]	; (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f023 0203 	bic.w	r2, r3, #3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	4934      	ldr	r1, [pc, #208]	; (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f14:	f7fe fe60 	bl	8000bd8 <HAL_GetTick>
 8001f18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f1a:	e00a      	b.n	8001f32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f1c:	f7fe fe5c 	bl	8000bd8 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e04f      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f32:	4b2b      	ldr	r3, [pc, #172]	; (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 020c 	and.w	r2, r3, #12
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d1eb      	bne.n	8001f1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f44:	4b25      	ldr	r3, [pc, #148]	; (8001fdc <HAL_RCC_ClockConfig+0x1b8>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d20c      	bcs.n	8001f6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f52:	4b22      	ldr	r3, [pc, #136]	; (8001fdc <HAL_RCC_ClockConfig+0x1b8>)
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	b2d2      	uxtb	r2, r2
 8001f58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f5a:	4b20      	ldr	r3, [pc, #128]	; (8001fdc <HAL_RCC_ClockConfig+0x1b8>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d001      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e032      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d008      	beq.n	8001f8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f78:	4b19      	ldr	r3, [pc, #100]	; (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	4916      	ldr	r1, [pc, #88]	; (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d009      	beq.n	8001faa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f96:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	490e      	ldr	r1, [pc, #56]	; (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001faa:	f000 f821 	bl	8001ff0 <HAL_RCC_GetSysClockFreq>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	091b      	lsrs	r3, r3, #4
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	490a      	ldr	r1, [pc, #40]	; (8001fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8001fbc:	5ccb      	ldrb	r3, [r1, r3]
 8001fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc2:	4a09      	ldr	r2, [pc, #36]	; (8001fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001fc6:	4b09      	ldr	r3, [pc, #36]	; (8001fec <HAL_RCC_ClockConfig+0x1c8>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe fcdc 	bl	8000988 <HAL_InitTick>

  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40023c00 	.word	0x40023c00
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	08003d30 	.word	0x08003d30
 8001fe8:	20000000 	.word	0x20000000
 8001fec:	20000004 	.word	0x20000004

08001ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ff4:	b094      	sub	sp, #80	; 0x50
 8001ff6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	647b      	str	r3, [r7, #68]	; 0x44
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002000:	2300      	movs	r3, #0
 8002002:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002004:	2300      	movs	r3, #0
 8002006:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002008:	4b79      	ldr	r3, [pc, #484]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 030c 	and.w	r3, r3, #12
 8002010:	2b08      	cmp	r3, #8
 8002012:	d00d      	beq.n	8002030 <HAL_RCC_GetSysClockFreq+0x40>
 8002014:	2b08      	cmp	r3, #8
 8002016:	f200 80e1 	bhi.w	80021dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800201a:	2b00      	cmp	r3, #0
 800201c:	d002      	beq.n	8002024 <HAL_RCC_GetSysClockFreq+0x34>
 800201e:	2b04      	cmp	r3, #4
 8002020:	d003      	beq.n	800202a <HAL_RCC_GetSysClockFreq+0x3a>
 8002022:	e0db      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002024:	4b73      	ldr	r3, [pc, #460]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002026:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002028:	e0db      	b.n	80021e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800202a:	4b73      	ldr	r3, [pc, #460]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800202c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800202e:	e0d8      	b.n	80021e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002030:	4b6f      	ldr	r3, [pc, #444]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002038:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800203a:	4b6d      	ldr	r3, [pc, #436]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d063      	beq.n	800210e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002046:	4b6a      	ldr	r3, [pc, #424]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	099b      	lsrs	r3, r3, #6
 800204c:	2200      	movs	r2, #0
 800204e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002050:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002058:	633b      	str	r3, [r7, #48]	; 0x30
 800205a:	2300      	movs	r3, #0
 800205c:	637b      	str	r3, [r7, #52]	; 0x34
 800205e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002062:	4622      	mov	r2, r4
 8002064:	462b      	mov	r3, r5
 8002066:	f04f 0000 	mov.w	r0, #0
 800206a:	f04f 0100 	mov.w	r1, #0
 800206e:	0159      	lsls	r1, r3, #5
 8002070:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002074:	0150      	lsls	r0, r2, #5
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	4621      	mov	r1, r4
 800207c:	1a51      	subs	r1, r2, r1
 800207e:	6139      	str	r1, [r7, #16]
 8002080:	4629      	mov	r1, r5
 8002082:	eb63 0301 	sbc.w	r3, r3, r1
 8002086:	617b      	str	r3, [r7, #20]
 8002088:	f04f 0200 	mov.w	r2, #0
 800208c:	f04f 0300 	mov.w	r3, #0
 8002090:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002094:	4659      	mov	r1, fp
 8002096:	018b      	lsls	r3, r1, #6
 8002098:	4651      	mov	r1, sl
 800209a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800209e:	4651      	mov	r1, sl
 80020a0:	018a      	lsls	r2, r1, #6
 80020a2:	4651      	mov	r1, sl
 80020a4:	ebb2 0801 	subs.w	r8, r2, r1
 80020a8:	4659      	mov	r1, fp
 80020aa:	eb63 0901 	sbc.w	r9, r3, r1
 80020ae:	f04f 0200 	mov.w	r2, #0
 80020b2:	f04f 0300 	mov.w	r3, #0
 80020b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020c2:	4690      	mov	r8, r2
 80020c4:	4699      	mov	r9, r3
 80020c6:	4623      	mov	r3, r4
 80020c8:	eb18 0303 	adds.w	r3, r8, r3
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	462b      	mov	r3, r5
 80020d0:	eb49 0303 	adc.w	r3, r9, r3
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	f04f 0300 	mov.w	r3, #0
 80020de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80020e2:	4629      	mov	r1, r5
 80020e4:	024b      	lsls	r3, r1, #9
 80020e6:	4621      	mov	r1, r4
 80020e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020ec:	4621      	mov	r1, r4
 80020ee:	024a      	lsls	r2, r1, #9
 80020f0:	4610      	mov	r0, r2
 80020f2:	4619      	mov	r1, r3
 80020f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020f6:	2200      	movs	r2, #0
 80020f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80020fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80020fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002100:	f7fe f8be 	bl	8000280 <__aeabi_uldivmod>
 8002104:	4602      	mov	r2, r0
 8002106:	460b      	mov	r3, r1
 8002108:	4613      	mov	r3, r2
 800210a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800210c:	e058      	b.n	80021c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800210e:	4b38      	ldr	r3, [pc, #224]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	099b      	lsrs	r3, r3, #6
 8002114:	2200      	movs	r2, #0
 8002116:	4618      	mov	r0, r3
 8002118:	4611      	mov	r1, r2
 800211a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800211e:	623b      	str	r3, [r7, #32]
 8002120:	2300      	movs	r3, #0
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
 8002124:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002128:	4642      	mov	r2, r8
 800212a:	464b      	mov	r3, r9
 800212c:	f04f 0000 	mov.w	r0, #0
 8002130:	f04f 0100 	mov.w	r1, #0
 8002134:	0159      	lsls	r1, r3, #5
 8002136:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800213a:	0150      	lsls	r0, r2, #5
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	4641      	mov	r1, r8
 8002142:	ebb2 0a01 	subs.w	sl, r2, r1
 8002146:	4649      	mov	r1, r9
 8002148:	eb63 0b01 	sbc.w	fp, r3, r1
 800214c:	f04f 0200 	mov.w	r2, #0
 8002150:	f04f 0300 	mov.w	r3, #0
 8002154:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002158:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800215c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002160:	ebb2 040a 	subs.w	r4, r2, sl
 8002164:	eb63 050b 	sbc.w	r5, r3, fp
 8002168:	f04f 0200 	mov.w	r2, #0
 800216c:	f04f 0300 	mov.w	r3, #0
 8002170:	00eb      	lsls	r3, r5, #3
 8002172:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002176:	00e2      	lsls	r2, r4, #3
 8002178:	4614      	mov	r4, r2
 800217a:	461d      	mov	r5, r3
 800217c:	4643      	mov	r3, r8
 800217e:	18e3      	adds	r3, r4, r3
 8002180:	603b      	str	r3, [r7, #0]
 8002182:	464b      	mov	r3, r9
 8002184:	eb45 0303 	adc.w	r3, r5, r3
 8002188:	607b      	str	r3, [r7, #4]
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	f04f 0300 	mov.w	r3, #0
 8002192:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002196:	4629      	mov	r1, r5
 8002198:	028b      	lsls	r3, r1, #10
 800219a:	4621      	mov	r1, r4
 800219c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021a0:	4621      	mov	r1, r4
 80021a2:	028a      	lsls	r2, r1, #10
 80021a4:	4610      	mov	r0, r2
 80021a6:	4619      	mov	r1, r3
 80021a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021aa:	2200      	movs	r2, #0
 80021ac:	61bb      	str	r3, [r7, #24]
 80021ae:	61fa      	str	r2, [r7, #28]
 80021b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021b4:	f7fe f864 	bl	8000280 <__aeabi_uldivmod>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	4613      	mov	r3, r2
 80021be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021c0:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	0c1b      	lsrs	r3, r3, #16
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	3301      	adds	r3, #1
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80021d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021da:	e002      	b.n	80021e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021dc:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80021de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3750      	adds	r7, #80	; 0x50
 80021e8:	46bd      	mov	sp, r7
 80021ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021ee:	bf00      	nop
 80021f0:	40023800 	.word	0x40023800
 80021f4:	00f42400 	.word	0x00f42400
 80021f8:	007a1200 	.word	0x007a1200

080021fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002200:	4b03      	ldr	r3, [pc, #12]	; (8002210 <HAL_RCC_GetHCLKFreq+0x14>)
 8002202:	681b      	ldr	r3, [r3, #0]
}
 8002204:	4618      	mov	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	20000000 	.word	0x20000000

08002214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002218:	f7ff fff0 	bl	80021fc <HAL_RCC_GetHCLKFreq>
 800221c:	4602      	mov	r2, r0
 800221e:	4b05      	ldr	r3, [pc, #20]	; (8002234 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	0a9b      	lsrs	r3, r3, #10
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	4903      	ldr	r1, [pc, #12]	; (8002238 <HAL_RCC_GetPCLK1Freq+0x24>)
 800222a:	5ccb      	ldrb	r3, [r1, r3]
 800222c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002230:	4618      	mov	r0, r3
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40023800 	.word	0x40023800
 8002238:	08003d40 	.word	0x08003d40

0800223c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002240:	f7ff ffdc 	bl	80021fc <HAL_RCC_GetHCLKFreq>
 8002244:	4602      	mov	r2, r0
 8002246:	4b05      	ldr	r3, [pc, #20]	; (800225c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	0b5b      	lsrs	r3, r3, #13
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	4903      	ldr	r1, [pc, #12]	; (8002260 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002252:	5ccb      	ldrb	r3, [r1, r3]
 8002254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002258:	4618      	mov	r0, r3
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40023800 	.word	0x40023800
 8002260:	08003d40 	.word	0x08003d40

08002264 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	220f      	movs	r2, #15
 8002272:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002274:	4b12      	ldr	r3, [pc, #72]	; (80022c0 <HAL_RCC_GetClockConfig+0x5c>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 0203 	and.w	r2, r3, #3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002280:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <HAL_RCC_GetClockConfig+0x5c>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800228c:	4b0c      	ldr	r3, [pc, #48]	; (80022c0 <HAL_RCC_GetClockConfig+0x5c>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002298:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <HAL_RCC_GetClockConfig+0x5c>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	08db      	lsrs	r3, r3, #3
 800229e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80022a6:	4b07      	ldr	r3, [pc, #28]	; (80022c4 <HAL_RCC_GetClockConfig+0x60>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0207 	and.w	r2, r3, #7
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	601a      	str	r2, [r3, #0]
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40023c00 	.word	0x40023c00

080022c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e041      	b.n	800235e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d106      	bne.n	80022f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 f839 	bl	8002366 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2202      	movs	r2, #2
 80022f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3304      	adds	r3, #4
 8002304:	4619      	mov	r1, r3
 8002306:	4610      	mov	r0, r2
 8002308:	f000 f9e2 	bl	80026d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002366:	b480      	push	{r7}
 8002368:	b083      	sub	sp, #12
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
	...

0800237c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b01      	cmp	r3, #1
 800238e:	d001      	beq.n	8002394 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e04e      	b.n	8002432 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2202      	movs	r2, #2
 8002398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 0201 	orr.w	r2, r2, #1
 80023aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a23      	ldr	r2, [pc, #140]	; (8002440 <HAL_TIM_Base_Start_IT+0xc4>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d022      	beq.n	80023fc <HAL_TIM_Base_Start_IT+0x80>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023be:	d01d      	beq.n	80023fc <HAL_TIM_Base_Start_IT+0x80>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a1f      	ldr	r2, [pc, #124]	; (8002444 <HAL_TIM_Base_Start_IT+0xc8>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d018      	beq.n	80023fc <HAL_TIM_Base_Start_IT+0x80>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a1e      	ldr	r2, [pc, #120]	; (8002448 <HAL_TIM_Base_Start_IT+0xcc>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d013      	beq.n	80023fc <HAL_TIM_Base_Start_IT+0x80>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a1c      	ldr	r2, [pc, #112]	; (800244c <HAL_TIM_Base_Start_IT+0xd0>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d00e      	beq.n	80023fc <HAL_TIM_Base_Start_IT+0x80>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a1b      	ldr	r2, [pc, #108]	; (8002450 <HAL_TIM_Base_Start_IT+0xd4>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d009      	beq.n	80023fc <HAL_TIM_Base_Start_IT+0x80>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a19      	ldr	r2, [pc, #100]	; (8002454 <HAL_TIM_Base_Start_IT+0xd8>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d004      	beq.n	80023fc <HAL_TIM_Base_Start_IT+0x80>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a18      	ldr	r2, [pc, #96]	; (8002458 <HAL_TIM_Base_Start_IT+0xdc>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d111      	bne.n	8002420 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2b06      	cmp	r3, #6
 800240c:	d010      	beq.n	8002430 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f042 0201 	orr.w	r2, r2, #1
 800241c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800241e:	e007      	b.n	8002430 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0201 	orr.w	r2, r2, #1
 800242e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	40010000 	.word	0x40010000
 8002444:	40000400 	.word	0x40000400
 8002448:	40000800 	.word	0x40000800
 800244c:	40000c00 	.word	0x40000c00
 8002450:	40010400 	.word	0x40010400
 8002454:	40014000 	.word	0x40014000
 8002458:	40001800 	.word	0x40001800

0800245c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b02      	cmp	r3, #2
 8002470:	d122      	bne.n	80024b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b02      	cmp	r3, #2
 800247e:	d11b      	bne.n	80024b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f06f 0202 	mvn.w	r2, #2
 8002488:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f8f8 	bl	8002694 <HAL_TIM_IC_CaptureCallback>
 80024a4:	e005      	b.n	80024b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f8ea 	bl	8002680 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 f8fb 	bl	80026a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	f003 0304 	and.w	r3, r3, #4
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d122      	bne.n	800250c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	d11b      	bne.n	800250c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f06f 0204 	mvn.w	r2, #4
 80024dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2202      	movs	r2, #2
 80024e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f8ce 	bl	8002694 <HAL_TIM_IC_CaptureCallback>
 80024f8:	e005      	b.n	8002506 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f8c0 	bl	8002680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 f8d1 	bl	80026a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	2b08      	cmp	r3, #8
 8002518:	d122      	bne.n	8002560 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	f003 0308 	and.w	r3, r3, #8
 8002524:	2b08      	cmp	r3, #8
 8002526:	d11b      	bne.n	8002560 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f06f 0208 	mvn.w	r2, #8
 8002530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2204      	movs	r2, #4
 8002536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	f003 0303 	and.w	r3, r3, #3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f8a4 	bl	8002694 <HAL_TIM_IC_CaptureCallback>
 800254c:	e005      	b.n	800255a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f896 	bl	8002680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 f8a7 	bl	80026a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	f003 0310 	and.w	r3, r3, #16
 800256a:	2b10      	cmp	r3, #16
 800256c:	d122      	bne.n	80025b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	f003 0310 	and.w	r3, r3, #16
 8002578:	2b10      	cmp	r3, #16
 800257a:	d11b      	bne.n	80025b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f06f 0210 	mvn.w	r2, #16
 8002584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2208      	movs	r2, #8
 800258a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f87a 	bl	8002694 <HAL_TIM_IC_CaptureCallback>
 80025a0:	e005      	b.n	80025ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f86c 	bl	8002680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 f87d 	bl	80026a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d10e      	bne.n	80025e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d107      	bne.n	80025e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f06f 0201 	mvn.w	r2, #1
 80025d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f846 	bl	800266c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ea:	2b80      	cmp	r3, #128	; 0x80
 80025ec:	d10e      	bne.n	800260c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f8:	2b80      	cmp	r3, #128	; 0x80
 80025fa:	d107      	bne.n	800260c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f90c 	bl	8002824 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002616:	2b40      	cmp	r3, #64	; 0x40
 8002618:	d10e      	bne.n	8002638 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002624:	2b40      	cmp	r3, #64	; 0x40
 8002626:	d107      	bne.n	8002638 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f842 	bl	80026bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	f003 0320 	and.w	r3, r3, #32
 8002642:	2b20      	cmp	r3, #32
 8002644:	d10e      	bne.n	8002664 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	f003 0320 	and.w	r3, r3, #32
 8002650:	2b20      	cmp	r3, #32
 8002652:	d107      	bne.n	8002664 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f06f 0220 	mvn.w	r2, #32
 800265c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f8d6 	bl	8002810 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002664:	bf00      	nop
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a40      	ldr	r2, [pc, #256]	; (80027e4 <TIM_Base_SetConfig+0x114>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d013      	beq.n	8002710 <TIM_Base_SetConfig+0x40>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ee:	d00f      	beq.n	8002710 <TIM_Base_SetConfig+0x40>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a3d      	ldr	r2, [pc, #244]	; (80027e8 <TIM_Base_SetConfig+0x118>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d00b      	beq.n	8002710 <TIM_Base_SetConfig+0x40>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a3c      	ldr	r2, [pc, #240]	; (80027ec <TIM_Base_SetConfig+0x11c>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d007      	beq.n	8002710 <TIM_Base_SetConfig+0x40>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a3b      	ldr	r2, [pc, #236]	; (80027f0 <TIM_Base_SetConfig+0x120>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d003      	beq.n	8002710 <TIM_Base_SetConfig+0x40>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a3a      	ldr	r2, [pc, #232]	; (80027f4 <TIM_Base_SetConfig+0x124>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d108      	bne.n	8002722 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002716:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	4313      	orrs	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a2f      	ldr	r2, [pc, #188]	; (80027e4 <TIM_Base_SetConfig+0x114>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d02b      	beq.n	8002782 <TIM_Base_SetConfig+0xb2>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002730:	d027      	beq.n	8002782 <TIM_Base_SetConfig+0xb2>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a2c      	ldr	r2, [pc, #176]	; (80027e8 <TIM_Base_SetConfig+0x118>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d023      	beq.n	8002782 <TIM_Base_SetConfig+0xb2>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a2b      	ldr	r2, [pc, #172]	; (80027ec <TIM_Base_SetConfig+0x11c>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d01f      	beq.n	8002782 <TIM_Base_SetConfig+0xb2>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a2a      	ldr	r2, [pc, #168]	; (80027f0 <TIM_Base_SetConfig+0x120>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d01b      	beq.n	8002782 <TIM_Base_SetConfig+0xb2>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a29      	ldr	r2, [pc, #164]	; (80027f4 <TIM_Base_SetConfig+0x124>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d017      	beq.n	8002782 <TIM_Base_SetConfig+0xb2>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a28      	ldr	r2, [pc, #160]	; (80027f8 <TIM_Base_SetConfig+0x128>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d013      	beq.n	8002782 <TIM_Base_SetConfig+0xb2>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a27      	ldr	r2, [pc, #156]	; (80027fc <TIM_Base_SetConfig+0x12c>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d00f      	beq.n	8002782 <TIM_Base_SetConfig+0xb2>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a26      	ldr	r2, [pc, #152]	; (8002800 <TIM_Base_SetConfig+0x130>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d00b      	beq.n	8002782 <TIM_Base_SetConfig+0xb2>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a25      	ldr	r2, [pc, #148]	; (8002804 <TIM_Base_SetConfig+0x134>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d007      	beq.n	8002782 <TIM_Base_SetConfig+0xb2>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a24      	ldr	r2, [pc, #144]	; (8002808 <TIM_Base_SetConfig+0x138>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d003      	beq.n	8002782 <TIM_Base_SetConfig+0xb2>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a23      	ldr	r2, [pc, #140]	; (800280c <TIM_Base_SetConfig+0x13c>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d108      	bne.n	8002794 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002788:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	4313      	orrs	r3, r2
 8002792:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	4313      	orrs	r3, r2
 80027a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a0a      	ldr	r2, [pc, #40]	; (80027e4 <TIM_Base_SetConfig+0x114>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d003      	beq.n	80027c8 <TIM_Base_SetConfig+0xf8>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a0c      	ldr	r2, [pc, #48]	; (80027f4 <TIM_Base_SetConfig+0x124>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d103      	bne.n	80027d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	691a      	ldr	r2, [r3, #16]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	615a      	str	r2, [r3, #20]
}
 80027d6:	bf00      	nop
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	40010000 	.word	0x40010000
 80027e8:	40000400 	.word	0x40000400
 80027ec:	40000800 	.word	0x40000800
 80027f0:	40000c00 	.word	0x40000c00
 80027f4:	40010400 	.word	0x40010400
 80027f8:	40014000 	.word	0x40014000
 80027fc:	40014400 	.word	0x40014400
 8002800:	40014800 	.word	0x40014800
 8002804:	40001800 	.word	0x40001800
 8002808:	40001c00 	.word	0x40001c00
 800280c:	40002000 	.word	0x40002000

08002810 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e03f      	b.n	80028ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d106      	bne.n	8002864 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7fe f84a 	bl	80008f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2224      	movs	r2, #36	; 0x24
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68da      	ldr	r2, [r3, #12]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800287a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 f929 	bl	8002ad4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	691a      	ldr	r2, [r3, #16]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002890:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	695a      	ldr	r2, [r3, #20]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68da      	ldr	r2, [r3, #12]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2220      	movs	r2, #32
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2220      	movs	r2, #32
 80028c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b08a      	sub	sp, #40	; 0x28
 80028d6:	af02      	add	r7, sp, #8
 80028d8:	60f8      	str	r0, [r7, #12]
 80028da:	60b9      	str	r1, [r7, #8]
 80028dc:	603b      	str	r3, [r7, #0]
 80028de:	4613      	mov	r3, r2
 80028e0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b20      	cmp	r3, #32
 80028f0:	d17c      	bne.n	80029ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d002      	beq.n	80028fe <HAL_UART_Transmit+0x2c>
 80028f8:	88fb      	ldrh	r3, [r7, #6]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e075      	b.n	80029ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <HAL_UART_Transmit+0x3e>
 800290c:	2302      	movs	r3, #2
 800290e:	e06e      	b.n	80029ee <HAL_UART_Transmit+0x11c>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2221      	movs	r2, #33	; 0x21
 8002922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002926:	f7fe f957 	bl	8000bd8 <HAL_GetTick>
 800292a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	88fa      	ldrh	r2, [r7, #6]
 8002930:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	88fa      	ldrh	r2, [r7, #6]
 8002936:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002940:	d108      	bne.n	8002954 <HAL_UART_Transmit+0x82>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d104      	bne.n	8002954 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800294a:	2300      	movs	r3, #0
 800294c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	61bb      	str	r3, [r7, #24]
 8002952:	e003      	b.n	800295c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002958:	2300      	movs	r3, #0
 800295a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002964:	e02a      	b.n	80029bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	2200      	movs	r2, #0
 800296e:	2180      	movs	r1, #128	; 0x80
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f000 f840 	bl	80029f6 <UART_WaitOnFlagUntilTimeout>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e036      	b.n	80029ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10b      	bne.n	800299e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	881b      	ldrh	r3, [r3, #0]
 800298a:	461a      	mov	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002994:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	3302      	adds	r3, #2
 800299a:	61bb      	str	r3, [r7, #24]
 800299c:	e007      	b.n	80029ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	781a      	ldrb	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	3301      	adds	r3, #1
 80029ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	3b01      	subs	r3, #1
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1cf      	bne.n	8002966 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	2200      	movs	r2, #0
 80029ce:	2140      	movs	r1, #64	; 0x40
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f000 f810 	bl	80029f6 <UART_WaitOnFlagUntilTimeout>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e006      	b.n	80029ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2220      	movs	r2, #32
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80029e8:	2300      	movs	r3, #0
 80029ea:	e000      	b.n	80029ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80029ec:	2302      	movs	r3, #2
  }
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3720      	adds	r7, #32
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b090      	sub	sp, #64	; 0x40
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	60f8      	str	r0, [r7, #12]
 80029fe:	60b9      	str	r1, [r7, #8]
 8002a00:	603b      	str	r3, [r7, #0]
 8002a02:	4613      	mov	r3, r2
 8002a04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a06:	e050      	b.n	8002aaa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a0e:	d04c      	beq.n	8002aaa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d007      	beq.n	8002a26 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a16:	f7fe f8df 	bl	8000bd8 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d241      	bcs.n	8002aaa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	330c      	adds	r3, #12
 8002a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a30:	e853 3f00 	ldrex	r3, [r3]
 8002a34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	330c      	adds	r3, #12
 8002a44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a46:	637a      	str	r2, [r7, #52]	; 0x34
 8002a48:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a4e:	e841 2300 	strex	r3, r2, [r1]
 8002a52:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1e5      	bne.n	8002a26 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	3314      	adds	r3, #20
 8002a60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	e853 3f00 	ldrex	r3, [r3]
 8002a68:	613b      	str	r3, [r7, #16]
   return(result);
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	f023 0301 	bic.w	r3, r3, #1
 8002a70:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	3314      	adds	r3, #20
 8002a78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a7a:	623a      	str	r2, [r7, #32]
 8002a7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a7e:	69f9      	ldr	r1, [r7, #28]
 8002a80:	6a3a      	ldr	r2, [r7, #32]
 8002a82:	e841 2300 	strex	r3, r2, [r1]
 8002a86:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1e5      	bne.n	8002a5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2220      	movs	r2, #32
 8002a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2220      	movs	r2, #32
 8002a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e00f      	b.n	8002aca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	68ba      	ldr	r2, [r7, #8]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	bf0c      	ite	eq
 8002aba:	2301      	moveq	r3, #1
 8002abc:	2300      	movne	r3, #0
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	79fb      	ldrb	r3, [r7, #7]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d09f      	beq.n	8002a08 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3740      	adds	r7, #64	; 0x40
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
	...

08002ad4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ad8:	b0c0      	sub	sp, #256	; 0x100
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af0:	68d9      	ldr	r1, [r3, #12]
 8002af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	ea40 0301 	orr.w	r3, r0, r1
 8002afc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	431a      	orrs	r2, r3
 8002b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b2c:	f021 010c 	bic.w	r1, r1, #12
 8002b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b3a:	430b      	orrs	r3, r1
 8002b3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b4e:	6999      	ldr	r1, [r3, #24]
 8002b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	ea40 0301 	orr.w	r3, r0, r1
 8002b5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	4b8f      	ldr	r3, [pc, #572]	; (8002da0 <UART_SetConfig+0x2cc>)
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d005      	beq.n	8002b74 <UART_SetConfig+0xa0>
 8002b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	4b8d      	ldr	r3, [pc, #564]	; (8002da4 <UART_SetConfig+0x2d0>)
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d104      	bne.n	8002b7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b74:	f7ff fb62 	bl	800223c <HAL_RCC_GetPCLK2Freq>
 8002b78:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002b7c:	e003      	b.n	8002b86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b7e:	f7ff fb49 	bl	8002214 <HAL_RCC_GetPCLK1Freq>
 8002b82:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b90:	f040 810c 	bne.w	8002dac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b9e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002ba2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002ba6:	4622      	mov	r2, r4
 8002ba8:	462b      	mov	r3, r5
 8002baa:	1891      	adds	r1, r2, r2
 8002bac:	65b9      	str	r1, [r7, #88]	; 0x58
 8002bae:	415b      	adcs	r3, r3
 8002bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002bb6:	4621      	mov	r1, r4
 8002bb8:	eb12 0801 	adds.w	r8, r2, r1
 8002bbc:	4629      	mov	r1, r5
 8002bbe:	eb43 0901 	adc.w	r9, r3, r1
 8002bc2:	f04f 0200 	mov.w	r2, #0
 8002bc6:	f04f 0300 	mov.w	r3, #0
 8002bca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bd6:	4690      	mov	r8, r2
 8002bd8:	4699      	mov	r9, r3
 8002bda:	4623      	mov	r3, r4
 8002bdc:	eb18 0303 	adds.w	r3, r8, r3
 8002be0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002be4:	462b      	mov	r3, r5
 8002be6:	eb49 0303 	adc.w	r3, r9, r3
 8002bea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002bfa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002bfe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002c02:	460b      	mov	r3, r1
 8002c04:	18db      	adds	r3, r3, r3
 8002c06:	653b      	str	r3, [r7, #80]	; 0x50
 8002c08:	4613      	mov	r3, r2
 8002c0a:	eb42 0303 	adc.w	r3, r2, r3
 8002c0e:	657b      	str	r3, [r7, #84]	; 0x54
 8002c10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002c18:	f7fd fb32 	bl	8000280 <__aeabi_uldivmod>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	4b61      	ldr	r3, [pc, #388]	; (8002da8 <UART_SetConfig+0x2d4>)
 8002c22:	fba3 2302 	umull	r2, r3, r3, r2
 8002c26:	095b      	lsrs	r3, r3, #5
 8002c28:	011c      	lsls	r4, r3, #4
 8002c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002c38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002c3c:	4642      	mov	r2, r8
 8002c3e:	464b      	mov	r3, r9
 8002c40:	1891      	adds	r1, r2, r2
 8002c42:	64b9      	str	r1, [r7, #72]	; 0x48
 8002c44:	415b      	adcs	r3, r3
 8002c46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c4c:	4641      	mov	r1, r8
 8002c4e:	eb12 0a01 	adds.w	sl, r2, r1
 8002c52:	4649      	mov	r1, r9
 8002c54:	eb43 0b01 	adc.w	fp, r3, r1
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	f04f 0300 	mov.w	r3, #0
 8002c60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c6c:	4692      	mov	sl, r2
 8002c6e:	469b      	mov	fp, r3
 8002c70:	4643      	mov	r3, r8
 8002c72:	eb1a 0303 	adds.w	r3, sl, r3
 8002c76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c7a:	464b      	mov	r3, r9
 8002c7c:	eb4b 0303 	adc.w	r3, fp, r3
 8002c80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002c94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c98:	460b      	mov	r3, r1
 8002c9a:	18db      	adds	r3, r3, r3
 8002c9c:	643b      	str	r3, [r7, #64]	; 0x40
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	eb42 0303 	adc.w	r3, r2, r3
 8002ca4:	647b      	str	r3, [r7, #68]	; 0x44
 8002ca6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002caa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002cae:	f7fd fae7 	bl	8000280 <__aeabi_uldivmod>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	4b3b      	ldr	r3, [pc, #236]	; (8002da8 <UART_SetConfig+0x2d4>)
 8002cba:	fba3 2301 	umull	r2, r3, r3, r1
 8002cbe:	095b      	lsrs	r3, r3, #5
 8002cc0:	2264      	movs	r2, #100	; 0x64
 8002cc2:	fb02 f303 	mul.w	r3, r2, r3
 8002cc6:	1acb      	subs	r3, r1, r3
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002cce:	4b36      	ldr	r3, [pc, #216]	; (8002da8 <UART_SetConfig+0x2d4>)
 8002cd0:	fba3 2302 	umull	r2, r3, r3, r2
 8002cd4:	095b      	lsrs	r3, r3, #5
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002cdc:	441c      	add	r4, r3
 8002cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ce8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002cec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002cf0:	4642      	mov	r2, r8
 8002cf2:	464b      	mov	r3, r9
 8002cf4:	1891      	adds	r1, r2, r2
 8002cf6:	63b9      	str	r1, [r7, #56]	; 0x38
 8002cf8:	415b      	adcs	r3, r3
 8002cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cfc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d00:	4641      	mov	r1, r8
 8002d02:	1851      	adds	r1, r2, r1
 8002d04:	6339      	str	r1, [r7, #48]	; 0x30
 8002d06:	4649      	mov	r1, r9
 8002d08:	414b      	adcs	r3, r1
 8002d0a:	637b      	str	r3, [r7, #52]	; 0x34
 8002d0c:	f04f 0200 	mov.w	r2, #0
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002d18:	4659      	mov	r1, fp
 8002d1a:	00cb      	lsls	r3, r1, #3
 8002d1c:	4651      	mov	r1, sl
 8002d1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d22:	4651      	mov	r1, sl
 8002d24:	00ca      	lsls	r2, r1, #3
 8002d26:	4610      	mov	r0, r2
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	4642      	mov	r2, r8
 8002d2e:	189b      	adds	r3, r3, r2
 8002d30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d34:	464b      	mov	r3, r9
 8002d36:	460a      	mov	r2, r1
 8002d38:	eb42 0303 	adc.w	r3, r2, r3
 8002d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002d50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002d54:	460b      	mov	r3, r1
 8002d56:	18db      	adds	r3, r3, r3
 8002d58:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	eb42 0303 	adc.w	r3, r2, r3
 8002d60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002d6a:	f7fd fa89 	bl	8000280 <__aeabi_uldivmod>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	460b      	mov	r3, r1
 8002d72:	4b0d      	ldr	r3, [pc, #52]	; (8002da8 <UART_SetConfig+0x2d4>)
 8002d74:	fba3 1302 	umull	r1, r3, r3, r2
 8002d78:	095b      	lsrs	r3, r3, #5
 8002d7a:	2164      	movs	r1, #100	; 0x64
 8002d7c:	fb01 f303 	mul.w	r3, r1, r3
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	3332      	adds	r3, #50	; 0x32
 8002d86:	4a08      	ldr	r2, [pc, #32]	; (8002da8 <UART_SetConfig+0x2d4>)
 8002d88:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8c:	095b      	lsrs	r3, r3, #5
 8002d8e:	f003 0207 	and.w	r2, r3, #7
 8002d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4422      	add	r2, r4
 8002d9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d9c:	e106      	b.n	8002fac <UART_SetConfig+0x4d8>
 8002d9e:	bf00      	nop
 8002da0:	40011000 	.word	0x40011000
 8002da4:	40011400 	.word	0x40011400
 8002da8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002dac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002db0:	2200      	movs	r2, #0
 8002db2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002db6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002dba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002dbe:	4642      	mov	r2, r8
 8002dc0:	464b      	mov	r3, r9
 8002dc2:	1891      	adds	r1, r2, r2
 8002dc4:	6239      	str	r1, [r7, #32]
 8002dc6:	415b      	adcs	r3, r3
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002dce:	4641      	mov	r1, r8
 8002dd0:	1854      	adds	r4, r2, r1
 8002dd2:	4649      	mov	r1, r9
 8002dd4:	eb43 0501 	adc.w	r5, r3, r1
 8002dd8:	f04f 0200 	mov.w	r2, #0
 8002ddc:	f04f 0300 	mov.w	r3, #0
 8002de0:	00eb      	lsls	r3, r5, #3
 8002de2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002de6:	00e2      	lsls	r2, r4, #3
 8002de8:	4614      	mov	r4, r2
 8002dea:	461d      	mov	r5, r3
 8002dec:	4643      	mov	r3, r8
 8002dee:	18e3      	adds	r3, r4, r3
 8002df0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002df4:	464b      	mov	r3, r9
 8002df6:	eb45 0303 	adc.w	r3, r5, r3
 8002dfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e0e:	f04f 0200 	mov.w	r2, #0
 8002e12:	f04f 0300 	mov.w	r3, #0
 8002e16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e1a:	4629      	mov	r1, r5
 8002e1c:	008b      	lsls	r3, r1, #2
 8002e1e:	4621      	mov	r1, r4
 8002e20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e24:	4621      	mov	r1, r4
 8002e26:	008a      	lsls	r2, r1, #2
 8002e28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002e2c:	f7fd fa28 	bl	8000280 <__aeabi_uldivmod>
 8002e30:	4602      	mov	r2, r0
 8002e32:	460b      	mov	r3, r1
 8002e34:	4b60      	ldr	r3, [pc, #384]	; (8002fb8 <UART_SetConfig+0x4e4>)
 8002e36:	fba3 2302 	umull	r2, r3, r3, r2
 8002e3a:	095b      	lsrs	r3, r3, #5
 8002e3c:	011c      	lsls	r4, r3, #4
 8002e3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e42:	2200      	movs	r2, #0
 8002e44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002e50:	4642      	mov	r2, r8
 8002e52:	464b      	mov	r3, r9
 8002e54:	1891      	adds	r1, r2, r2
 8002e56:	61b9      	str	r1, [r7, #24]
 8002e58:	415b      	adcs	r3, r3
 8002e5a:	61fb      	str	r3, [r7, #28]
 8002e5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e60:	4641      	mov	r1, r8
 8002e62:	1851      	adds	r1, r2, r1
 8002e64:	6139      	str	r1, [r7, #16]
 8002e66:	4649      	mov	r1, r9
 8002e68:	414b      	adcs	r3, r1
 8002e6a:	617b      	str	r3, [r7, #20]
 8002e6c:	f04f 0200 	mov.w	r2, #0
 8002e70:	f04f 0300 	mov.w	r3, #0
 8002e74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e78:	4659      	mov	r1, fp
 8002e7a:	00cb      	lsls	r3, r1, #3
 8002e7c:	4651      	mov	r1, sl
 8002e7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e82:	4651      	mov	r1, sl
 8002e84:	00ca      	lsls	r2, r1, #3
 8002e86:	4610      	mov	r0, r2
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	4642      	mov	r2, r8
 8002e8e:	189b      	adds	r3, r3, r2
 8002e90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e94:	464b      	mov	r3, r9
 8002e96:	460a      	mov	r2, r1
 8002e98:	eb42 0303 	adc.w	r3, r2, r3
 8002e9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002eaa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002eac:	f04f 0200 	mov.w	r2, #0
 8002eb0:	f04f 0300 	mov.w	r3, #0
 8002eb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002eb8:	4649      	mov	r1, r9
 8002eba:	008b      	lsls	r3, r1, #2
 8002ebc:	4641      	mov	r1, r8
 8002ebe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ec2:	4641      	mov	r1, r8
 8002ec4:	008a      	lsls	r2, r1, #2
 8002ec6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002eca:	f7fd f9d9 	bl	8000280 <__aeabi_uldivmod>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	4b38      	ldr	r3, [pc, #224]	; (8002fb8 <UART_SetConfig+0x4e4>)
 8002ed6:	fba3 2301 	umull	r2, r3, r3, r1
 8002eda:	095b      	lsrs	r3, r3, #5
 8002edc:	2264      	movs	r2, #100	; 0x64
 8002ede:	fb02 f303 	mul.w	r3, r2, r3
 8002ee2:	1acb      	subs	r3, r1, r3
 8002ee4:	011b      	lsls	r3, r3, #4
 8002ee6:	3332      	adds	r3, #50	; 0x32
 8002ee8:	4a33      	ldr	r2, [pc, #204]	; (8002fb8 <UART_SetConfig+0x4e4>)
 8002eea:	fba2 2303 	umull	r2, r3, r2, r3
 8002eee:	095b      	lsrs	r3, r3, #5
 8002ef0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ef4:	441c      	add	r4, r3
 8002ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002efa:	2200      	movs	r2, #0
 8002efc:	673b      	str	r3, [r7, #112]	; 0x70
 8002efe:	677a      	str	r2, [r7, #116]	; 0x74
 8002f00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002f04:	4642      	mov	r2, r8
 8002f06:	464b      	mov	r3, r9
 8002f08:	1891      	adds	r1, r2, r2
 8002f0a:	60b9      	str	r1, [r7, #8]
 8002f0c:	415b      	adcs	r3, r3
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f14:	4641      	mov	r1, r8
 8002f16:	1851      	adds	r1, r2, r1
 8002f18:	6039      	str	r1, [r7, #0]
 8002f1a:	4649      	mov	r1, r9
 8002f1c:	414b      	adcs	r3, r1
 8002f1e:	607b      	str	r3, [r7, #4]
 8002f20:	f04f 0200 	mov.w	r2, #0
 8002f24:	f04f 0300 	mov.w	r3, #0
 8002f28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f2c:	4659      	mov	r1, fp
 8002f2e:	00cb      	lsls	r3, r1, #3
 8002f30:	4651      	mov	r1, sl
 8002f32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f36:	4651      	mov	r1, sl
 8002f38:	00ca      	lsls	r2, r1, #3
 8002f3a:	4610      	mov	r0, r2
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4603      	mov	r3, r0
 8002f40:	4642      	mov	r2, r8
 8002f42:	189b      	adds	r3, r3, r2
 8002f44:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f46:	464b      	mov	r3, r9
 8002f48:	460a      	mov	r2, r1
 8002f4a:	eb42 0303 	adc.w	r3, r2, r3
 8002f4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	663b      	str	r3, [r7, #96]	; 0x60
 8002f5a:	667a      	str	r2, [r7, #100]	; 0x64
 8002f5c:	f04f 0200 	mov.w	r2, #0
 8002f60:	f04f 0300 	mov.w	r3, #0
 8002f64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002f68:	4649      	mov	r1, r9
 8002f6a:	008b      	lsls	r3, r1, #2
 8002f6c:	4641      	mov	r1, r8
 8002f6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f72:	4641      	mov	r1, r8
 8002f74:	008a      	lsls	r2, r1, #2
 8002f76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002f7a:	f7fd f981 	bl	8000280 <__aeabi_uldivmod>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	460b      	mov	r3, r1
 8002f82:	4b0d      	ldr	r3, [pc, #52]	; (8002fb8 <UART_SetConfig+0x4e4>)
 8002f84:	fba3 1302 	umull	r1, r3, r3, r2
 8002f88:	095b      	lsrs	r3, r3, #5
 8002f8a:	2164      	movs	r1, #100	; 0x64
 8002f8c:	fb01 f303 	mul.w	r3, r1, r3
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	011b      	lsls	r3, r3, #4
 8002f94:	3332      	adds	r3, #50	; 0x32
 8002f96:	4a08      	ldr	r2, [pc, #32]	; (8002fb8 <UART_SetConfig+0x4e4>)
 8002f98:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9c:	095b      	lsrs	r3, r3, #5
 8002f9e:	f003 020f 	and.w	r2, r3, #15
 8002fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4422      	add	r2, r4
 8002faa:	609a      	str	r2, [r3, #8]
}
 8002fac:	bf00      	nop
 8002fae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fb8:	51eb851f 	.word	0x51eb851f

08002fbc <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	689a      	ldr	r2, [r3, #8]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	1c5a      	adds	r2, r3, #1
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	601a      	str	r2, [r3, #0]
}
 8002ff8:	bf00      	nop
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6892      	ldr	r2, [r2, #8]
 800301a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	6852      	ldr	r2, [r2, #4]
 8003024:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	429a      	cmp	r2, r3
 800302e:	d103      	bne.n	8003038 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	1e5a      	subs	r2, r3, #1
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
}
 800304c:	4618      	mov	r0, r3
 800304e:	3714      	adds	r7, #20
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800305e:	2300      	movs	r3, #0
 8003060:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003062:	4b4e      	ldr	r3, [pc, #312]	; (800319c <xTaskIncrementTick+0x144>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	f040 808e 	bne.w	8003188 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800306c:	4b4c      	ldr	r3, [pc, #304]	; (80031a0 <xTaskIncrementTick+0x148>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	3301      	adds	r3, #1
 8003072:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003074:	4a4a      	ldr	r2, [pc, #296]	; (80031a0 <xTaskIncrementTick+0x148>)
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d120      	bne.n	80030c2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003080:	4b48      	ldr	r3, [pc, #288]	; (80031a4 <xTaskIncrementTick+0x14c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00a      	beq.n	80030a0 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800308a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308e:	f383 8811 	msr	BASEPRI, r3
 8003092:	f3bf 8f6f 	isb	sy
 8003096:	f3bf 8f4f 	dsb	sy
 800309a:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800309c:	bf00      	nop
 800309e:	e7fe      	b.n	800309e <xTaskIncrementTick+0x46>
 80030a0:	4b40      	ldr	r3, [pc, #256]	; (80031a4 <xTaskIncrementTick+0x14c>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	4b40      	ldr	r3, [pc, #256]	; (80031a8 <xTaskIncrementTick+0x150>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a3e      	ldr	r2, [pc, #248]	; (80031a4 <xTaskIncrementTick+0x14c>)
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	4a3e      	ldr	r2, [pc, #248]	; (80031a8 <xTaskIncrementTick+0x150>)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6013      	str	r3, [r2, #0]
 80030b4:	4b3d      	ldr	r3, [pc, #244]	; (80031ac <xTaskIncrementTick+0x154>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	3301      	adds	r3, #1
 80030ba:	4a3c      	ldr	r2, [pc, #240]	; (80031ac <xTaskIncrementTick+0x154>)
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	f000 f8e5 	bl	800328c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80030c2:	4b3b      	ldr	r3, [pc, #236]	; (80031b0 <xTaskIncrementTick+0x158>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d348      	bcc.n	800315e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030cc:	4b35      	ldr	r3, [pc, #212]	; (80031a4 <xTaskIncrementTick+0x14c>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d104      	bne.n	80030e0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030d6:	4b36      	ldr	r3, [pc, #216]	; (80031b0 <xTaskIncrementTick+0x158>)
 80030d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030dc:	601a      	str	r2, [r3, #0]
					break;
 80030de:	e03e      	b.n	800315e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030e0:	4b30      	ldr	r3, [pc, #192]	; (80031a4 <xTaskIncrementTick+0x14c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d203      	bcs.n	8003100 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80030f8:	4a2d      	ldr	r2, [pc, #180]	; (80031b0 <xTaskIncrementTick+0x158>)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80030fe:	e02e      	b.n	800315e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	3304      	adds	r3, #4
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff ff7d 	bl	8003004 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310e:	2b00      	cmp	r3, #0
 8003110:	d004      	beq.n	800311c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	3318      	adds	r3, #24
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff ff74 	bl	8003004 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003120:	2201      	movs	r2, #1
 8003122:	409a      	lsls	r2, r3
 8003124:	4b23      	ldr	r3, [pc, #140]	; (80031b4 <xTaskIncrementTick+0x15c>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4313      	orrs	r3, r2
 800312a:	4a22      	ldr	r2, [pc, #136]	; (80031b4 <xTaskIncrementTick+0x15c>)
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003132:	4613      	mov	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4a1f      	ldr	r2, [pc, #124]	; (80031b8 <xTaskIncrementTick+0x160>)
 800313c:	441a      	add	r2, r3
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	3304      	adds	r3, #4
 8003142:	4619      	mov	r1, r3
 8003144:	4610      	mov	r0, r2
 8003146:	f7ff ff39 	bl	8002fbc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800314e:	4b1b      	ldr	r3, [pc, #108]	; (80031bc <xTaskIncrementTick+0x164>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003154:	429a      	cmp	r2, r3
 8003156:	d3b9      	bcc.n	80030cc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003158:	2301      	movs	r3, #1
 800315a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800315c:	e7b6      	b.n	80030cc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800315e:	4b17      	ldr	r3, [pc, #92]	; (80031bc <xTaskIncrementTick+0x164>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003164:	4914      	ldr	r1, [pc, #80]	; (80031b8 <xTaskIncrementTick+0x160>)
 8003166:	4613      	mov	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d901      	bls.n	800317a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003176:	2301      	movs	r3, #1
 8003178:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800317a:	4b11      	ldr	r3, [pc, #68]	; (80031c0 <xTaskIncrementTick+0x168>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d007      	beq.n	8003192 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003182:	2301      	movs	r3, #1
 8003184:	617b      	str	r3, [r7, #20]
 8003186:	e004      	b.n	8003192 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003188:	4b0e      	ldr	r3, [pc, #56]	; (80031c4 <xTaskIncrementTick+0x16c>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	3301      	adds	r3, #1
 800318e:	4a0d      	ldr	r2, [pc, #52]	; (80031c4 <xTaskIncrementTick+0x16c>)
 8003190:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003192:	697b      	ldr	r3, [r7, #20]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3718      	adds	r7, #24
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	20000204 	.word	0x20000204
 80031a0:	200001ec 	.word	0x200001ec
 80031a4:	200001e4 	.word	0x200001e4
 80031a8:	200001e8 	.word	0x200001e8
 80031ac:	200001fc 	.word	0x200001fc
 80031b0:	20000200 	.word	0x20000200
 80031b4:	200001f0 	.word	0x200001f0
 80031b8:	20000158 	.word	0x20000158
 80031bc:	20000154 	.word	0x20000154
 80031c0:	200001f8 	.word	0x200001f8
 80031c4:	200001f4 	.word	0x200001f4

080031c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80031c8:	b480      	push	{r7}
 80031ca:	b087      	sub	sp, #28
 80031cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80031ce:	4b29      	ldr	r3, [pc, #164]	; (8003274 <vTaskSwitchContext+0xac>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80031d6:	4b28      	ldr	r3, [pc, #160]	; (8003278 <vTaskSwitchContext+0xb0>)
 80031d8:	2201      	movs	r2, #1
 80031da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80031dc:	e044      	b.n	8003268 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80031de:	4b26      	ldr	r3, [pc, #152]	; (8003278 <vTaskSwitchContext+0xb0>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031e4:	4b25      	ldr	r3, [pc, #148]	; (800327c <vTaskSwitchContext+0xb4>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	fab3 f383 	clz	r3, r3
 80031f0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80031f2:	7afb      	ldrb	r3, [r7, #11]
 80031f4:	f1c3 031f 	rsb	r3, r3, #31
 80031f8:	617b      	str	r3, [r7, #20]
 80031fa:	4921      	ldr	r1, [pc, #132]	; (8003280 <vTaskSwitchContext+0xb8>)
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	4613      	mov	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	440b      	add	r3, r1
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10a      	bne.n	8003224 <vTaskSwitchContext+0x5c>
	__asm volatile
 800320e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003212:	f383 8811 	msr	BASEPRI, r3
 8003216:	f3bf 8f6f 	isb	sy
 800321a:	f3bf 8f4f 	dsb	sy
 800321e:	607b      	str	r3, [r7, #4]
}
 8003220:	bf00      	nop
 8003222:	e7fe      	b.n	8003222 <vTaskSwitchContext+0x5a>
 8003224:	697a      	ldr	r2, [r7, #20]
 8003226:	4613      	mov	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4a14      	ldr	r2, [pc, #80]	; (8003280 <vTaskSwitchContext+0xb8>)
 8003230:	4413      	add	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	605a      	str	r2, [r3, #4]
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	3308      	adds	r3, #8
 8003246:	429a      	cmp	r2, r3
 8003248:	d104      	bne.n	8003254 <vTaskSwitchContext+0x8c>
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	605a      	str	r2, [r3, #4]
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	4a0a      	ldr	r2, [pc, #40]	; (8003284 <vTaskSwitchContext+0xbc>)
 800325c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800325e:	4b09      	ldr	r3, [pc, #36]	; (8003284 <vTaskSwitchContext+0xbc>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	334c      	adds	r3, #76	; 0x4c
 8003264:	4a08      	ldr	r2, [pc, #32]	; (8003288 <vTaskSwitchContext+0xc0>)
 8003266:	6013      	str	r3, [r2, #0]
}
 8003268:	bf00      	nop
 800326a:	371c      	adds	r7, #28
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	20000204 	.word	0x20000204
 8003278:	200001f8 	.word	0x200001f8
 800327c:	200001f0 	.word	0x200001f0
 8003280:	20000158 	.word	0x20000158
 8003284:	20000154 	.word	0x20000154
 8003288:	20000058 	.word	0x20000058

0800328c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003292:	4b0c      	ldr	r3, [pc, #48]	; (80032c4 <prvResetNextTaskUnblockTime+0x38>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d104      	bne.n	80032a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800329c:	4b0a      	ldr	r3, [pc, #40]	; (80032c8 <prvResetNextTaskUnblockTime+0x3c>)
 800329e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80032a4:	e008      	b.n	80032b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032a6:	4b07      	ldr	r3, [pc, #28]	; (80032c4 <prvResetNextTaskUnblockTime+0x38>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	4a04      	ldr	r2, [pc, #16]	; (80032c8 <prvResetNextTaskUnblockTime+0x3c>)
 80032b6:	6013      	str	r3, [r2, #0]
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	200001e4 	.word	0x200001e4
 80032c8:	20000200 	.word	0x20000200
 80032cc:	00000000 	.word	0x00000000

080032d0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80032d0:	4b07      	ldr	r3, [pc, #28]	; (80032f0 <pxCurrentTCBConst2>)
 80032d2:	6819      	ldr	r1, [r3, #0]
 80032d4:	6808      	ldr	r0, [r1, #0]
 80032d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032da:	f380 8809 	msr	PSP, r0
 80032de:	f3bf 8f6f 	isb	sy
 80032e2:	f04f 0000 	mov.w	r0, #0
 80032e6:	f380 8811 	msr	BASEPRI, r0
 80032ea:	4770      	bx	lr
 80032ec:	f3af 8000 	nop.w

080032f0 <pxCurrentTCBConst2>:
 80032f0:	20000154 	.word	0x20000154
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80032f4:	bf00      	nop
 80032f6:	bf00      	nop
	...

08003300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003300:	f3ef 8009 	mrs	r0, PSP
 8003304:	f3bf 8f6f 	isb	sy
 8003308:	4b15      	ldr	r3, [pc, #84]	; (8003360 <pxCurrentTCBConst>)
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	f01e 0f10 	tst.w	lr, #16
 8003310:	bf08      	it	eq
 8003312:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003316:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800331a:	6010      	str	r0, [r2, #0]
 800331c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003320:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003324:	f380 8811 	msr	BASEPRI, r0
 8003328:	f3bf 8f4f 	dsb	sy
 800332c:	f3bf 8f6f 	isb	sy
 8003330:	f7ff ff4a 	bl	80031c8 <vTaskSwitchContext>
 8003334:	f04f 0000 	mov.w	r0, #0
 8003338:	f380 8811 	msr	BASEPRI, r0
 800333c:	bc09      	pop	{r0, r3}
 800333e:	6819      	ldr	r1, [r3, #0]
 8003340:	6808      	ldr	r0, [r1, #0]
 8003342:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003346:	f01e 0f10 	tst.w	lr, #16
 800334a:	bf08      	it	eq
 800334c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003350:	f380 8809 	msr	PSP, r0
 8003354:	f3bf 8f6f 	isb	sy
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	f3af 8000 	nop.w

08003360 <pxCurrentTCBConst>:
 8003360:	20000154 	.word	0x20000154
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003364:	bf00      	nop
 8003366:	bf00      	nop

08003368 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
	__asm volatile
 800336e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003372:	f383 8811 	msr	BASEPRI, r3
 8003376:	f3bf 8f6f 	isb	sy
 800337a:	f3bf 8f4f 	dsb	sy
 800337e:	607b      	str	r3, [r7, #4]
}
 8003380:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003382:	f7ff fe69 	bl	8003058 <xTaskIncrementTick>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d003      	beq.n	8003394 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800338c:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <SysTick_Handler+0x40>)
 800338e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	2300      	movs	r3, #0
 8003396:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800339e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80033a0:	bf00      	nop
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	e000ed04 	.word	0xe000ed04

080033ac <siprintf>:
 80033ac:	b40e      	push	{r1, r2, r3}
 80033ae:	b500      	push	{lr}
 80033b0:	b09c      	sub	sp, #112	; 0x70
 80033b2:	ab1d      	add	r3, sp, #116	; 0x74
 80033b4:	9002      	str	r0, [sp, #8]
 80033b6:	9006      	str	r0, [sp, #24]
 80033b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80033bc:	4809      	ldr	r0, [pc, #36]	; (80033e4 <siprintf+0x38>)
 80033be:	9107      	str	r1, [sp, #28]
 80033c0:	9104      	str	r1, [sp, #16]
 80033c2:	4909      	ldr	r1, [pc, #36]	; (80033e8 <siprintf+0x3c>)
 80033c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80033c8:	9105      	str	r1, [sp, #20]
 80033ca:	6800      	ldr	r0, [r0, #0]
 80033cc:	9301      	str	r3, [sp, #4]
 80033ce:	a902      	add	r1, sp, #8
 80033d0:	f000 f9a0 	bl	8003714 <_svfiprintf_r>
 80033d4:	9b02      	ldr	r3, [sp, #8]
 80033d6:	2200      	movs	r2, #0
 80033d8:	701a      	strb	r2, [r3, #0]
 80033da:	b01c      	add	sp, #112	; 0x70
 80033dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80033e0:	b003      	add	sp, #12
 80033e2:	4770      	bx	lr
 80033e4:	20000058 	.word	0x20000058
 80033e8:	ffff0208 	.word	0xffff0208

080033ec <memset>:
 80033ec:	4402      	add	r2, r0
 80033ee:	4603      	mov	r3, r0
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d100      	bne.n	80033f6 <memset+0xa>
 80033f4:	4770      	bx	lr
 80033f6:	f803 1b01 	strb.w	r1, [r3], #1
 80033fa:	e7f9      	b.n	80033f0 <memset+0x4>

080033fc <__errno>:
 80033fc:	4b01      	ldr	r3, [pc, #4]	; (8003404 <__errno+0x8>)
 80033fe:	6818      	ldr	r0, [r3, #0]
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	20000058 	.word	0x20000058

08003408 <__libc_init_array>:
 8003408:	b570      	push	{r4, r5, r6, lr}
 800340a:	4d0d      	ldr	r5, [pc, #52]	; (8003440 <__libc_init_array+0x38>)
 800340c:	4c0d      	ldr	r4, [pc, #52]	; (8003444 <__libc_init_array+0x3c>)
 800340e:	1b64      	subs	r4, r4, r5
 8003410:	10a4      	asrs	r4, r4, #2
 8003412:	2600      	movs	r6, #0
 8003414:	42a6      	cmp	r6, r4
 8003416:	d109      	bne.n	800342c <__libc_init_array+0x24>
 8003418:	4d0b      	ldr	r5, [pc, #44]	; (8003448 <__libc_init_array+0x40>)
 800341a:	4c0c      	ldr	r4, [pc, #48]	; (800344c <__libc_init_array+0x44>)
 800341c:	f000 fc6a 	bl	8003cf4 <_init>
 8003420:	1b64      	subs	r4, r4, r5
 8003422:	10a4      	asrs	r4, r4, #2
 8003424:	2600      	movs	r6, #0
 8003426:	42a6      	cmp	r6, r4
 8003428:	d105      	bne.n	8003436 <__libc_init_array+0x2e>
 800342a:	bd70      	pop	{r4, r5, r6, pc}
 800342c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003430:	4798      	blx	r3
 8003432:	3601      	adds	r6, #1
 8003434:	e7ee      	b.n	8003414 <__libc_init_array+0xc>
 8003436:	f855 3b04 	ldr.w	r3, [r5], #4
 800343a:	4798      	blx	r3
 800343c:	3601      	adds	r6, #1
 800343e:	e7f2      	b.n	8003426 <__libc_init_array+0x1e>
 8003440:	08003d84 	.word	0x08003d84
 8003444:	08003d84 	.word	0x08003d84
 8003448:	08003d84 	.word	0x08003d84
 800344c:	08003d88 	.word	0x08003d88

08003450 <__retarget_lock_acquire_recursive>:
 8003450:	4770      	bx	lr

08003452 <__retarget_lock_release_recursive>:
 8003452:	4770      	bx	lr

08003454 <memcpy>:
 8003454:	440a      	add	r2, r1
 8003456:	4291      	cmp	r1, r2
 8003458:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800345c:	d100      	bne.n	8003460 <memcpy+0xc>
 800345e:	4770      	bx	lr
 8003460:	b510      	push	{r4, lr}
 8003462:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003466:	f803 4f01 	strb.w	r4, [r3, #1]!
 800346a:	4291      	cmp	r1, r2
 800346c:	d1f9      	bne.n	8003462 <memcpy+0xe>
 800346e:	bd10      	pop	{r4, pc}

08003470 <_free_r>:
 8003470:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003472:	2900      	cmp	r1, #0
 8003474:	d044      	beq.n	8003500 <_free_r+0x90>
 8003476:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800347a:	9001      	str	r0, [sp, #4]
 800347c:	2b00      	cmp	r3, #0
 800347e:	f1a1 0404 	sub.w	r4, r1, #4
 8003482:	bfb8      	it	lt
 8003484:	18e4      	addlt	r4, r4, r3
 8003486:	f000 f8df 	bl	8003648 <__malloc_lock>
 800348a:	4a1e      	ldr	r2, [pc, #120]	; (8003504 <_free_r+0x94>)
 800348c:	9801      	ldr	r0, [sp, #4]
 800348e:	6813      	ldr	r3, [r2, #0]
 8003490:	b933      	cbnz	r3, 80034a0 <_free_r+0x30>
 8003492:	6063      	str	r3, [r4, #4]
 8003494:	6014      	str	r4, [r2, #0]
 8003496:	b003      	add	sp, #12
 8003498:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800349c:	f000 b8da 	b.w	8003654 <__malloc_unlock>
 80034a0:	42a3      	cmp	r3, r4
 80034a2:	d908      	bls.n	80034b6 <_free_r+0x46>
 80034a4:	6825      	ldr	r5, [r4, #0]
 80034a6:	1961      	adds	r1, r4, r5
 80034a8:	428b      	cmp	r3, r1
 80034aa:	bf01      	itttt	eq
 80034ac:	6819      	ldreq	r1, [r3, #0]
 80034ae:	685b      	ldreq	r3, [r3, #4]
 80034b0:	1949      	addeq	r1, r1, r5
 80034b2:	6021      	streq	r1, [r4, #0]
 80034b4:	e7ed      	b.n	8003492 <_free_r+0x22>
 80034b6:	461a      	mov	r2, r3
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	b10b      	cbz	r3, 80034c0 <_free_r+0x50>
 80034bc:	42a3      	cmp	r3, r4
 80034be:	d9fa      	bls.n	80034b6 <_free_r+0x46>
 80034c0:	6811      	ldr	r1, [r2, #0]
 80034c2:	1855      	adds	r5, r2, r1
 80034c4:	42a5      	cmp	r5, r4
 80034c6:	d10b      	bne.n	80034e0 <_free_r+0x70>
 80034c8:	6824      	ldr	r4, [r4, #0]
 80034ca:	4421      	add	r1, r4
 80034cc:	1854      	adds	r4, r2, r1
 80034ce:	42a3      	cmp	r3, r4
 80034d0:	6011      	str	r1, [r2, #0]
 80034d2:	d1e0      	bne.n	8003496 <_free_r+0x26>
 80034d4:	681c      	ldr	r4, [r3, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	6053      	str	r3, [r2, #4]
 80034da:	440c      	add	r4, r1
 80034dc:	6014      	str	r4, [r2, #0]
 80034de:	e7da      	b.n	8003496 <_free_r+0x26>
 80034e0:	d902      	bls.n	80034e8 <_free_r+0x78>
 80034e2:	230c      	movs	r3, #12
 80034e4:	6003      	str	r3, [r0, #0]
 80034e6:	e7d6      	b.n	8003496 <_free_r+0x26>
 80034e8:	6825      	ldr	r5, [r4, #0]
 80034ea:	1961      	adds	r1, r4, r5
 80034ec:	428b      	cmp	r3, r1
 80034ee:	bf04      	itt	eq
 80034f0:	6819      	ldreq	r1, [r3, #0]
 80034f2:	685b      	ldreq	r3, [r3, #4]
 80034f4:	6063      	str	r3, [r4, #4]
 80034f6:	bf04      	itt	eq
 80034f8:	1949      	addeq	r1, r1, r5
 80034fa:	6021      	streq	r1, [r4, #0]
 80034fc:	6054      	str	r4, [r2, #4]
 80034fe:	e7ca      	b.n	8003496 <_free_r+0x26>
 8003500:	b003      	add	sp, #12
 8003502:	bd30      	pop	{r4, r5, pc}
 8003504:	20000348 	.word	0x20000348

08003508 <sbrk_aligned>:
 8003508:	b570      	push	{r4, r5, r6, lr}
 800350a:	4e0e      	ldr	r6, [pc, #56]	; (8003544 <sbrk_aligned+0x3c>)
 800350c:	460c      	mov	r4, r1
 800350e:	6831      	ldr	r1, [r6, #0]
 8003510:	4605      	mov	r5, r0
 8003512:	b911      	cbnz	r1, 800351a <sbrk_aligned+0x12>
 8003514:	f000 fba6 	bl	8003c64 <_sbrk_r>
 8003518:	6030      	str	r0, [r6, #0]
 800351a:	4621      	mov	r1, r4
 800351c:	4628      	mov	r0, r5
 800351e:	f000 fba1 	bl	8003c64 <_sbrk_r>
 8003522:	1c43      	adds	r3, r0, #1
 8003524:	d00a      	beq.n	800353c <sbrk_aligned+0x34>
 8003526:	1cc4      	adds	r4, r0, #3
 8003528:	f024 0403 	bic.w	r4, r4, #3
 800352c:	42a0      	cmp	r0, r4
 800352e:	d007      	beq.n	8003540 <sbrk_aligned+0x38>
 8003530:	1a21      	subs	r1, r4, r0
 8003532:	4628      	mov	r0, r5
 8003534:	f000 fb96 	bl	8003c64 <_sbrk_r>
 8003538:	3001      	adds	r0, #1
 800353a:	d101      	bne.n	8003540 <sbrk_aligned+0x38>
 800353c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003540:	4620      	mov	r0, r4
 8003542:	bd70      	pop	{r4, r5, r6, pc}
 8003544:	2000034c 	.word	0x2000034c

08003548 <_malloc_r>:
 8003548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800354c:	1ccd      	adds	r5, r1, #3
 800354e:	f025 0503 	bic.w	r5, r5, #3
 8003552:	3508      	adds	r5, #8
 8003554:	2d0c      	cmp	r5, #12
 8003556:	bf38      	it	cc
 8003558:	250c      	movcc	r5, #12
 800355a:	2d00      	cmp	r5, #0
 800355c:	4607      	mov	r7, r0
 800355e:	db01      	blt.n	8003564 <_malloc_r+0x1c>
 8003560:	42a9      	cmp	r1, r5
 8003562:	d905      	bls.n	8003570 <_malloc_r+0x28>
 8003564:	230c      	movs	r3, #12
 8003566:	603b      	str	r3, [r7, #0]
 8003568:	2600      	movs	r6, #0
 800356a:	4630      	mov	r0, r6
 800356c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003570:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003644 <_malloc_r+0xfc>
 8003574:	f000 f868 	bl	8003648 <__malloc_lock>
 8003578:	f8d8 3000 	ldr.w	r3, [r8]
 800357c:	461c      	mov	r4, r3
 800357e:	bb5c      	cbnz	r4, 80035d8 <_malloc_r+0x90>
 8003580:	4629      	mov	r1, r5
 8003582:	4638      	mov	r0, r7
 8003584:	f7ff ffc0 	bl	8003508 <sbrk_aligned>
 8003588:	1c43      	adds	r3, r0, #1
 800358a:	4604      	mov	r4, r0
 800358c:	d155      	bne.n	800363a <_malloc_r+0xf2>
 800358e:	f8d8 4000 	ldr.w	r4, [r8]
 8003592:	4626      	mov	r6, r4
 8003594:	2e00      	cmp	r6, #0
 8003596:	d145      	bne.n	8003624 <_malloc_r+0xdc>
 8003598:	2c00      	cmp	r4, #0
 800359a:	d048      	beq.n	800362e <_malloc_r+0xe6>
 800359c:	6823      	ldr	r3, [r4, #0]
 800359e:	4631      	mov	r1, r6
 80035a0:	4638      	mov	r0, r7
 80035a2:	eb04 0903 	add.w	r9, r4, r3
 80035a6:	f000 fb5d 	bl	8003c64 <_sbrk_r>
 80035aa:	4581      	cmp	r9, r0
 80035ac:	d13f      	bne.n	800362e <_malloc_r+0xe6>
 80035ae:	6821      	ldr	r1, [r4, #0]
 80035b0:	1a6d      	subs	r5, r5, r1
 80035b2:	4629      	mov	r1, r5
 80035b4:	4638      	mov	r0, r7
 80035b6:	f7ff ffa7 	bl	8003508 <sbrk_aligned>
 80035ba:	3001      	adds	r0, #1
 80035bc:	d037      	beq.n	800362e <_malloc_r+0xe6>
 80035be:	6823      	ldr	r3, [r4, #0]
 80035c0:	442b      	add	r3, r5
 80035c2:	6023      	str	r3, [r4, #0]
 80035c4:	f8d8 3000 	ldr.w	r3, [r8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d038      	beq.n	800363e <_malloc_r+0xf6>
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	42a2      	cmp	r2, r4
 80035d0:	d12b      	bne.n	800362a <_malloc_r+0xe2>
 80035d2:	2200      	movs	r2, #0
 80035d4:	605a      	str	r2, [r3, #4]
 80035d6:	e00f      	b.n	80035f8 <_malloc_r+0xb0>
 80035d8:	6822      	ldr	r2, [r4, #0]
 80035da:	1b52      	subs	r2, r2, r5
 80035dc:	d41f      	bmi.n	800361e <_malloc_r+0xd6>
 80035de:	2a0b      	cmp	r2, #11
 80035e0:	d917      	bls.n	8003612 <_malloc_r+0xca>
 80035e2:	1961      	adds	r1, r4, r5
 80035e4:	42a3      	cmp	r3, r4
 80035e6:	6025      	str	r5, [r4, #0]
 80035e8:	bf18      	it	ne
 80035ea:	6059      	strne	r1, [r3, #4]
 80035ec:	6863      	ldr	r3, [r4, #4]
 80035ee:	bf08      	it	eq
 80035f0:	f8c8 1000 	streq.w	r1, [r8]
 80035f4:	5162      	str	r2, [r4, r5]
 80035f6:	604b      	str	r3, [r1, #4]
 80035f8:	4638      	mov	r0, r7
 80035fa:	f104 060b 	add.w	r6, r4, #11
 80035fe:	f000 f829 	bl	8003654 <__malloc_unlock>
 8003602:	f026 0607 	bic.w	r6, r6, #7
 8003606:	1d23      	adds	r3, r4, #4
 8003608:	1af2      	subs	r2, r6, r3
 800360a:	d0ae      	beq.n	800356a <_malloc_r+0x22>
 800360c:	1b9b      	subs	r3, r3, r6
 800360e:	50a3      	str	r3, [r4, r2]
 8003610:	e7ab      	b.n	800356a <_malloc_r+0x22>
 8003612:	42a3      	cmp	r3, r4
 8003614:	6862      	ldr	r2, [r4, #4]
 8003616:	d1dd      	bne.n	80035d4 <_malloc_r+0x8c>
 8003618:	f8c8 2000 	str.w	r2, [r8]
 800361c:	e7ec      	b.n	80035f8 <_malloc_r+0xb0>
 800361e:	4623      	mov	r3, r4
 8003620:	6864      	ldr	r4, [r4, #4]
 8003622:	e7ac      	b.n	800357e <_malloc_r+0x36>
 8003624:	4634      	mov	r4, r6
 8003626:	6876      	ldr	r6, [r6, #4]
 8003628:	e7b4      	b.n	8003594 <_malloc_r+0x4c>
 800362a:	4613      	mov	r3, r2
 800362c:	e7cc      	b.n	80035c8 <_malloc_r+0x80>
 800362e:	230c      	movs	r3, #12
 8003630:	603b      	str	r3, [r7, #0]
 8003632:	4638      	mov	r0, r7
 8003634:	f000 f80e 	bl	8003654 <__malloc_unlock>
 8003638:	e797      	b.n	800356a <_malloc_r+0x22>
 800363a:	6025      	str	r5, [r4, #0]
 800363c:	e7dc      	b.n	80035f8 <_malloc_r+0xb0>
 800363e:	605b      	str	r3, [r3, #4]
 8003640:	deff      	udf	#255	; 0xff
 8003642:	bf00      	nop
 8003644:	20000348 	.word	0x20000348

08003648 <__malloc_lock>:
 8003648:	4801      	ldr	r0, [pc, #4]	; (8003650 <__malloc_lock+0x8>)
 800364a:	f7ff bf01 	b.w	8003450 <__retarget_lock_acquire_recursive>
 800364e:	bf00      	nop
 8003650:	20000344 	.word	0x20000344

08003654 <__malloc_unlock>:
 8003654:	4801      	ldr	r0, [pc, #4]	; (800365c <__malloc_unlock+0x8>)
 8003656:	f7ff befc 	b.w	8003452 <__retarget_lock_release_recursive>
 800365a:	bf00      	nop
 800365c:	20000344 	.word	0x20000344

08003660 <__ssputs_r>:
 8003660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003664:	688e      	ldr	r6, [r1, #8]
 8003666:	461f      	mov	r7, r3
 8003668:	42be      	cmp	r6, r7
 800366a:	680b      	ldr	r3, [r1, #0]
 800366c:	4682      	mov	sl, r0
 800366e:	460c      	mov	r4, r1
 8003670:	4690      	mov	r8, r2
 8003672:	d82c      	bhi.n	80036ce <__ssputs_r+0x6e>
 8003674:	898a      	ldrh	r2, [r1, #12]
 8003676:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800367a:	d026      	beq.n	80036ca <__ssputs_r+0x6a>
 800367c:	6965      	ldr	r5, [r4, #20]
 800367e:	6909      	ldr	r1, [r1, #16]
 8003680:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003684:	eba3 0901 	sub.w	r9, r3, r1
 8003688:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800368c:	1c7b      	adds	r3, r7, #1
 800368e:	444b      	add	r3, r9
 8003690:	106d      	asrs	r5, r5, #1
 8003692:	429d      	cmp	r5, r3
 8003694:	bf38      	it	cc
 8003696:	461d      	movcc	r5, r3
 8003698:	0553      	lsls	r3, r2, #21
 800369a:	d527      	bpl.n	80036ec <__ssputs_r+0x8c>
 800369c:	4629      	mov	r1, r5
 800369e:	f7ff ff53 	bl	8003548 <_malloc_r>
 80036a2:	4606      	mov	r6, r0
 80036a4:	b360      	cbz	r0, 8003700 <__ssputs_r+0xa0>
 80036a6:	6921      	ldr	r1, [r4, #16]
 80036a8:	464a      	mov	r2, r9
 80036aa:	f7ff fed3 	bl	8003454 <memcpy>
 80036ae:	89a3      	ldrh	r3, [r4, #12]
 80036b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80036b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036b8:	81a3      	strh	r3, [r4, #12]
 80036ba:	6126      	str	r6, [r4, #16]
 80036bc:	6165      	str	r5, [r4, #20]
 80036be:	444e      	add	r6, r9
 80036c0:	eba5 0509 	sub.w	r5, r5, r9
 80036c4:	6026      	str	r6, [r4, #0]
 80036c6:	60a5      	str	r5, [r4, #8]
 80036c8:	463e      	mov	r6, r7
 80036ca:	42be      	cmp	r6, r7
 80036cc:	d900      	bls.n	80036d0 <__ssputs_r+0x70>
 80036ce:	463e      	mov	r6, r7
 80036d0:	6820      	ldr	r0, [r4, #0]
 80036d2:	4632      	mov	r2, r6
 80036d4:	4641      	mov	r1, r8
 80036d6:	f000 faab 	bl	8003c30 <memmove>
 80036da:	68a3      	ldr	r3, [r4, #8]
 80036dc:	1b9b      	subs	r3, r3, r6
 80036de:	60a3      	str	r3, [r4, #8]
 80036e0:	6823      	ldr	r3, [r4, #0]
 80036e2:	4433      	add	r3, r6
 80036e4:	6023      	str	r3, [r4, #0]
 80036e6:	2000      	movs	r0, #0
 80036e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036ec:	462a      	mov	r2, r5
 80036ee:	f000 fac9 	bl	8003c84 <_realloc_r>
 80036f2:	4606      	mov	r6, r0
 80036f4:	2800      	cmp	r0, #0
 80036f6:	d1e0      	bne.n	80036ba <__ssputs_r+0x5a>
 80036f8:	6921      	ldr	r1, [r4, #16]
 80036fa:	4650      	mov	r0, sl
 80036fc:	f7ff feb8 	bl	8003470 <_free_r>
 8003700:	230c      	movs	r3, #12
 8003702:	f8ca 3000 	str.w	r3, [sl]
 8003706:	89a3      	ldrh	r3, [r4, #12]
 8003708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800370c:	81a3      	strh	r3, [r4, #12]
 800370e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003712:	e7e9      	b.n	80036e8 <__ssputs_r+0x88>

08003714 <_svfiprintf_r>:
 8003714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003718:	4698      	mov	r8, r3
 800371a:	898b      	ldrh	r3, [r1, #12]
 800371c:	061b      	lsls	r3, r3, #24
 800371e:	b09d      	sub	sp, #116	; 0x74
 8003720:	4607      	mov	r7, r0
 8003722:	460d      	mov	r5, r1
 8003724:	4614      	mov	r4, r2
 8003726:	d50e      	bpl.n	8003746 <_svfiprintf_r+0x32>
 8003728:	690b      	ldr	r3, [r1, #16]
 800372a:	b963      	cbnz	r3, 8003746 <_svfiprintf_r+0x32>
 800372c:	2140      	movs	r1, #64	; 0x40
 800372e:	f7ff ff0b 	bl	8003548 <_malloc_r>
 8003732:	6028      	str	r0, [r5, #0]
 8003734:	6128      	str	r0, [r5, #16]
 8003736:	b920      	cbnz	r0, 8003742 <_svfiprintf_r+0x2e>
 8003738:	230c      	movs	r3, #12
 800373a:	603b      	str	r3, [r7, #0]
 800373c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003740:	e0d0      	b.n	80038e4 <_svfiprintf_r+0x1d0>
 8003742:	2340      	movs	r3, #64	; 0x40
 8003744:	616b      	str	r3, [r5, #20]
 8003746:	2300      	movs	r3, #0
 8003748:	9309      	str	r3, [sp, #36]	; 0x24
 800374a:	2320      	movs	r3, #32
 800374c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003750:	f8cd 800c 	str.w	r8, [sp, #12]
 8003754:	2330      	movs	r3, #48	; 0x30
 8003756:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80038fc <_svfiprintf_r+0x1e8>
 800375a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800375e:	f04f 0901 	mov.w	r9, #1
 8003762:	4623      	mov	r3, r4
 8003764:	469a      	mov	sl, r3
 8003766:	f813 2b01 	ldrb.w	r2, [r3], #1
 800376a:	b10a      	cbz	r2, 8003770 <_svfiprintf_r+0x5c>
 800376c:	2a25      	cmp	r2, #37	; 0x25
 800376e:	d1f9      	bne.n	8003764 <_svfiprintf_r+0x50>
 8003770:	ebba 0b04 	subs.w	fp, sl, r4
 8003774:	d00b      	beq.n	800378e <_svfiprintf_r+0x7a>
 8003776:	465b      	mov	r3, fp
 8003778:	4622      	mov	r2, r4
 800377a:	4629      	mov	r1, r5
 800377c:	4638      	mov	r0, r7
 800377e:	f7ff ff6f 	bl	8003660 <__ssputs_r>
 8003782:	3001      	adds	r0, #1
 8003784:	f000 80a9 	beq.w	80038da <_svfiprintf_r+0x1c6>
 8003788:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800378a:	445a      	add	r2, fp
 800378c:	9209      	str	r2, [sp, #36]	; 0x24
 800378e:	f89a 3000 	ldrb.w	r3, [sl]
 8003792:	2b00      	cmp	r3, #0
 8003794:	f000 80a1 	beq.w	80038da <_svfiprintf_r+0x1c6>
 8003798:	2300      	movs	r3, #0
 800379a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800379e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037a2:	f10a 0a01 	add.w	sl, sl, #1
 80037a6:	9304      	str	r3, [sp, #16]
 80037a8:	9307      	str	r3, [sp, #28]
 80037aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037ae:	931a      	str	r3, [sp, #104]	; 0x68
 80037b0:	4654      	mov	r4, sl
 80037b2:	2205      	movs	r2, #5
 80037b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037b8:	4850      	ldr	r0, [pc, #320]	; (80038fc <_svfiprintf_r+0x1e8>)
 80037ba:	f7fc fd11 	bl	80001e0 <memchr>
 80037be:	9a04      	ldr	r2, [sp, #16]
 80037c0:	b9d8      	cbnz	r0, 80037fa <_svfiprintf_r+0xe6>
 80037c2:	06d0      	lsls	r0, r2, #27
 80037c4:	bf44      	itt	mi
 80037c6:	2320      	movmi	r3, #32
 80037c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037cc:	0711      	lsls	r1, r2, #28
 80037ce:	bf44      	itt	mi
 80037d0:	232b      	movmi	r3, #43	; 0x2b
 80037d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037d6:	f89a 3000 	ldrb.w	r3, [sl]
 80037da:	2b2a      	cmp	r3, #42	; 0x2a
 80037dc:	d015      	beq.n	800380a <_svfiprintf_r+0xf6>
 80037de:	9a07      	ldr	r2, [sp, #28]
 80037e0:	4654      	mov	r4, sl
 80037e2:	2000      	movs	r0, #0
 80037e4:	f04f 0c0a 	mov.w	ip, #10
 80037e8:	4621      	mov	r1, r4
 80037ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037ee:	3b30      	subs	r3, #48	; 0x30
 80037f0:	2b09      	cmp	r3, #9
 80037f2:	d94d      	bls.n	8003890 <_svfiprintf_r+0x17c>
 80037f4:	b1b0      	cbz	r0, 8003824 <_svfiprintf_r+0x110>
 80037f6:	9207      	str	r2, [sp, #28]
 80037f8:	e014      	b.n	8003824 <_svfiprintf_r+0x110>
 80037fa:	eba0 0308 	sub.w	r3, r0, r8
 80037fe:	fa09 f303 	lsl.w	r3, r9, r3
 8003802:	4313      	orrs	r3, r2
 8003804:	9304      	str	r3, [sp, #16]
 8003806:	46a2      	mov	sl, r4
 8003808:	e7d2      	b.n	80037b0 <_svfiprintf_r+0x9c>
 800380a:	9b03      	ldr	r3, [sp, #12]
 800380c:	1d19      	adds	r1, r3, #4
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	9103      	str	r1, [sp, #12]
 8003812:	2b00      	cmp	r3, #0
 8003814:	bfbb      	ittet	lt
 8003816:	425b      	neglt	r3, r3
 8003818:	f042 0202 	orrlt.w	r2, r2, #2
 800381c:	9307      	strge	r3, [sp, #28]
 800381e:	9307      	strlt	r3, [sp, #28]
 8003820:	bfb8      	it	lt
 8003822:	9204      	strlt	r2, [sp, #16]
 8003824:	7823      	ldrb	r3, [r4, #0]
 8003826:	2b2e      	cmp	r3, #46	; 0x2e
 8003828:	d10c      	bne.n	8003844 <_svfiprintf_r+0x130>
 800382a:	7863      	ldrb	r3, [r4, #1]
 800382c:	2b2a      	cmp	r3, #42	; 0x2a
 800382e:	d134      	bne.n	800389a <_svfiprintf_r+0x186>
 8003830:	9b03      	ldr	r3, [sp, #12]
 8003832:	1d1a      	adds	r2, r3, #4
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	9203      	str	r2, [sp, #12]
 8003838:	2b00      	cmp	r3, #0
 800383a:	bfb8      	it	lt
 800383c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003840:	3402      	adds	r4, #2
 8003842:	9305      	str	r3, [sp, #20]
 8003844:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800390c <_svfiprintf_r+0x1f8>
 8003848:	7821      	ldrb	r1, [r4, #0]
 800384a:	2203      	movs	r2, #3
 800384c:	4650      	mov	r0, sl
 800384e:	f7fc fcc7 	bl	80001e0 <memchr>
 8003852:	b138      	cbz	r0, 8003864 <_svfiprintf_r+0x150>
 8003854:	9b04      	ldr	r3, [sp, #16]
 8003856:	eba0 000a 	sub.w	r0, r0, sl
 800385a:	2240      	movs	r2, #64	; 0x40
 800385c:	4082      	lsls	r2, r0
 800385e:	4313      	orrs	r3, r2
 8003860:	3401      	adds	r4, #1
 8003862:	9304      	str	r3, [sp, #16]
 8003864:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003868:	4825      	ldr	r0, [pc, #148]	; (8003900 <_svfiprintf_r+0x1ec>)
 800386a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800386e:	2206      	movs	r2, #6
 8003870:	f7fc fcb6 	bl	80001e0 <memchr>
 8003874:	2800      	cmp	r0, #0
 8003876:	d038      	beq.n	80038ea <_svfiprintf_r+0x1d6>
 8003878:	4b22      	ldr	r3, [pc, #136]	; (8003904 <_svfiprintf_r+0x1f0>)
 800387a:	bb1b      	cbnz	r3, 80038c4 <_svfiprintf_r+0x1b0>
 800387c:	9b03      	ldr	r3, [sp, #12]
 800387e:	3307      	adds	r3, #7
 8003880:	f023 0307 	bic.w	r3, r3, #7
 8003884:	3308      	adds	r3, #8
 8003886:	9303      	str	r3, [sp, #12]
 8003888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800388a:	4433      	add	r3, r6
 800388c:	9309      	str	r3, [sp, #36]	; 0x24
 800388e:	e768      	b.n	8003762 <_svfiprintf_r+0x4e>
 8003890:	fb0c 3202 	mla	r2, ip, r2, r3
 8003894:	460c      	mov	r4, r1
 8003896:	2001      	movs	r0, #1
 8003898:	e7a6      	b.n	80037e8 <_svfiprintf_r+0xd4>
 800389a:	2300      	movs	r3, #0
 800389c:	3401      	adds	r4, #1
 800389e:	9305      	str	r3, [sp, #20]
 80038a0:	4619      	mov	r1, r3
 80038a2:	f04f 0c0a 	mov.w	ip, #10
 80038a6:	4620      	mov	r0, r4
 80038a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038ac:	3a30      	subs	r2, #48	; 0x30
 80038ae:	2a09      	cmp	r2, #9
 80038b0:	d903      	bls.n	80038ba <_svfiprintf_r+0x1a6>
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d0c6      	beq.n	8003844 <_svfiprintf_r+0x130>
 80038b6:	9105      	str	r1, [sp, #20]
 80038b8:	e7c4      	b.n	8003844 <_svfiprintf_r+0x130>
 80038ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80038be:	4604      	mov	r4, r0
 80038c0:	2301      	movs	r3, #1
 80038c2:	e7f0      	b.n	80038a6 <_svfiprintf_r+0x192>
 80038c4:	ab03      	add	r3, sp, #12
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	462a      	mov	r2, r5
 80038ca:	4b0f      	ldr	r3, [pc, #60]	; (8003908 <_svfiprintf_r+0x1f4>)
 80038cc:	a904      	add	r1, sp, #16
 80038ce:	4638      	mov	r0, r7
 80038d0:	f3af 8000 	nop.w
 80038d4:	1c42      	adds	r2, r0, #1
 80038d6:	4606      	mov	r6, r0
 80038d8:	d1d6      	bne.n	8003888 <_svfiprintf_r+0x174>
 80038da:	89ab      	ldrh	r3, [r5, #12]
 80038dc:	065b      	lsls	r3, r3, #25
 80038de:	f53f af2d 	bmi.w	800373c <_svfiprintf_r+0x28>
 80038e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038e4:	b01d      	add	sp, #116	; 0x74
 80038e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038ea:	ab03      	add	r3, sp, #12
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	462a      	mov	r2, r5
 80038f0:	4b05      	ldr	r3, [pc, #20]	; (8003908 <_svfiprintf_r+0x1f4>)
 80038f2:	a904      	add	r1, sp, #16
 80038f4:	4638      	mov	r0, r7
 80038f6:	f000 f879 	bl	80039ec <_printf_i>
 80038fa:	e7eb      	b.n	80038d4 <_svfiprintf_r+0x1c0>
 80038fc:	08003d48 	.word	0x08003d48
 8003900:	08003d52 	.word	0x08003d52
 8003904:	00000000 	.word	0x00000000
 8003908:	08003661 	.word	0x08003661
 800390c:	08003d4e 	.word	0x08003d4e

08003910 <_printf_common>:
 8003910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003914:	4616      	mov	r6, r2
 8003916:	4699      	mov	r9, r3
 8003918:	688a      	ldr	r2, [r1, #8]
 800391a:	690b      	ldr	r3, [r1, #16]
 800391c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003920:	4293      	cmp	r3, r2
 8003922:	bfb8      	it	lt
 8003924:	4613      	movlt	r3, r2
 8003926:	6033      	str	r3, [r6, #0]
 8003928:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800392c:	4607      	mov	r7, r0
 800392e:	460c      	mov	r4, r1
 8003930:	b10a      	cbz	r2, 8003936 <_printf_common+0x26>
 8003932:	3301      	adds	r3, #1
 8003934:	6033      	str	r3, [r6, #0]
 8003936:	6823      	ldr	r3, [r4, #0]
 8003938:	0699      	lsls	r1, r3, #26
 800393a:	bf42      	ittt	mi
 800393c:	6833      	ldrmi	r3, [r6, #0]
 800393e:	3302      	addmi	r3, #2
 8003940:	6033      	strmi	r3, [r6, #0]
 8003942:	6825      	ldr	r5, [r4, #0]
 8003944:	f015 0506 	ands.w	r5, r5, #6
 8003948:	d106      	bne.n	8003958 <_printf_common+0x48>
 800394a:	f104 0a19 	add.w	sl, r4, #25
 800394e:	68e3      	ldr	r3, [r4, #12]
 8003950:	6832      	ldr	r2, [r6, #0]
 8003952:	1a9b      	subs	r3, r3, r2
 8003954:	42ab      	cmp	r3, r5
 8003956:	dc26      	bgt.n	80039a6 <_printf_common+0x96>
 8003958:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800395c:	1e13      	subs	r3, r2, #0
 800395e:	6822      	ldr	r2, [r4, #0]
 8003960:	bf18      	it	ne
 8003962:	2301      	movne	r3, #1
 8003964:	0692      	lsls	r2, r2, #26
 8003966:	d42b      	bmi.n	80039c0 <_printf_common+0xb0>
 8003968:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800396c:	4649      	mov	r1, r9
 800396e:	4638      	mov	r0, r7
 8003970:	47c0      	blx	r8
 8003972:	3001      	adds	r0, #1
 8003974:	d01e      	beq.n	80039b4 <_printf_common+0xa4>
 8003976:	6823      	ldr	r3, [r4, #0]
 8003978:	6922      	ldr	r2, [r4, #16]
 800397a:	f003 0306 	and.w	r3, r3, #6
 800397e:	2b04      	cmp	r3, #4
 8003980:	bf02      	ittt	eq
 8003982:	68e5      	ldreq	r5, [r4, #12]
 8003984:	6833      	ldreq	r3, [r6, #0]
 8003986:	1aed      	subeq	r5, r5, r3
 8003988:	68a3      	ldr	r3, [r4, #8]
 800398a:	bf0c      	ite	eq
 800398c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003990:	2500      	movne	r5, #0
 8003992:	4293      	cmp	r3, r2
 8003994:	bfc4      	itt	gt
 8003996:	1a9b      	subgt	r3, r3, r2
 8003998:	18ed      	addgt	r5, r5, r3
 800399a:	2600      	movs	r6, #0
 800399c:	341a      	adds	r4, #26
 800399e:	42b5      	cmp	r5, r6
 80039a0:	d11a      	bne.n	80039d8 <_printf_common+0xc8>
 80039a2:	2000      	movs	r0, #0
 80039a4:	e008      	b.n	80039b8 <_printf_common+0xa8>
 80039a6:	2301      	movs	r3, #1
 80039a8:	4652      	mov	r2, sl
 80039aa:	4649      	mov	r1, r9
 80039ac:	4638      	mov	r0, r7
 80039ae:	47c0      	blx	r8
 80039b0:	3001      	adds	r0, #1
 80039b2:	d103      	bne.n	80039bc <_printf_common+0xac>
 80039b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039bc:	3501      	adds	r5, #1
 80039be:	e7c6      	b.n	800394e <_printf_common+0x3e>
 80039c0:	18e1      	adds	r1, r4, r3
 80039c2:	1c5a      	adds	r2, r3, #1
 80039c4:	2030      	movs	r0, #48	; 0x30
 80039c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039ca:	4422      	add	r2, r4
 80039cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039d4:	3302      	adds	r3, #2
 80039d6:	e7c7      	b.n	8003968 <_printf_common+0x58>
 80039d8:	2301      	movs	r3, #1
 80039da:	4622      	mov	r2, r4
 80039dc:	4649      	mov	r1, r9
 80039de:	4638      	mov	r0, r7
 80039e0:	47c0      	blx	r8
 80039e2:	3001      	adds	r0, #1
 80039e4:	d0e6      	beq.n	80039b4 <_printf_common+0xa4>
 80039e6:	3601      	adds	r6, #1
 80039e8:	e7d9      	b.n	800399e <_printf_common+0x8e>
	...

080039ec <_printf_i>:
 80039ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039f0:	7e0f      	ldrb	r7, [r1, #24]
 80039f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80039f4:	2f78      	cmp	r7, #120	; 0x78
 80039f6:	4691      	mov	r9, r2
 80039f8:	4680      	mov	r8, r0
 80039fa:	460c      	mov	r4, r1
 80039fc:	469a      	mov	sl, r3
 80039fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003a02:	d807      	bhi.n	8003a14 <_printf_i+0x28>
 8003a04:	2f62      	cmp	r7, #98	; 0x62
 8003a06:	d80a      	bhi.n	8003a1e <_printf_i+0x32>
 8003a08:	2f00      	cmp	r7, #0
 8003a0a:	f000 80d4 	beq.w	8003bb6 <_printf_i+0x1ca>
 8003a0e:	2f58      	cmp	r7, #88	; 0x58
 8003a10:	f000 80c0 	beq.w	8003b94 <_printf_i+0x1a8>
 8003a14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a1c:	e03a      	b.n	8003a94 <_printf_i+0xa8>
 8003a1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a22:	2b15      	cmp	r3, #21
 8003a24:	d8f6      	bhi.n	8003a14 <_printf_i+0x28>
 8003a26:	a101      	add	r1, pc, #4	; (adr r1, 8003a2c <_printf_i+0x40>)
 8003a28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a2c:	08003a85 	.word	0x08003a85
 8003a30:	08003a99 	.word	0x08003a99
 8003a34:	08003a15 	.word	0x08003a15
 8003a38:	08003a15 	.word	0x08003a15
 8003a3c:	08003a15 	.word	0x08003a15
 8003a40:	08003a15 	.word	0x08003a15
 8003a44:	08003a99 	.word	0x08003a99
 8003a48:	08003a15 	.word	0x08003a15
 8003a4c:	08003a15 	.word	0x08003a15
 8003a50:	08003a15 	.word	0x08003a15
 8003a54:	08003a15 	.word	0x08003a15
 8003a58:	08003b9d 	.word	0x08003b9d
 8003a5c:	08003ac5 	.word	0x08003ac5
 8003a60:	08003b57 	.word	0x08003b57
 8003a64:	08003a15 	.word	0x08003a15
 8003a68:	08003a15 	.word	0x08003a15
 8003a6c:	08003bbf 	.word	0x08003bbf
 8003a70:	08003a15 	.word	0x08003a15
 8003a74:	08003ac5 	.word	0x08003ac5
 8003a78:	08003a15 	.word	0x08003a15
 8003a7c:	08003a15 	.word	0x08003a15
 8003a80:	08003b5f 	.word	0x08003b5f
 8003a84:	682b      	ldr	r3, [r5, #0]
 8003a86:	1d1a      	adds	r2, r3, #4
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	602a      	str	r2, [r5, #0]
 8003a8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a94:	2301      	movs	r3, #1
 8003a96:	e09f      	b.n	8003bd8 <_printf_i+0x1ec>
 8003a98:	6820      	ldr	r0, [r4, #0]
 8003a9a:	682b      	ldr	r3, [r5, #0]
 8003a9c:	0607      	lsls	r7, r0, #24
 8003a9e:	f103 0104 	add.w	r1, r3, #4
 8003aa2:	6029      	str	r1, [r5, #0]
 8003aa4:	d501      	bpl.n	8003aaa <_printf_i+0xbe>
 8003aa6:	681e      	ldr	r6, [r3, #0]
 8003aa8:	e003      	b.n	8003ab2 <_printf_i+0xc6>
 8003aaa:	0646      	lsls	r6, r0, #25
 8003aac:	d5fb      	bpl.n	8003aa6 <_printf_i+0xba>
 8003aae:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003ab2:	2e00      	cmp	r6, #0
 8003ab4:	da03      	bge.n	8003abe <_printf_i+0xd2>
 8003ab6:	232d      	movs	r3, #45	; 0x2d
 8003ab8:	4276      	negs	r6, r6
 8003aba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003abe:	485a      	ldr	r0, [pc, #360]	; (8003c28 <_printf_i+0x23c>)
 8003ac0:	230a      	movs	r3, #10
 8003ac2:	e012      	b.n	8003aea <_printf_i+0xfe>
 8003ac4:	682b      	ldr	r3, [r5, #0]
 8003ac6:	6820      	ldr	r0, [r4, #0]
 8003ac8:	1d19      	adds	r1, r3, #4
 8003aca:	6029      	str	r1, [r5, #0]
 8003acc:	0605      	lsls	r5, r0, #24
 8003ace:	d501      	bpl.n	8003ad4 <_printf_i+0xe8>
 8003ad0:	681e      	ldr	r6, [r3, #0]
 8003ad2:	e002      	b.n	8003ada <_printf_i+0xee>
 8003ad4:	0641      	lsls	r1, r0, #25
 8003ad6:	d5fb      	bpl.n	8003ad0 <_printf_i+0xe4>
 8003ad8:	881e      	ldrh	r6, [r3, #0]
 8003ada:	4853      	ldr	r0, [pc, #332]	; (8003c28 <_printf_i+0x23c>)
 8003adc:	2f6f      	cmp	r7, #111	; 0x6f
 8003ade:	bf0c      	ite	eq
 8003ae0:	2308      	moveq	r3, #8
 8003ae2:	230a      	movne	r3, #10
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003aea:	6865      	ldr	r5, [r4, #4]
 8003aec:	60a5      	str	r5, [r4, #8]
 8003aee:	2d00      	cmp	r5, #0
 8003af0:	bfa2      	ittt	ge
 8003af2:	6821      	ldrge	r1, [r4, #0]
 8003af4:	f021 0104 	bicge.w	r1, r1, #4
 8003af8:	6021      	strge	r1, [r4, #0]
 8003afa:	b90e      	cbnz	r6, 8003b00 <_printf_i+0x114>
 8003afc:	2d00      	cmp	r5, #0
 8003afe:	d04b      	beq.n	8003b98 <_printf_i+0x1ac>
 8003b00:	4615      	mov	r5, r2
 8003b02:	fbb6 f1f3 	udiv	r1, r6, r3
 8003b06:	fb03 6711 	mls	r7, r3, r1, r6
 8003b0a:	5dc7      	ldrb	r7, [r0, r7]
 8003b0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003b10:	4637      	mov	r7, r6
 8003b12:	42bb      	cmp	r3, r7
 8003b14:	460e      	mov	r6, r1
 8003b16:	d9f4      	bls.n	8003b02 <_printf_i+0x116>
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	d10b      	bne.n	8003b34 <_printf_i+0x148>
 8003b1c:	6823      	ldr	r3, [r4, #0]
 8003b1e:	07de      	lsls	r6, r3, #31
 8003b20:	d508      	bpl.n	8003b34 <_printf_i+0x148>
 8003b22:	6923      	ldr	r3, [r4, #16]
 8003b24:	6861      	ldr	r1, [r4, #4]
 8003b26:	4299      	cmp	r1, r3
 8003b28:	bfde      	ittt	le
 8003b2a:	2330      	movle	r3, #48	; 0x30
 8003b2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b30:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003b34:	1b52      	subs	r2, r2, r5
 8003b36:	6122      	str	r2, [r4, #16]
 8003b38:	f8cd a000 	str.w	sl, [sp]
 8003b3c:	464b      	mov	r3, r9
 8003b3e:	aa03      	add	r2, sp, #12
 8003b40:	4621      	mov	r1, r4
 8003b42:	4640      	mov	r0, r8
 8003b44:	f7ff fee4 	bl	8003910 <_printf_common>
 8003b48:	3001      	adds	r0, #1
 8003b4a:	d14a      	bne.n	8003be2 <_printf_i+0x1f6>
 8003b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b50:	b004      	add	sp, #16
 8003b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b56:	6823      	ldr	r3, [r4, #0]
 8003b58:	f043 0320 	orr.w	r3, r3, #32
 8003b5c:	6023      	str	r3, [r4, #0]
 8003b5e:	4833      	ldr	r0, [pc, #204]	; (8003c2c <_printf_i+0x240>)
 8003b60:	2778      	movs	r7, #120	; 0x78
 8003b62:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003b66:	6823      	ldr	r3, [r4, #0]
 8003b68:	6829      	ldr	r1, [r5, #0]
 8003b6a:	061f      	lsls	r7, r3, #24
 8003b6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b70:	d402      	bmi.n	8003b78 <_printf_i+0x18c>
 8003b72:	065f      	lsls	r7, r3, #25
 8003b74:	bf48      	it	mi
 8003b76:	b2b6      	uxthmi	r6, r6
 8003b78:	07df      	lsls	r7, r3, #31
 8003b7a:	bf48      	it	mi
 8003b7c:	f043 0320 	orrmi.w	r3, r3, #32
 8003b80:	6029      	str	r1, [r5, #0]
 8003b82:	bf48      	it	mi
 8003b84:	6023      	strmi	r3, [r4, #0]
 8003b86:	b91e      	cbnz	r6, 8003b90 <_printf_i+0x1a4>
 8003b88:	6823      	ldr	r3, [r4, #0]
 8003b8a:	f023 0320 	bic.w	r3, r3, #32
 8003b8e:	6023      	str	r3, [r4, #0]
 8003b90:	2310      	movs	r3, #16
 8003b92:	e7a7      	b.n	8003ae4 <_printf_i+0xf8>
 8003b94:	4824      	ldr	r0, [pc, #144]	; (8003c28 <_printf_i+0x23c>)
 8003b96:	e7e4      	b.n	8003b62 <_printf_i+0x176>
 8003b98:	4615      	mov	r5, r2
 8003b9a:	e7bd      	b.n	8003b18 <_printf_i+0x12c>
 8003b9c:	682b      	ldr	r3, [r5, #0]
 8003b9e:	6826      	ldr	r6, [r4, #0]
 8003ba0:	6961      	ldr	r1, [r4, #20]
 8003ba2:	1d18      	adds	r0, r3, #4
 8003ba4:	6028      	str	r0, [r5, #0]
 8003ba6:	0635      	lsls	r5, r6, #24
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	d501      	bpl.n	8003bb0 <_printf_i+0x1c4>
 8003bac:	6019      	str	r1, [r3, #0]
 8003bae:	e002      	b.n	8003bb6 <_printf_i+0x1ca>
 8003bb0:	0670      	lsls	r0, r6, #25
 8003bb2:	d5fb      	bpl.n	8003bac <_printf_i+0x1c0>
 8003bb4:	8019      	strh	r1, [r3, #0]
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	6123      	str	r3, [r4, #16]
 8003bba:	4615      	mov	r5, r2
 8003bbc:	e7bc      	b.n	8003b38 <_printf_i+0x14c>
 8003bbe:	682b      	ldr	r3, [r5, #0]
 8003bc0:	1d1a      	adds	r2, r3, #4
 8003bc2:	602a      	str	r2, [r5, #0]
 8003bc4:	681d      	ldr	r5, [r3, #0]
 8003bc6:	6862      	ldr	r2, [r4, #4]
 8003bc8:	2100      	movs	r1, #0
 8003bca:	4628      	mov	r0, r5
 8003bcc:	f7fc fb08 	bl	80001e0 <memchr>
 8003bd0:	b108      	cbz	r0, 8003bd6 <_printf_i+0x1ea>
 8003bd2:	1b40      	subs	r0, r0, r5
 8003bd4:	6060      	str	r0, [r4, #4]
 8003bd6:	6863      	ldr	r3, [r4, #4]
 8003bd8:	6123      	str	r3, [r4, #16]
 8003bda:	2300      	movs	r3, #0
 8003bdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003be0:	e7aa      	b.n	8003b38 <_printf_i+0x14c>
 8003be2:	6923      	ldr	r3, [r4, #16]
 8003be4:	462a      	mov	r2, r5
 8003be6:	4649      	mov	r1, r9
 8003be8:	4640      	mov	r0, r8
 8003bea:	47d0      	blx	sl
 8003bec:	3001      	adds	r0, #1
 8003bee:	d0ad      	beq.n	8003b4c <_printf_i+0x160>
 8003bf0:	6823      	ldr	r3, [r4, #0]
 8003bf2:	079b      	lsls	r3, r3, #30
 8003bf4:	d413      	bmi.n	8003c1e <_printf_i+0x232>
 8003bf6:	68e0      	ldr	r0, [r4, #12]
 8003bf8:	9b03      	ldr	r3, [sp, #12]
 8003bfa:	4298      	cmp	r0, r3
 8003bfc:	bfb8      	it	lt
 8003bfe:	4618      	movlt	r0, r3
 8003c00:	e7a6      	b.n	8003b50 <_printf_i+0x164>
 8003c02:	2301      	movs	r3, #1
 8003c04:	4632      	mov	r2, r6
 8003c06:	4649      	mov	r1, r9
 8003c08:	4640      	mov	r0, r8
 8003c0a:	47d0      	blx	sl
 8003c0c:	3001      	adds	r0, #1
 8003c0e:	d09d      	beq.n	8003b4c <_printf_i+0x160>
 8003c10:	3501      	adds	r5, #1
 8003c12:	68e3      	ldr	r3, [r4, #12]
 8003c14:	9903      	ldr	r1, [sp, #12]
 8003c16:	1a5b      	subs	r3, r3, r1
 8003c18:	42ab      	cmp	r3, r5
 8003c1a:	dcf2      	bgt.n	8003c02 <_printf_i+0x216>
 8003c1c:	e7eb      	b.n	8003bf6 <_printf_i+0x20a>
 8003c1e:	2500      	movs	r5, #0
 8003c20:	f104 0619 	add.w	r6, r4, #25
 8003c24:	e7f5      	b.n	8003c12 <_printf_i+0x226>
 8003c26:	bf00      	nop
 8003c28:	08003d59 	.word	0x08003d59
 8003c2c:	08003d6a 	.word	0x08003d6a

08003c30 <memmove>:
 8003c30:	4288      	cmp	r0, r1
 8003c32:	b510      	push	{r4, lr}
 8003c34:	eb01 0402 	add.w	r4, r1, r2
 8003c38:	d902      	bls.n	8003c40 <memmove+0x10>
 8003c3a:	4284      	cmp	r4, r0
 8003c3c:	4623      	mov	r3, r4
 8003c3e:	d807      	bhi.n	8003c50 <memmove+0x20>
 8003c40:	1e43      	subs	r3, r0, #1
 8003c42:	42a1      	cmp	r1, r4
 8003c44:	d008      	beq.n	8003c58 <memmove+0x28>
 8003c46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c4e:	e7f8      	b.n	8003c42 <memmove+0x12>
 8003c50:	4402      	add	r2, r0
 8003c52:	4601      	mov	r1, r0
 8003c54:	428a      	cmp	r2, r1
 8003c56:	d100      	bne.n	8003c5a <memmove+0x2a>
 8003c58:	bd10      	pop	{r4, pc}
 8003c5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c62:	e7f7      	b.n	8003c54 <memmove+0x24>

08003c64 <_sbrk_r>:
 8003c64:	b538      	push	{r3, r4, r5, lr}
 8003c66:	4d06      	ldr	r5, [pc, #24]	; (8003c80 <_sbrk_r+0x1c>)
 8003c68:	2300      	movs	r3, #0
 8003c6a:	4604      	mov	r4, r0
 8003c6c:	4608      	mov	r0, r1
 8003c6e:	602b      	str	r3, [r5, #0]
 8003c70:	f7fc ff1e 	bl	8000ab0 <_sbrk>
 8003c74:	1c43      	adds	r3, r0, #1
 8003c76:	d102      	bne.n	8003c7e <_sbrk_r+0x1a>
 8003c78:	682b      	ldr	r3, [r5, #0]
 8003c7a:	b103      	cbz	r3, 8003c7e <_sbrk_r+0x1a>
 8003c7c:	6023      	str	r3, [r4, #0]
 8003c7e:	bd38      	pop	{r3, r4, r5, pc}
 8003c80:	20000340 	.word	0x20000340

08003c84 <_realloc_r>:
 8003c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c88:	4680      	mov	r8, r0
 8003c8a:	4614      	mov	r4, r2
 8003c8c:	460e      	mov	r6, r1
 8003c8e:	b921      	cbnz	r1, 8003c9a <_realloc_r+0x16>
 8003c90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c94:	4611      	mov	r1, r2
 8003c96:	f7ff bc57 	b.w	8003548 <_malloc_r>
 8003c9a:	b92a      	cbnz	r2, 8003ca8 <_realloc_r+0x24>
 8003c9c:	f7ff fbe8 	bl	8003470 <_free_r>
 8003ca0:	4625      	mov	r5, r4
 8003ca2:	4628      	mov	r0, r5
 8003ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ca8:	f000 f81b 	bl	8003ce2 <_malloc_usable_size_r>
 8003cac:	4284      	cmp	r4, r0
 8003cae:	4607      	mov	r7, r0
 8003cb0:	d802      	bhi.n	8003cb8 <_realloc_r+0x34>
 8003cb2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003cb6:	d812      	bhi.n	8003cde <_realloc_r+0x5a>
 8003cb8:	4621      	mov	r1, r4
 8003cba:	4640      	mov	r0, r8
 8003cbc:	f7ff fc44 	bl	8003548 <_malloc_r>
 8003cc0:	4605      	mov	r5, r0
 8003cc2:	2800      	cmp	r0, #0
 8003cc4:	d0ed      	beq.n	8003ca2 <_realloc_r+0x1e>
 8003cc6:	42bc      	cmp	r4, r7
 8003cc8:	4622      	mov	r2, r4
 8003cca:	4631      	mov	r1, r6
 8003ccc:	bf28      	it	cs
 8003cce:	463a      	movcs	r2, r7
 8003cd0:	f7ff fbc0 	bl	8003454 <memcpy>
 8003cd4:	4631      	mov	r1, r6
 8003cd6:	4640      	mov	r0, r8
 8003cd8:	f7ff fbca 	bl	8003470 <_free_r>
 8003cdc:	e7e1      	b.n	8003ca2 <_realloc_r+0x1e>
 8003cde:	4635      	mov	r5, r6
 8003ce0:	e7df      	b.n	8003ca2 <_realloc_r+0x1e>

08003ce2 <_malloc_usable_size_r>:
 8003ce2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ce6:	1f18      	subs	r0, r3, #4
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	bfbc      	itt	lt
 8003cec:	580b      	ldrlt	r3, [r1, r0]
 8003cee:	18c0      	addlt	r0, r0, r3
 8003cf0:	4770      	bx	lr
	...

08003cf4 <_init>:
 8003cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cf6:	bf00      	nop
 8003cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cfa:	bc08      	pop	{r3}
 8003cfc:	469e      	mov	lr, r3
 8003cfe:	4770      	bx	lr

08003d00 <_fini>:
 8003d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d02:	bf00      	nop
 8003d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d06:	bc08      	pop	{r3}
 8003d08:	469e      	mov	lr, r3
 8003d0a:	4770      	bx	lr
